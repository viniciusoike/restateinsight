{
  "hash": "a81e7629b1d5adea93aa2ebec452a74b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'You need a map - Parte 4'\ndate: '2024-01-07'\ncategories: ['data visualization', 'ggplot2', 'turorial-R']\ndescription: \"\"\ndraft: true\nexecute: \n  eval: false\n---\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(ggmap)\nlibrary(dplyr)\nlibrary(sf)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- qs::qread(\"/Users/viniciusoike/Documents/GitHub/weekly_viz/data/car_accidents_non_fatal.qs\")\n\ndat <- dat %>%\n  filter(\n    name_city == \"SAO PAULO\",\n    ts_year == 2023,\n    ts_month %in% c(\"OUTUBRO\", \"NOVEMBRO\", \"DEZEMBRO\"),\n    !is.na(lat),\n    !is.na(lng)\n    ) %>%\n  select(lat, lng, victims_total, ts_day_shift, ts_date, ts_time_accident, ts_weekday)\n\ndat <- dat %>%\n  mutate(\n    ts_weekday = stringr::str_to_title(ts_weekday),\n    ts_weekday = factor(\n      ts_weekday,\n      levels = c(\"Domingo\", \"Segunda\", \"Terça\", \"Quarta\", \"Quinta\", \"Sexta\", \"Sábado\")\n      ),\n    ts_time_accident = lubridate::hm(ts_time_accident),\n    ts_hour = lubridate::hour(ts_time_accident)\n  )\n\naccidents = st_as_sf(\n  dat,\n  coords = c(\"lng\", \"lat\"),\n  crs = 4326,\n  remove = FALSE\n  )\n\nspborder = geobr::read_municipality(3550308)\nspborder = st_transform(spborder, crs = 4326)\nspborder$geoid = 1\n\naccidents = accidents %>%\n  st_join(spborder) %>%\n  filter(!is.na(geoid))\n```\n:::\n\n\n# Mapas de calor\n\nJuntando as ferramentas vistas nos últimos posts, vamos montar um mapa de calor com basemap estático. Vamos usar a base de acidentes de trânsito não-fatais de São Paulo. Os dados são da xxx e foram coletados por mim. Para simplificar a análise vamos considerar apenas os acidentes em dezembro de 2023. Ao todo temos quase 4000 acidentes.\n\n## Setup\n\nComo sempre, é possível visualizar estes dados como pontos.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(sample_n(accidents, 500)) +\n  geom_sf(alpha = 0.2)\n```\n:::\n\n\n## Importando um basemap\n\nPrimeiro, vamos importar um basemap estático. Isto é feito usando o pacote `ggmaps`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspborder <- geobr::read_municipality(3550308)\nspborder <- st_transform(spborder, crs = 4326)\nbasemap <- ggmap::get_stadiamap(as.numeric(st_bbox(spborder)), zoom = 12)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggmap(basemap)\n```\n:::\n\n\n## Combinando os elementos\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggmap(basemap) +\n  geom_point(\n    data = sample_n(accidents, 500),\n    aes(x = lng, y = lat),\n    size = 0.1,\n    alpha = 0.75,\n    color = \"firebrick\"\n    ) +\n  coord_sf(ylim = c(-23.8, -23.45)) +\n  ggthemes::theme_map()\n```\n:::\n\n\n## Agregando pontos\n\nÉ difícil enxergar um padrão somente olhando para pontos. Vamos usar algumas das técnicas vistas neste post anterior para agregar pontos. O primeiro mapa abaixo mostra como criar um grid retangular. A escolha do número de bins não é trivial.\n\nEste código simples funciona apenas para mostrar o número total (frequência) de ocorrências ou a soma total de alguma variável. No caso abaixo, mostra-se o número total de vítimas em acidentes de trânsito não-fatais.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggmap(basemap) +\n  geom_bin2d(\n    data = accidents,\n    aes(x = lng, y = lat, weight = victims_total),\n    alpha = 0.5,\n    bins = 80\n    ) +\n  scale_fill_distiller(\n    name = stringr::str_wrap(\n      \"Número de vítimas em acidentes de trânsito não-fatais\", 11\n      ),\n    palette = \"Reds\", direction = 1) +\n  coord_sf(ylim = c(-23.8, -23.45))\n```\n:::\n\n\nTambém é possível desenhar linhas de contorno.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggmap(basemap) +\n  geom_density_2d(\n    data = accidents,\n    aes(x = lng, y = lat),\n    color = \"red\"\n    ) +\n  coord_sf(ylim = c(-23.8, -23.45)) +\n  ggthemes::theme_map()\n```\n:::\n\n\n## Mapas de calor\n\nO código abaixo mostra como montar um mapa de calor usando uma escala contínua.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggmap(basemap) +\n  stat_density_2d(\n    data = accidents,\n    aes(x = lng, y = lat, fill = ..level..),\n    geom = \"polygon\",\n    alpha = 0.15,\n    color = NA\n    ) +\n  scale_fill_distiller(palette = \"YlOrRd\", direction = 1)\n```\n:::\n\n\nPara montar um mapa de calor com uma escala discreta, precisa-se especificar o número de `bins` ou o tamanho do `binwidth`. Pode-se também definir as quebras manualmente usando `breaks`. O funcionamento destes argumentos é similar a `geom_bin_2d` ou `geom_histogram`. No mapa abaixo, os dados são normalizados numa escala 0-1; para tornar o mapa mais limpo eu removo valores muito baixo (\\<0.1).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggmap(basemap) +\n  geom_density_2d_filled(\n    data = accidents,\n    aes(x = lng, y = lat),\n    contour_var = \"ndensity\",\n    alpha = 0.5,\n    color = NA,\n    breaks = seq(0.1, 1, 0.1)\n    ) +\n  scale_fill_brewer(palette = \"YlOrRd\", direction = 1) +\n  ggthemes::theme_map() +\n  theme(legend.position = \"right\")\n```\n:::\n\n\n### Encontrando padrões\n\nNaturalmente, pode-se tratar estes mapas como objetos de `ggplot2` quaisquer. Uma alternativa interessante é usar `facet_wrap` para criar pequenos mapas. O código abaixo mostra como mapear os acidentes por dia de semana. Nota-se que há mais acidentes durante os dias de semana. O padrão de localização dos acidentes também parece se alterar, mas é difícil de visualizar isto, pois a escala distorce as cores nos dias de final de semana.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggmap(basemap) +\n  stat_density_2d(\n    data = accidents,\n    aes(x = lng, y = lat, fill = ..level..),\n    geom = \"polygon\",\n    alpha = 0.5,\n    color = NA\n    ) +\n  scale_fill_distiller(palette = \"YlOrRd\", direction = 1) +\n  facet_wrap(vars(ts_weekday)) +\n  ggthemes::theme_map() +\n  theme(legend.position = \"right\")\n```\n:::\n\n\nPara melhorar comparar o padrão de localização de acidentes pode-se usar a densidade, ao invés do número absoluto de acidentes. No mapa abaixo vê-se como há mais acidentes na Zona Leste e menos acidentes no Centro nos finais de semana, relativamente aos dias de semana.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggmap(basemap) +\n  geom_density_2d_filled(\n    data = accidents,\n    aes(x = lng, y = lat),\n    contour_var = \"ndensity\",\n    alpha = 0.5,\n    color = NA,\n    breaks = seq(0.1, 1, 0.1)\n    ) +\n  scale_fill_brewer(palette = \"YlOrRd\", direction = 1) +\n  facet_wrap(vars(ts_weekday)) +\n  ggthemes::theme_map() +\n  theme(legend.position = \"right\")\n```\n:::\n\n\nO número de acidentes de trânsito também flutua ao longo de cada dia. O histograma abaixo mostra como o número de acidentes dimnue durante a madrugada, quando o fluxo de carros é menor.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(accidents, aes(x = ts_hour)) +\n  geom_bar(fill = \"#457b9d\") +\n  geom_hline(yintercept = 0) +\n  scale_x_continuous(breaks = 0:23) +\n  theme_bw() +\n  theme(panel.grid.minor = element_blank())\n```\n:::\n\n\nO mapa abaixo mostra como os acidentes se distribuem conforme o horário do dia. Nota-se que durante a madrugada e a noite, os acidentes ficam menos concentrados no espaço.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggmap(basemap) +\n  geom_density_2d_filled(\n    data = accidents,\n    aes(x = lng, y = lat),\n    contour_var = \"ndensity\",\n    alpha = 0.5,\n    color = NA,\n    breaks = seq(0.1, 1, 0.1)\n    ) +\n  scale_fill_brewer(palette = \"YlOrRd\", direction = 1) +\n  facet_wrap(vars(ts_day_shift)) +\n  ggthemes::theme_map() +\n  theme(legend.position = \"right\")\n```\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}