{
  "hash": "c474b7d5cb378d995bfad6705f5e66e3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Introdução'\ndate: '2023-07-06'\ncategories: ['data-visualization', 'ggplot2', 'tutorial-R']\ndescription: \"Começe por aqui\"\ntitle-block-banner: true\n---\n\n# Introdução ao ggplot2: Criando Visualizações\n\nNesta série, exploraremos uma das ferramentas mais poderosas e versáteis para visualização de dados - o pacote `{ggplot2}`.\n\nA visualização de dados desempenha um papel fundamental na compreensão e comunicação de dados. O pacote `ggplot2`, desenvolvido por Hadley Wickham, é amplamente reconhecido como uma das melhores opções para a criação de gráficos esteticamente elegantes e informativos: atualmente, o `ggplot2` é utilizado nas melhores publicações acadêmicas e pelos melhores jornalistas de dados[^1].\n\n[^1]: Portais de notícias como BBC, Financial Times e The Economist montam muitas de suas visualizações usando `ggplot2`. Em alguns casos existem até pacotes abertos como o [{bbplot}](https://github.com/bbc/bbplot) que ajudam a fazer gráficos no mesmo estilo da publicação. Jornais nacionais como o Nexo também utilizam bastante gráficos feitos usando `ggplot2`.\n\nAbaixo seguem alguns aspectos fundamentais do `ggplot2`.\n\n1.  **Grammar of graphics**: O `ggplot2` cria gráficos seguindo uma abordagem consistente e \"construtiva\" baseada numa \"gramática\". Essencialmente, montamos os gráficos somando elementos estéticos individualmente; isto significa que você pode criar visualizações complexas a partir de um pequeno conjunto de componentes gráficos. Este é um conceito fundamental e sua poderosa versatilidade ficará mais evidente com a prática.\n\n2.  **Gráficos elegantes**: O `ggplot2` é permite criar gráficos de alta qualidade e visualmente atraentes, que vão imbuir seu trabalho de profissionalismo.\n\n3.  **Personalização**: O `ggplot2` oferece uma ampla gama de opções de personalização, permitindo que você ajuste cada aspecto do seu gráfico. Pode-se modificar cores, fontes, tamanhos, e muito mais para atender às suas necessidades específicas.\n\n4.  **Recursos adicionais**: a popularidade quase universal do ggplot2 significa que há diversos recursos riquíssimos para explorar. A lista oficial inclui mais de [100 pacotes](https://exts.ggplot2.tidyverse.org/gallery/) que oferecem diversas funções que potencializam o ggplot2.\n\nAo longo desta série de tutoriais, abordaremos os conceitos fundamentais do ggplot2 e guiaremos você passo a passo na criação de visualizações incríveis. Desde a construção de gráficos básicos até técnicas mais avançadas, você aprenderá a aproveitar todo o potencial do ggplot2 para apresentar e analisar seus dados de forma impactante.\n\nSe você está animado para começar, vá [aqui](https://restateinsight.com/posts/ggplot2-tutorial/1-grafico-dispersao) para acessar o primeiro tutorial da série.\n\nPara conhecer um pouco mais das potencialiades do ggplot2 veja, por exemplo:\n\n-   [As contribuições semanais de Cédric Scherer](https://www.cedricscherer.com/top/dataviz/#tidytuesday) ao projeto [{tidytuesday}](https://github.com/rfordatascience/tidytuesday). Estas visualizações foram feitas a partir de bases de dados variadas usando majoritariamente `ggplot2` e o `tidyverse`\n\n<!-- -->\n\n-   A galeria de [Thomas Lin Penderson](https://www.data-imaginist.com/art), que usa `ggplot2` e extensões para fazer arte generativa.\n\n-   [A galeria com mais de 120 extensões](https://exts.ggplot2.tidyverse.org/gallery/) (pacotes adicionais criados para apoiar o `ggplot2`) da Posit.\n\n## Roteiro\n\nO conteúdo destes posts segue uma filosofia básica: aprender a programar envolve prática e repetição. A melhor maneira de consumir este material é reescrevendo as linhas de código e executando elas.\n\nO material começa com quatro **gráfico fundamentais.** A apresentação do texto nestes posts é introdutória e supõe conhecimento nenhum de `R`. Os textos começam com a instalação do pacote `ggplot2` e discutem brevemente o que é um pacote e como escrever linhas de código no `R`.\n\n-   Gráfico de dispersão (ou scatterplot)\n\n-   Gráfico de coluna/barra\n\n-   Gráfico de histograma\n\n-   Gráfico de linha\n\nAntes de introduzir outros tipos de gráfico, foco em alguns aspectos essenciais de gráficos. É importante que um gráfico seja o mais autoexplicativo possível. A maneira mais simples e efetiva de fazer isto é com títulos, legendas e caixas de texto; mas há também outras formas mais sutis de alcançar este objetivo: destacando certas áreas do gráfico ou usando cores chamativas.\n\n-   Plotando texto e destacando observações.\n\n-   Escalas, legendas e temas (scales, labels and themes).\n\n-   Guia básico de cores e temas.\n\nOs quatro gráficos acima costumam ser a base de qualquer análise e vão resolver o seu problema em 90% dos casos. Depois, introduzo alguns gráficos diferentes:\n\n-   Facet plots\n\n-   Gráficos lollipop\n\n-   Gráficos de área\n\n-   Gráficos de tile (ou mapas de calor)\n\nPor fim, vou discutir algumas extensões populares do `ggplot2` e mostrar algumas estratégias para produzir gráficos de qualidade em grande escala.\n\n-   Extensões: indo muito além do básico\n\n-   Produção: gráficos em grande escala\n\nPara produzir boas visualizações é preciso também conhecimento sobre manipulação e limpeza de dados. Nos primeiros posts, eu propositalmente evito ao máximo qualquer manipulação para focar somente nas funções de visualização. Contudo, à medida que o material vai avançando vou utilizando cada vez mais funções do pacote {tidyverse} que acredito ser o melhor para manipulação de dados. Para introduzir e revisar algumas informações importantes vou incluir também um post sobre isto.\n\n-   Apêndice: manipular para enxergar\n\n### Sobre copiar e colar\n\nCopiar e colar é uma opção tentadora, mas que pode atrapalhar seu aprendizado: se você sempre copia e cola você evita de cometer erros; e cometer erros é parte importante de aprender algo novo.\n\nConsidere o código abaixo. Se eu executo ele numa nova sessão de `R` eu encontro um erro.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x = wt, y = MPG)) +\n  geom_point()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in ggplot(mtcars, aes(x = wt, y = MPG)): could not find function \"ggplot\"\n```\n\n\n:::\n:::\n\n\nO retorno do comando acima indica que não foi possível encontrar a função `ggplot`. Isto acontece porque eu esqueci de carregar o pacote `ggplot2`. Para carregar o pacote eu rodo `library(ggplot2)`. O comando agora retorna um novo erro.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(mtcars, aes(x = wt, y = MPG)) +\n  geom_point()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `geom_point()`:\n! Problem while computing aesthetics.\nℹ Error occurred in the 1st layer.\nCaused by error:\n! object 'MPG' not found\n```\n\n\n:::\n:::\n\n\nAgora temos um novo erro: o objeto `MPG` não foi encontrado. Talvez seja um erro de digitação. Vamos conferir o nome das colunas da base de dados `mtcars` usando a função `names()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\"\n[11] \"carb\"\n```\n\n\n:::\n:::\n\n\nDe fato, após a verificação, vemos que a variável `mpg` é minúscula. Agora o comando funciona.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](0-introduction_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nO processo iterativo de *tentativa e erro* é parte natural e rotineira da tarefa de programação. É importante entender que o seu código provavelmente não vai funcionar \"de primeira\" (e às vezes nem de segunda, nem de terceira...). É normal errar e devemos aproveitar o fato que as mensagens de erro do `R` costumam ser bastante instrutivas!\n",
    "supporting": [
      "0-introduction_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}