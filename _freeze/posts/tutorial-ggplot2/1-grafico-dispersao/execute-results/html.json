{
  "hash": "998a8f2da7729ca2cfa4ae202799eefe",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Fundamentos: gráfico de dispersão'\ndate: '2023-07-20'\ncategories: ['data-visualization', 'ggplot2', 'tutorial-R']\ndescription: \"O gráfico de dispersão mapeia pares de pontos num plano bidimensional. A principal utilidade deste tipo de gráfico é deixar evidente a correlação entre as duas variáveis escolhidas.\"\nexecute:\n  message: false\n  warning: false\nformat:\n  html:\n    code-fold: false\n    code-tools: true\nimage: \"/static/ggplot2_point.png\"\nimage-alt: \"/static/ggplot2_point.png\"\n---\n\n\n\n## Gráfico de dispersão\n\nO gráfico de dispersão mapeia pares de pontos num plano bidimensional. A principal utilidade deste tipo de gráfico é deixar evidente qual a relação entre as duas variáveis escolhidas.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](1-grafico-dispersao_files/figure-html/scatter-plot-poster-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nEm geral, colocamos a **variável explicativa** (regressor) no eixo horizontal e a **variável explicada** (resposta) no eixo vertical.\n\nNeste post vamos entender como montar gráficos de dispersão no R usando o pacote `ggplot2`. Primeiro vamos trabalhar um exemplo, passo a passo, para explorar uma base de preços de imóveis. Vamos entender como customizar o gráfico, variando as cores, os formatos e o tamanho dos círculos; além disso, vamos montar um gráfico de dispersão junto com uma linha de regressão.\n\n## R\n\nO primeiro passo é instalar o pacote `ggplot2`. O R funciona como um **repositório de pacotes**: cada pacote é como uma família de funções. Em geral, cada pacote tem uma finalidade específica. O `ggplot2` contém uma série de funções que permitem a construção de gráficos.\n\nO R tem um funcionalidade embutida que facilita o download e a instalação de pacotes. Usamos a função `install.packages(\"nome_do_pacote\")`. Então, para instalar o ggplot2 executamos o código abaixo.\n\nSe você estiver usando o R fora do RStudio é provável que a função abaixo solicite que você escolha um servidor a partir de uma lista. Escolha o que for mais próximo - geograficamente - de onde você está. No meu caso eu sempre utilizo o \"Brazil (SP 1) \\[https\\] - University of Sao Paulo, Sao Paulo\". Se você usa o R dentro do RStudio pode ignorar este passo.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Instalar o pacote ggplot2 (se necessário)\ninstall.packages(\"ggplot2\")\n```\n:::\n\n\nA cada vez que abrimos o R precisamos carregar os pacotes adicionais que instalamos previamente. Isto pode parecer trabalhoso à primeira vista, mas faz muito sentido: evita conflitos entre pacotes e é mais eficiente.\n\nPara carregar o `ggplot2` usamos a função `library` (*biblioteca*).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Carrega o pacote ggplot2\nlibrary(ggplot2)\n```\n:::\n\n\nEnquanto a maioria dos pactoes funciona como repositórios de funções alguns servem como repositórios de bases de dados. É o caso do pacote `wooldridge` que carrega as bases de dados utilizadas no livro [Introductory Econometrics: A Modern Approach](https://cran.r-project.org/web/packages/wooldridge/index.html) do economista Jeffrey Wooldridge.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Instalar o pacote ggplot2 (se necessário)\ninstall.packages(\"wooldridge\")\n# Carregar o pacote wooldridge\nlibrary(wooldridge)\n```\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\nNos primeiros exemplos abaixo vamos trabalhar com a base de dados `hrpice1` que coleta informações de preços de venda de imóveis na região metropolitana de Boston, nos EUA, em 1990. Para carregar a base usamos a função `data()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata(\"hprice1\")\n```\n:::\n\n\nVisualização e análise de dados são habilidades complementares. Aqui, vamos nos focar apenas nas habilidades visuais.\n\nA função `head()`, quando aplicada a um objeto `data.frame` mostra as primeiras linhas da tabela. Há muitas colunas mas vamos focar inicialmente na `price` que é o preço em milhares de dólares e na coluna `sqrft` que é o tamanho do imóvel em pés quadrados.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhead(hprice1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    price assess bdrms lotsize sqrft colonial   lprice  lassess llotsize\n1 300.000  349.1     4    6126  2438        1 5.703783 5.855359 8.720297\n2 370.000  351.5     3    9903  2076        1 5.913503 5.862210 9.200593\n3 191.000  217.7     3    5200  1374        0 5.252274 5.383118 8.556414\n4 195.000  231.8     3    4600  1448        1 5.273000 5.445875 8.433811\n5 373.000  319.1     4    6095  2514        1 5.921578 5.765504 8.715224\n6 466.275  414.5     5    8566  2754        1 6.144775 6.027073 9.055556\n    lsqrft\n1 7.798934\n2 7.638198\n3 7.225482\n4 7.277938\n5 7.829630\n6 7.920810\n```\n\n\n:::\n:::\n\n\n## ggplot2\n\nA estrutura de um gráfico do `ggplot2` parte de três elementos básicos: (1) uma base de dados, isto é, um objeto `data.frame`; (2) um mapeamento de variáveis, feito com auxílio da função `aes()`; (3) a escolha da forma do gráfico, feito com as funções `geom`.\n\nO `ggplot2` funciona adicionando camadas sobre um gráfico inicial.\n\nComeçamos com a função `ggplot()` e vamos adicionando *geoms*, funções auxiliares que especificam a forma do gráfico. Este processo construtivo de adicionar elementos a um gráfico é o principal diferencial do `ggplot`.\n\nOu seja, temos três elementos básicos\n\n1.  *Dados* - nossa tabela de dados.\n2.  *Função `aes()`* - que transforma os dados em objetos visuais.\n3.  *Objeto geométrico (`geom`)* - que escolhe qual o formato destes objetos visuais.\n\nEsta estrutura básica é esquematizada no pseudo-código abaixo.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = base_de_dados, aes(x = variavel_x, y = variavel_y)) +\n  geom_point()\n```\n:::\n\n\nNo nosso caso a base de dados é a `hprice1` e as variáveis são `sqrft` e `price`.\n\nTemos que informar isto usando `data = hprice` e `aes(x = sqrft, y = price)`.\n\nPor fim, como queremos um gráfico de dispersão escolhemos o `geom_point()`. Esta última chamada é adicionada à função inicial com o sinal de soma `+`.\n\nO código abaixo junta todos estes elementos e resulta num gráfico de dispersão entre o tamanho do imóvel (`sqrft`) e seu preço de venda (`price`).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = hprice1, aes(x = sqrft, y = price)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](1-grafico-dispersao_files/figure-html/scatter-plot-ex-1-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nO gráfico acima ainda está bastante cru e podemos melhorá-lo de diversas formas. Ainda assim, ele já é interessante: revela uma relação crescente entre o tamanho do imóvel e do seu preço de venda.\n\n## Elementos estéticos\n\nPodemos customizar um gráfico de `ggplot` modificando os seus **elementos estéticos**. Um elemento estético pode assumir dois tipos de valor: constante ou variável. Um valor constante é um número ou texto, enquanto uma variável é uma coluna da nossa base de dados.\n\nSão quatro os principais elementos estéticos que podemos manipular no caso do `geom_point`:\n\n1.  `color` - a cor do objeto\n2.  `alpha` - a transparência da cor\n3.  `size` - o tamanho do objeto\n4.  `shape` - o formato do objeto\n\nQuando executamos o código acima o valor destes parâmetros foi definido automaticamente. Podemos modificá-los chamando eles explicitamente.\n\n### Color - cores\n\nA maneira mais simples de alterar as cores é chamando ela por nome. No exemplo usamos a cor `steelblue`. Uma lista completa de cores [está disponível aqui](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = hprice1, aes(x = sqrft, y = price)) +\n  geom_point(color = \"steelblue\")\n```\n\n::: {.cell-output-display}\n![](1-grafico-dispersao_files/figure-html/scatter-plot-color-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nTambém é possível escolher a cor via hexadecimal.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = hprice1, aes(x = sqrft, y = price)) +\n  geom_point(color = \"#e76f51\")\n```\n\n::: {.cell-output-display}\n![](1-grafico-dispersao_files/figure-html/scatter-plot-color-hex-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n### Alpha - transparência\n\nO parâmetro `alpha` controla o nível de transparência da cor. Este artifício costuma ser útil para evitar que muitos pontos fiquem sobrepostos (*overplotting*).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = hprice1, aes(x = sqrft, y = price)) +\n  geom_point(color = \"steelblue\", alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](1-grafico-dispersao_files/figure-html/scatter-plot-alpha-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](1-grafico-dispersao_files/figure-html/scatter-plot-panel-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n### Size - tamanho\n\nPodemos manipular o tamanho dos pontos usando `size` e ajustando o valor numérico.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = hprice1, aes(x = sqrft, y = price)) +\n  geom_point(color = \"steelblue\", size = 5)\n```\n\n::: {.cell-output-display}\n![](1-grafico-dispersao_files/figure-html/scatter-plot-size-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nAgora que os círculos estão maiores há mais casos de sobreposição. Uma solução para evitar isto é aplicar algum valor de `alpha`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = hprice1, aes(x = sqrft, y = price)) +\n  geom_point(color = \"steelblue\", size = 5, alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](1-grafico-dispersao_files/figure-html/scatter-overplot-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n### Shape - formato\n\nPor padrão o formato do `geom_point` é um círculo mas há muitas outras opções. Para trocar o formato do objeto usamos `shape = 2`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = hprice1, aes(x = sqrft, y = price)) +\n  geom_point(shape = 2)\n```\n\n::: {.cell-output-display}\n![](1-grafico-dispersao_files/figure-html/scatter-plot-shape-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nO gráfico abaixo ilustra os principais tipos de formatos disponíveis.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](1-grafico-dispersao_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nNote que em alguns casos como o 21 é possível controlar tanto a cor do contorno do círculo como também da cor de dentro.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = hprice1, aes(x = sqrft, y = price)) +\n  geom_point(shape = 21, color = \"steelblue\", fill = \"orange\")\n```\n\n::: {.cell-output-display}\n![](1-grafico-dispersao_files/figure-html/scatter-plot-shape-ex-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n### Combinando todos os elementos\n\nO gráfico abaixo serve apenas para ilustrar o uso de todos os parâmetros. Naturalmente, o uso destes elementos estéticos deve favorecer o melhor entendimento do gráfico e não deve ser utilizado de forma gratuita.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = hprice1, aes(x = sqrft, y = price)) +\n  geom_point(\n    shape = 21,\n    color = \"steelblue\",\n    fill = \"orange\",\n    size = 7,\n    alpha = 0.75\n  )\n```\n\n::: {.cell-output-display}\n![](1-grafico-dispersao_files/figure-html/scatter-plot-color-size-alpha-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Usando cores para representar variáveis\n\nOs elementos estéticos também podem ser utilizados para representar variáveis nos dados. Vamos voltar para a função `aes`. Como expliquei acima, esta função \"transforma\" nossos dados em elementos visuais. Nos casos acima, ela mapeia as variáveis `x` e `y` nas suas respectivas coordenadas.\n\nMas podemos mapear as variáveis nos elementos estéticos: `color`, `alpha`, `size`, `shape`.\n\nVamos primeiro voltar à nossa base de dados. Olhando para as primeiras linhas vemos que há uma coluna chamada `colonial` que é uma variável binária que indica se o estilo arquitetônico do imóvel é colonial.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhead(hprice1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    price assess bdrms lotsize sqrft colonial   lprice  lassess llotsize\n1 300.000  349.1     4    6126  2438        1 5.703783 5.855359 8.720297\n2 370.000  351.5     3    9903  2076        1 5.913503 5.862210 9.200593\n3 191.000  217.7     3    5200  1374        0 5.252274 5.383118 8.556414\n4 195.000  231.8     3    4600  1448        1 5.273000 5.445875 8.433811\n5 373.000  319.1     4    6095  2514        1 5.921578 5.765504 8.715224\n6 466.275  414.5     5    8566  2754        1 6.144775 6.027073 9.055556\n    lsqrft\n1 7.798934\n2 7.638198\n3 7.225482\n4 7.277938\n5 7.829630\n6 7.920810\n```\n\n\n:::\n:::\n\n\nPodemos plotar o mesmo gráfico de dispersão mas fazer com que a cor do círculo represente a variável `colonial`. No gráfico abaixo, os pontos em azul são imóveis com estilo colonial, enquanto que os pontos em vermelho (salmão) são os imóveis de outros estilos.\n\nVemos que parece haver uma tendência de que os imóveis coloniais vendem por valores mais elevados, pois os pontos azuis aparecem acima dos pontos vermelhos, mas há exceções. Isso sugere que imóveis de estilo colonial têm preço mais elevado do que imóveis de tamanho similar, mas construídos em estilos diferentes.\n\nEste exemplo mostra como a visualização ajuda a formar algumas hipóteses iniciais que depois podem ser verificadas usando modelos estatísticos.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = hprice1, aes(x = sqrft, y = price)) +\n  geom_point(aes(color = factor(colonial)))\n```\n\n::: {.cell-output-display}\n![](1-grafico-dispersao_files/figure-html/scatter-plot-factor-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nDa mesma forma que modificamos a cor podemos modificar o tamanho segundo, por exemplo, o número de dormitórios.\n\nNo exemplo abaixo o tamanho do círculo é proporcional ao número de dormitórios.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = hprice1, aes(x = sqrft, y = price)) +\n  geom_point(aes(size = bdrms), alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](1-grafico-dispersao_files/figure-html/scatter-plot-factor-size-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Renomeando os eixos do gráfico\n\nÉ muito importante que um gráfico seja o mais auto-explicativo possível. Para isso precisamos inserir informações relevantes como título, subtítulo e fonte.\n\nA função `labs()` permite facilmente renomear os eixos do gráfico. Os argumentos principais são os abaixo.\n\n-   `title` - título do gráfico\n-   `subtitle` - subtítulo do gráfico\n-   `x` - título do eixo-x (horizontal)\n-   `y` - título do eixo-y (vertical)\n-   `caption` - legenda abaixo do gráfico (em geral, a fonte)\n\nNovamente, utilizamos o sinal de soma para adicionar estes elementos ao gráfico.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = hprice1, aes(x = sqrft, y = price)) +\n  geom_point() +\n  labs(\n    title = \"Quanto maior, mais caro\",\n    subtitle = \"Relação entre o preço do imóvel e sua área útil.\",\n    x = \"Área útil (pés quadrados)\",\n    y = \"Preço (USD milhares)\",\n    caption = \"Fonte: Wooldridge (Boston Globe)\"\n  )\n```\n\n::: {.cell-output-display}\n![](1-grafico-dispersao_files/figure-html/scatter-plot-labels-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Incluindo uma linha de regressão\n\nComo falamos no início do post, parte da mágica do `ggplot` é ir \"somando\" objetos. Podemos desejar incluir, por exemplo, uma linha de regressão em cima do gráfico de dispersão. No caso de uma regressão linear simples, esta linha mostra a correlação linear entre a variável no eixo horizontal com a variável no eixo vertical.\n\nA função `geom_smooth` facilita a inclusão de linhas de regressão. Se não for fornecido argumento à função ela tentará uma aproximação [LOESS](https://en.wikipedia.org/wiki/Local_regression). No exemplo abaixo eu escolho `method = \"lm\"` para que a função aproxime a relação linear (lm de *linear model*).\n\nNo nosso caso, a linha mostra a relação linear entre o preço do imóvel e a sua área útil. O argumento `se = FALSE` serve para omitir a estimativa do erro-padrão do coeficiente e deixar a visualização mais limpa.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = hprice1, aes(x = sqrft, y = price)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE)\n```\n\n::: {.cell-output-display}\n![](1-grafico-dispersao_files/figure-html/scatter-plot-regression-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nPode-se especificar uma forma particular para a regressão. No caso abaixo faço uma regressão polinomial de segunda ordem (quadrática) usando a função `poly`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = hprice1, aes(x = sqrft, y = price)) +\n  geom_point() +\n  geom_smooth(formula = y ~ poly(x, 2), method = \"lm\", se = FALSE)\n```\n\n::: {.cell-output-display}\n![](1-grafico-dispersao_files/figure-html/scatter-plot-poly-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nA curva quadrática parece ter um ajuste visual melhor aos dados.\n\n## Resumo\n\nNeste post aprendemos o básico da estrutura sintática do `ggplot` e conseguimos montar gráficos de dispersão sofisticados usando poucas linhas de código. Em qualquer gráfico temos três elementos básicos\n\n1.  *Dados* - nossa tabela de dados.\n2.  *Função `aes()`* - que transforma os dados em objetos visuais.\n3.  *Objeto geométrico (`geom`)* - que escolhe qual o formato destes objetos visuais.\n\nSeguindo esta lógica e somando os objetos podemos criar belos gráficos.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = hprice1, aes(x = sqrft, y = price)) +\n  geom_point(color = \"#e63946\", alpha = 0.75, size = 2) +\n  geom_smooth(formula = y ~ poly(x, 2), method = \"lm\", se = FALSE) +\n  labs(\n    title = \"Quanto maior, mais caro\",\n    subtitle = \"Relação quadrática entre o preço do imóvel e sua área útil.\",\n    x = \"Área útil (pés quadrados)\",\n    y = \"Preço (USD milhares)\",\n    caption = \"Fonte: Wooldridge (Boston Globe)\"\n  )\n```\n\n::: {.cell-output-display}\n![](1-grafico-dispersao_files/figure-html/scatter-plot-final-1.png){fig-align='center' width=80%}\n:::\n:::\n\n",
    "supporting": [
      "1-grafico-dispersao_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}