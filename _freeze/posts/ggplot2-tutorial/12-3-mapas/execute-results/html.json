{
  "hash": "fbab2b5d294183b5306de03c85c1eae2",
  "result": {
    "markdown": "---\ntitle: 'You need a map - Parte 3'\ndate: '2024-01-07'\ncategories: ['data visualization', 'ggplot2', 'turorial-R']\ndescription: \"\"\ndraft: true\n---\n\n::: {.cell}\n\n:::\n\n\n# Mapas com elementos de mapas\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(ggthemes)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'dplyr' was built under R version 4.2.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'sf' was built under R version 4.2.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n```\n:::\n\n```{.r .cell-code}\nlibrary(geobr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'geobr' was built under R version 4.2.3\n```\n:::\n\n```{.r .cell-code}\nlibrary(osmdata)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nData (c) OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright\n```\n:::\n\n```{.r .cell-code}\nlibrary(raster)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: sp\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'sp' was built under R version 4.2.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'raster'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:dplyr':\n\n    select\n```\n:::\n\n```{.r .cell-code}\nlibrary(elevatr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nelevatr v0.99.0 NOTE: Version 0.99.0 of 'elevatr' uses 'sf' and 'terra'.  Use \nof the 'sp', 'raster', and underlying 'rgdal' packages by 'elevatr' is being \ndeprecated; however, get_elev_raster continues to return a RasterLayer.  This \nwill be dropped in future versions, so please plan accordingly.\n```\n:::\n\n```{.r .cell-code}\nlibrary(BAMMtools)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: package 'BAMMtools' was built under R version 4.2.3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: ape\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'ape'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:raster':\n\n    rotate, zoom\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:dplyr':\n\n    where\n```\n:::\n:::\n\n\n\n## OpenStreetMap\n\nPor \"elementos de mapas\" nos referimos aqui a ruas, avenidas, rios, etc. Isto é, elementos que costumam aparecer em mapas que não . O código abaixo acessa a API do [OpenStreetMap](https://www.openstreetmap.org/#map=4/-15.13/-53.19) para baixar todas as principais ruas do bairro Liberdade em São Paulo. Note que o processo para converter estes objetos para `sf` é um pouco trabalhoso.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(osmdata)\n\n## osmdata -----------------------------------------------------------------\n\n# Define bbox\nbbox <- getbb(\"Liberdade, São Paulo, Brazil\")\n# Base query\nqr <- opq(bbox)\n\n# Add feature requests to query\n\n# All roads\nqr_roads <- add_osm_feature(qr, key = \"highway\")\n# Only big roads\nqr_big_streets <- add_osm_feature(\n  qr,\n  key = \"highway\",\n  value = c(\"motorway\", \"primary\", \"motorway_link\", \"primary_link\")\n)\n# Only medium roads\nqr_med_streets <- add_osm_feature(\n  qr,\n  key = \"highway\",\n  value = c(\"secondary\", \"tertiary\", \"secondary_link\", \"tertiary_link\")\n)\n# Only small roads\nqr_small_streets <- add_osm_feature(\n  qr,\n  key = \"highway\",\n  value = c(\"residential\", \"living_street\", \"unclassified\", \"service\",\n            \"footway\")\n)\n# Download\nroads <- osmdata_sf(q = qr_roads)\nbig_streets <- osmdata_sf(q = qr_big_streets)\nmed_streets <- osmdata_sf(q = qr_med_streets)\nsmall_streets <- osmdata_sf(q = qr_small_streets)\n\ns1 <- big_streets$osm_lines %>%\n  st_transform(crs = 4674)\n\ns2 <- med_streets$osm_lines %>%\n  st_transform(crs = 4674)\n\ns3 <- small_streets$osm_lines %>%\n  st_transform(crs = 4674)\n```\n:::\n\n\nO código abaixo monta o mapa.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(\n    data = s1,\n    key_glyph = draw_key_rect,\n    lwd = 2\n  ) +\n  geom_sf(\n    data = s2,\n    key_glyph = draw_key_rect,\n    lwd = 0.6,\n    color = \"gray40\"\n  ) +\n  geom_sf(\n    data = s3,\n    key_glyph = draw_key_rect,\n    lwd = 0.45,\n    color = \"gray50\"\n  )\n```\n\n::: {.cell-output-display}\n![](12-3-mapas_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n## Elevação em São Paulo\n\nPor fim, vale mostrar um exemplo de um objeto espacial em formato raster. Vamos montar um mapa que monta um grid retangular com a altura de cada ponto na cidade de São Paulo. Os dados são importados pelo pacote `elevatr`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#> Importa o shape file do limite do município de São Paulo\nborder <- read_municipality(3550308, showProgress = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nUsing year 2010\n```\n:::\n\n```{.r .cell-code}\n#> Importa dados com a elevação da cidade\nelevation <- elevatr::get_elev_raster(border, z = 7)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nMosaicing & Projecting\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nNote: Elevation units are in meters.\n```\n:::\n\n```{.r .cell-code}\n#> Transforma os dados em polígonos e converte para sf\nelevation <- raster::rasterToPolygons(elevation)\nelevation <- st_as_sf(elevation)\nnames(elevation)[1] <- \"elevation\"\n\n#> Converte CRS e junta o shape de altitude com o shape da cidade\nspo_alti <- elevation %>%\n  st_transform(crs = 4674) %>%\n  st_intersection(border) %>%\n  filter(st_is_valid(.))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n:::\n:::\n\n\nO código abaixo gera o mapa. Note que usamos uma escala de cores contínua.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = spo_alti, aes(color = elevation, fill = elevation)) +\n  scale_color_viridis_c(name = \"\", option = \"inferno\", direction = -1) +\n  scale_fill_viridis_c(name = \"\", option = \"inferno\", direction = -1) +\n  coord_sf() +\n  theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](12-3-mapas_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nNovamente, é possível discretizar os dados para melhorar a visualização.\n\n\n::: {.cell}\n\n```{.r .cell-code}\njbreaks <- BAMMtools::getJenksBreaks(spo_alti$elevation, k = 8)\njbreaks <- round(jbreaks, -1)\njlabels <- paste(jbreaks, jbreaks[-1], sep = \"--\")\njlabels[length(jlabels)] <- paste0(max(jbreaks), \"+\")\n\nspo_alti <- mutate(spo_alti, jenks_group = factor(findInterval(elevation, jbreaks)))\n\nggplot() +\n  geom_sf(data = spo_alti, aes(color = jenks_group, fill = jenks_group)) +\n  scale_color_viridis_d(name = \"\", labels = jlabels, option = \"inferno\") +\n  scale_fill_viridis_d(name = \"\", labels = jlabels, option = \"inferno\") +\n  coord_sf() +\n  theme_map() +\n  theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](12-3-mapas_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## Elevação das ruas\n\nComo último exemplo, vamos combinar os dados de altitude/elevação com os dados de ruas e avenidas. Para tornar o exemplo mais simples vamos escolher a cidade de São Caetano do Sul, que é uma cidade relativamente pequena em extensão. O código abaixo é adaptado [deste post](https://restateinsight.com/posts/general-posts/2023-10-mapas-altitude/), em que mostro em detalhes como fazer este tipo de mapa para qualquer cidade do Brasil.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nborder <- geobr::read_municipality(3548807, showProgress = FALSE)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nUsing year 2010\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\nbbox <- opq(bbox = \"São Caetano do Sul, São Paulo, Brazil\")\n\nroads <- add_osm_feature(\n  bbox,\n  key = \"highway\",\n  value = c(\"primary\", \"secondary\", \"tertiary\", \"residential\", \"motorway_link\",\n            \"primary_link\", \"secondary_link\", \"tertiary_link\", \"living_street\")\n  )\n\nroads_sf <- osmdata_sf(roads)\nroads_sf <- roads_sf$osm_lines\nroads_sf <- st_transform(roads_sf, crs = 4674)\nroads_border <- st_intersection(roads_sf, border)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\naltitude <- elevatr::get_elev_raster(border, z = 9, clip = \"bbox\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nMosaicing & Projecting\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nClipping DEM to bbox\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nNote: Elevation units are in meters.\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\nspo_alti <- raster::rasterToPolygons(altitude)\nspo_alti <- sf::st_as_sf(spo_alti)\nnames(spo_alti)[1] <- \"elevation\"\n\nspo_alti <- spo_alti %>%\n  st_transform(crs = 4674) %>%\n  st_intersection(border) %>%\n  filter(st_is_valid(.))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n```\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\njbreaks <- BAMMtools::getJenksBreaks(spo_alti$elevation, k = 5)\n\nspo_alti <- spo_alti %>%\n  mutate(\n    jenks_group = factor(findInterval(elevation, jbreaks))\n  )\n\njbreaks <- round(jbreaks, -1)\njlabels <- paste(jbreaks, jbreaks[-1], sep = \"--\")\njlabels[length(jlabels)] <- paste0(max(jbreaks), \"+\")\n\nget_streets_altitude <- function(altitude, streets) {\n  \n  stopifnot(any(colnames(altitude) %in% \"jenks_group\"))\n  \n  #> Get all groups\n  groups = levels(altitude$jenks_group)\n  \n  #> For each group get the full polygon and join with streets\n  join_streets = function(group) {\n    \n    poly = altitude %>%\n      filter(jenks_group == group) %>%\n      st_union(.) %>%\n      st_as_sf()\n    \n    joined = suppressWarnings(st_intersection(streets, poly))\n    \n    return(joined)\n    \n  }\n  #> Apply the function to all groups\n  street_levels = parallel::mclapply(groups, join_streets)\n  #> Bind all results together\n  names(street_levels) = groups\n  out = bind_rows(street_levels, .id = \"level\")\n  \n  return(out)\n  \n}\n\nstreets_alti <- get_streets_altitude(spo_alti, roads_border)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = streets_alti, aes(color = level, fill = level)) +\n  scale_fill_viridis_d(option = \"inferno\", labels = jlabels) +\n  scale_color_viridis_d(option = \"inferno\", labels = jlabels) +\n  coord_sf() +\n  theme_map() +\n  theme(\n    legend.position = \"right\"\n  )\n```\n\n::: {.cell-output-display}\n![](12-3-mapas_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n# Posts relacionados\n\n-   [You need a map - Parte 1](https://restateinsight.com/posts/ggplot2-tutorial/12-1-mapas)\n\n-   [You need a map - Parte 2](https://restateinsight.com/posts/ggplot2-tutorial/12-2-mapas)\n\n-   [Indo além: mapas de calor](https://restateinsight.com/posts/ggplot2-tutorial/11-grafico-calor)\n\n-   [Estético: Escalas e Cores](https://restateinsight.com/posts/ggplot2-tutorial/6-scales-labels)\n\n-   [Altitude das Ruas nas Cidades do Brasil](https://restateinsight.com/posts/general-posts/2023-10-mapas-altitude/)\n\n-   [Taxa de veículos em São Paulo](https://restateinsight.com/posts/general-posts/2023-11-wz-cars/)",
    "supporting": [
      "12-3-mapas_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}