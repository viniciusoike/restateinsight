{
  "hash": "c9c6f70a4dea14b214d30469ab476a6a",
  "result": {
    "markdown": "---\ntitle: 'Fundamentos: gráfico de coluna'\ndate: '2023-08-08'\ncategories: ['data-visualization', 'ggplot2', 'tutorial-R']\ndescription: \"Um gráfico do colunas é uma ferramenta de visualização poderosa e versátil para visualizar a diferença de valores entre classes e também a evolução de valores ao longo do tempo.\"\ntitle-block-banner: true\nexecute: \n  message: false\n  warning: false\nfreeze: true\nimage: \"/static/ggplot2_bar.png\"\nimage-alt: \"/static/ggplot2_bar.png\"\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# Gráfico de Colunas\n\nUm gráfico do colunas é uma ferramenta de visualização poderosa e versátil. Tipicamente, cada coluna corresponde ao valor de uma classe.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](2-grafico-coluna_files/figure-html/column-poster-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nNeste post vamos aprender a montar gráficos de colunas usando o pacote `ggplot2`. Há duas funções para criar gráficos de colunas: o `geom_bar()` e `geom_col()`. A primeira função conta uma quantidade de ocorrências, é útil para resumir visualmente uma base de dados. Já a segunda função plota a altura da coluna segundo os valores nos dados, então é mais útil quando os dados já estão agregados. Estas diferenças ficarão mais claras nos exemplos abaixo.\n\n# R\n\nAntes de iniciar precisamos carregar o pacote `ggplot2`, que traz as funções necessárias para montar os gráficos. Adicionalmente, vamos carregar o pacote `wooldridge`, que carrega as bases de dados utilizadas no livro [Introductory Econometrics: A Modern Approach](https://cran.r-project.org/web/packages/wooldridge/index.html) do economista Jeffrey Wooldridge. Além deste, vamos carregar também o pacote `gapminder` para usar a base homônima, que compila dados de PIB per capita, população e expectativa de vida de diversos países no mundo[^1] .\n\n[^1]: Para mais informações sobre a ONG Gapminder veja o [link](https://www.gapminder.org).\n\nCaso os pacotes não estejam instalados é preciso executar primeiro o código abaixo.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Instala os pacotes necessários\ninstall.packages(c(\"ggplot2\", \"wooldridge\", \"gapminder\"))\n```\n:::\n\n\nPara carregar os pactoes utilizamos a função `library`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Carrega o pacote ggplot2\nlibrary(\"ggplot2\")\n# Carrega o pacote wooldridge\nlibrary(\"wooldridge\")\n# Carrega o pacote gapminder\nlibrary(\"gapminder\")\n# Carraga a base de dados hprice1\ndata(\"hprice1\")\n```\n:::\n\n\n## ggplot2\n\nO pacote `ggplot2` segue uma sintaxe bastante consistente, que permite \"somar\" elementos visuais sobre um mesmo gráfico. Isto permite que se crie uma infinidade de gráficos complexos a partir de elementos simples. Os elementos visuais são todos chamados por funções `geom` como as funções `geom_bar` (barra) e `geom_col` (coluna) citadas acima. Estes elementos são somados de maneira intuitiva usando o sinal de soma `+`.\n\nEssencialmente, temos os seguintes elementos principais:\n\n1.  `data` - Uma base de dados.\n2.  `aes` - Variáveis que são mapeadas em elementos visuais.\n3.  `geom` - Um objeto geométrico.\n\nEstes elementos são combinados numa sintaxe recorrente. A função `ggplot` tem apenas dois argumentos `data` e `aes`. Adicionamos uma função `geom` nesta chamada inicial como no exemplo abaixo. Note que usamos o `geom_col` mas poderíamos utilizar qualquer outra função como `geom_point`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = dados, aes(x = varivel_x, y = variavel_y)) +\n  geom_col()\n```\n:::\n\n\n### geom_bar\n\nA função `geom_bar()` exige apenas um argumento `x` que é o nome da variável que será \"contada\". Esta função conta a quantidade de vezes que os elementos da variável `x` se repetem e plota este valor num gráfico de barras.\n\nVamos utilizar a base `hprice1`, que agrega o preço de venda de imóveis em Boston em 1990. Para inspecionar os dados utilizamos a função `head`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhead(hprice1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    price assess bdrms lotsize sqrft colonial   lprice  lassess llotsize\n1 300.000  349.1     4    6126  2438        1 5.703783 5.855359 8.720297\n2 370.000  351.5     3    9903  2076        1 5.913503 5.862210 9.200593\n3 191.000  217.7     3    5200  1374        0 5.252274 5.383118 8.556414\n4 195.000  231.8     3    4600  1448        1 5.273000 5.445875 8.433811\n5 373.000  319.1     4    6095  2514        1 5.921578 5.765504 8.715224\n6 466.275  414.5     5    8566  2754        1 6.144775 6.027073 9.055556\n    lsqrft\n1 7.798934\n2 7.638198\n3 7.225482\n4 7.277938\n5 7.829630\n6 7.920810\n```\n:::\n:::\n\n\nA coluna `bdrms` indica o número de dormitórios do imóvel. Podemos contar o número de imóveis pelo número de dormitórios usando a função `geom_bar()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = hprice1, aes(x = factor(bdrms))) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](2-grafico-coluna_files/figure-html/bar-plot-ex-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nVamos quebrar o código acima em detalhes. Primeiro, usamos a função `ggplot()` para declarar que queremos fazer um gráfico.\n\nColocamos os argumentos `data` e `aes()` dentro desta função. O argumento `data` deve ser o nome da nossa base de dados: neste caso, `data = hprice1`.\n\nA função `aes()` é a que transforma as variáveis (as colunas da base de dados) em elementos visuais. Neste caso ele vai transformar o número de dormitórios em algum elemento visual. Escolhemos `aes(x = factor(bdrms))`. Aqui, a função `factor` é opcional, mas fortemente recomendada. Ela força a variável `bdrms` a se comportar como uma variável categórica (ao invés de uma variável contínua).\n\nEspecificamos qual deve ser o elemento visual somando a função `geom_bar()` no código inicial. Esta função indica que queremos um gráfico de barras.\n\nUnindo todas estes elementos temos um código enxuto que plota o gráfico. Vemos que os imóveis de 3 e 4 dormitórios são os mais comuns.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = hprice1, aes(x = factor(bdrms))) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](2-grafico-coluna_files/figure-html/bar-plot-ex-2-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n### geom_col\n\nA função `geom_col` desenha o mesmo tipo de gráfico que a função `geom_bar`, mas ela exige que sejam inputados dois argumentos: `x` e `y`. Geralmente, `x` é a classe ou categoria, enquanto que `y` é o valor que será transformado na \"altura\" da coluna.\n\nVamos montar um exemplo simples. Nosso objetivo é visualizar as medalhas olímpicas brasileiras na mais recente edição das Olimpíadas, em 2020 (que foi realizada apenas em 2021). Para isto, vamos inserir os dados diretamente usando a função `data.frame()`. Esta função permite criar uma base de dados manualmente. A sintaxe da função é bastante simples: primeiro declaramos o nome da coluna e depois os seus valores; vamos acrescentando colunas separando-as por vírgulas.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Exemplo de como usar a função data.frame\ndados <- data.frame(\n  nome_1 = c(...),\n  nome_2 = c(...),\n  ...\n)\n```\n:::\n\n\nNa última Olimpíada, o Brasil obteve 7 medalhas de ouro, 6 de prata e 8 de bronze. O código abaixo estrutura estes dados num `data.frame`. Aqui a função `factor` ajuda a organizar os dados, pois impõe uma ordem de grandeza na variável categórica `medalha`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Cria a base de dados\nolimpiadas <- data.frame(\n  medalha = factor(c(\"ouro\", \"prata\", \"bronze\"), levels = c(\"ouro\", \"prata\", \"bronze\")),\n  contagem = c(7, 6, 8)\n)\n# Exibe os dados\nolimpiadas\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-condensed table-hover\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:center;\"> medalha </th>\n   <th style=\"text-align:center;\"> contagem </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:center;\"> ouro </td>\n   <td style=\"text-align:center;\"> 7 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> prata </td>\n   <td style=\"text-align:center;\"> 6 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> bronze </td>\n   <td style=\"text-align:center;\"> 8 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nMontamos um gráfico de colunas usando o código abaixo.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = olimpiadas, aes(x = medalha, y = contagem)) +\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](2-grafico-coluna_files/figure-html/col-plot-olyimpics-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nNovamente, vamos decompor o código. Primeiro, usamos a função `ggplot()` para declarar que queremos fazer um gráfico. Precisamos informar: (1) uma base de dados, `data`; (2) duas variáveis que serão mapeadas `aes(x, y)`; (3) um \"elemento geométrico\" `geom`.\n\nO argumento `data` deve ser o nome da nossa base de dados: neste caso, `data = hprice1`.\n\nA função `aes()` é o que transforma as variáveis (as colunas da base de dados) em elementos visuais. Escolhemos `aes(x = medalha, y = contagem)`.\n\nA primeira variável é categórica e indica o tipo da medalha. Como especificamos a ordem de grandeza no código anterior, a função `aes()` sabe que `ouro > prata > bronze`.\n\nA segunda variável é numérica e indica quantas medalhas de cada tipo foram ganhas. Na prática, o `aes()` usa esta informação para definir a altura da coluna.\n\nEspecificamos qual deve ser o elemento visual somando a função `geom_col()` no código inicial. Esta função indica que queremos um gráfico de colunas.\n\n## Características estéticas\n\nPodemos customizar um gráfico de `ggplot` modificando os seus **elementos estéticos**. Um elemento estético pode assumir dois tipos de valor: constante ou variável. Um valor constante é um número ou texto, enquanto uma variável é uma coluna da nossa base de dados.\n\nUm gráfico de colunas tem três elementos estéticos principais:\n\n-   `color` - Define a cor do contorno da coluna.\n-   `fill` - Define a cor que preenche a coluna.\n-   `alpha` - Define o nível de transparência das cores.\n\nVale notar que os argumento `x` e `y` também são elementos estéticos. Mais especificamente eles são elementos estéticos *variáveis*, logo são mapeado com a função `aes()`. No caso da função `geom_bar()` apenas `x` é obrigatório enquanto que a função `geom_col()` exige tanto `x` como `y`.\n\n### Cores\n\nTemos o controle de duas cores: do contorno da coluna (`color`) e da cor que preenche a coluna (`fill`). O exemplo abaixo ilustra como podemos modificar estes elementos estéticos. No exemplo usamos a cor `steelblue` para preencher a coluna e definimos um contorno escuro usando `color = \"black\"`.\n\nUma lista completa de cores com nomes [está disponível aqui](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf). Também podemos especificar as cores usando código hexadecimal.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Exemplo chamando as cores por nomes\nggplot(data = olimpiadas, aes(x = medalha, y = contagem)) +\n  geom_col(color = \"black\", fill = \"steelblue\")\n```\n\n::: {.cell-output-display}\n![](2-grafico-coluna_files/figure-html/col-plot-color-1.png){fig-align='center' width=80%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Exemplo usando cores em hexadecimal\nggplot(data = olimpiadas, aes(x = medalha, y = contagem)) +\n  geom_col(color = \"#E5E5E5\", fill = \"#2A9D8F\")\n```\n\n::: {.cell-output-display}\n![](2-grafico-coluna_files/figure-html/col-plot-color-hex-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n### Alpha\n\nO parâmetro `alpha` varia entre 0 e 1 e indica a transparências das cores. Quanto menor o valor de `alpha`, maior será a transparência no resultado final.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = olimpiadas, aes(x = medalha, y = contagem)) +\n  geom_col(color = \"black\", fill = \"steelblue\", alpha = 0.3)\n```\n\n::: {.cell-output-display}\n![](2-grafico-coluna_files/figure-html/col-plot-alpha-1.png){fig-align='center' width=80%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](2-grafico-coluna_files/figure-html/col-plot-panel-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Usando cores para representar variáveis\n\nOs elementos estéticos também podem ser utilizados para representar variáveis nos dados. Vamos voltar para a função `aes`. Como expliquei acima, esta função mapeia nossos dados em elementos visuais. No caso da função `geom_col()`, ela mapeia a variável `x` no eixo-x, representando a categoria e variável `y` no eixo-y é a altura da barra, que indica seu valor.\n\nMas podemos mapear as variáveis nos elementos estéticos: `color`, `fill`, `alpha`.\n\nO uso prático mais comum é de variar o elemento `fill`, a cor que preenche a coluna, segundo alguma variável nos dados.\n\nNosso gráfico de medalhas olímpicas ficaria mais intuitivo se as cores das colunas correspondessem às cores das medalhas. Vamos tentar construir este gráfico.\n\nComo queremos que a cor de cada barra seja difernete para cada tipo de medalha temos de incluir o argumento `aes(fill = medalha)` dentro de `geom_col()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = olimpiadas, aes(x = medalha, y = contagem)) +\n  geom_col(aes(fill = medalha))\n```\n\n::: {.cell-output-display}\n![](2-grafico-coluna_files/figure-html/col-plot-factor-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nAgora o `R` mapeou uma cor diferente para cada valor distinto de `medalha`. Infelizmente, as cores padrão não nos ajudam neste caso. Podemos escolher estas cores manualmente usando a função `scale_fill_manual()`. O código abaixo faz este ajuste. As cores são inseridas dentro do argumento `values` em formato hexadecimal. Por fim, adicionamos a linha `guides(fill = \"none\")` para remover a legenda redundante.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = olimpiadas, aes(x = medalha, y = contagem)) +\n  geom_col(aes(fill = medalha)) +\n  # Escolhe manualmente as cores das colunas\n  scale_fill_manual(values = c(\"#FFD700\", \"#C0C0C0\", \"#CD7F32\")) +\n  # Remove a legenda\n  guides(fill = \"none\")\n```\n\n::: {.cell-output-display}\n![](2-grafico-coluna_files/figure-html/col-plot-ex-2-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Usando cores quando há múltiplos grupos\n\nQuando temos muitos grupos há duas opções para representar os dados: (1) empilhamos os diferentes grupos; ou (2) colocamos as colunas lado a lado.\n\nPara exemplificar, vamos aumentar nossa base de dados com medalhas olímpicas do Japão, Itália, Brasil e Nova Zelândia.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nolimp <- data.frame(\n  pais = factor(\n    c(\"Japão\", \"Japão\", \"Japão\", \"Itália\", \"Itália\", \"Itália\", \"Brasil\",\n      \"Brasil\", \"Brasil\", \"Nova Zelândia\", \"Nova Zelândia\", \"Nova Zelândia\"),\n    levels = c(\"Japão\", \"Itália\", \"Brasil\", \"Nova Zelândia\")),\n  medalha = factor(\n    c(\"Ouro\", \"Prata\", \"Bronze\", \"Ouro\", \"Prata\", \"Bronze\", \"Ouro\", \"Prata\",\n      \"Bronze\", \"Ouro\", \"Prata\", \"Bronze\"),\n    levels = c(\"Ouro\", \"Prata\", \"Bronze\")),\n  contagem = c(20, 28, 23, 10, 10, 20, 7, 6, 8, 7, 6, 7)\n)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-condensed table-hover\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:center;\"> pais </th>\n   <th style=\"text-align:center;\"> medalha </th>\n   <th style=\"text-align:center;\"> contagem </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:center;\"> Japão </td>\n   <td style=\"text-align:center;\"> Ouro </td>\n   <td style=\"text-align:center;\"> 20 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Japão </td>\n   <td style=\"text-align:center;\"> Prata </td>\n   <td style=\"text-align:center;\"> 28 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Japão </td>\n   <td style=\"text-align:center;\"> Bronze </td>\n   <td style=\"text-align:center;\"> 23 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Itália </td>\n   <td style=\"text-align:center;\"> Ouro </td>\n   <td style=\"text-align:center;\"> 10 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Itália </td>\n   <td style=\"text-align:center;\"> Prata </td>\n   <td style=\"text-align:center;\"> 10 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Itália </td>\n   <td style=\"text-align:center;\"> Bronze </td>\n   <td style=\"text-align:center;\"> 20 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Brasil </td>\n   <td style=\"text-align:center;\"> Ouro </td>\n   <td style=\"text-align:center;\"> 7 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Brasil </td>\n   <td style=\"text-align:center;\"> Prata </td>\n   <td style=\"text-align:center;\"> 6 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Brasil </td>\n   <td style=\"text-align:center;\"> Bronze </td>\n   <td style=\"text-align:center;\"> 8 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Nova Zelândia </td>\n   <td style=\"text-align:center;\"> Ouro </td>\n   <td style=\"text-align:center;\"> 7 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Nova Zelândia </td>\n   <td style=\"text-align:center;\"> Prata </td>\n   <td style=\"text-align:center;\"> 6 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Nova Zelândia </td>\n   <td style=\"text-align:center;\"> Bronze </td>\n   <td style=\"text-align:center;\"> 7 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nAgora, queremos que cada país seja representado por uma cor distinta. Vamos, então, inserir `aes(fill = pais)` dentro de `geom_col()`. Note que o padrão da função é de empilhar os resultados.\n\nOu seja, temos o número total de medalhas de ouro, prata e bronze, onde cada cor representa um país diferente.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(olimp, aes(x = medalha, y = contagem)) +\n  geom_col(aes(fill = pais))\n```\n\n::: {.cell-output-display}\n![](2-grafico-coluna_files/figure-html/col-plot-stack-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nSe quiseremos ter uma visualização que represente mais diretamente a performance de cada país temos que incluir um argumento adicional `position = \"dodge\"` dentro da função `geom_col()`. Agora fica mais evidente, por exemplo, que o Japão teve um número grande de medalhas de prata e que o Brasil e a Nova Zelândia tiveram desempenhos muito semelhantes - o Brasil ficou na frente por causa de uma medalha de bronze.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(olimp, aes(x = medalha, y = contagem)) +\n  geom_col(aes(fill = pais), position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](2-grafico-coluna_files/figure-html/col-plot-dodge-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nO padrão da função `geom_col()` é `position = \"stack\"`, que empilha as observações. Novamente, podemos escolher manualmente as cores dos grupos usando a função `scale_fill_manual()`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(olimp, aes(x = medalha, y = contagem)) +\n  geom_col(aes(fill = pais), position = \"dodge\") +\n  # Escolhe manualmente as cores das colunas\n  scale_fill_manual(\n    # Título da legenda (opcional)\n    name = \"País\",\n    # Valores das cores\n    values = c(\"#d62828\", \"#008C45\", \"#FFDF00\", \"#012169\"))\n```\n\n::: {.cell-output-display}\n![](2-grafico-coluna_files/figure-html/col-plot-scale-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nVale notar que existem vários pacotes e funções com cores pré-definidas que simplificam o processo manual de escolher as cores. O exemplo mais simples é o `scale_fill_brewer()` que utiliza as paletas de cores do [Color Brewer](https://colorbrewer2.org).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(olimp, aes(x = medalha, y = contagem)) +\n  geom_col(aes(fill = pais), position = \"dodge\") +\n  scale_fill_brewer(\n    # Título da legenda (opcional) - omite o título\n    name = \"\",\n    # Tipo (\"qual\" - qualitativo, \"div\" - divergente ou \"seq\" - sequencial)\n    type = \"qual\",\n    # Escolha da paleta\n    palette = 6\n    )\n```\n\n::: {.cell-output-display}\n![](2-grafico-coluna_files/figure-html/col-plot-brewer-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nUma última opção é de forçar o eixo-y a operar dentro do intervalo 0-1, isto é, fazer com que as barras somem 1 e representem a *proporção* de cada grupo. Fazemos isto utilizando o argumento `position = \"fill\"` dentro de `geom_col()`.\n\nNo gráfico abaixo temos a participação relativa de cada país no total de medalhas. Note que este tipo de gráfico faz mais sentido quando temos a totalidade dos grupos.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(olimp, aes(x = medalha, y = contagem)) +\n  geom_col(aes(fill = pais), position = \"fill\")\n```\n\n::: {.cell-output-display}\n![](2-grafico-coluna_files/figure-html/col-plot-fill-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nNo exemplo abaixo montamos uma nova base de dados com o número de medalhas por continente. Para reduzir a digitação manual utilizamos a função `rep()` que repete uma mesma palavra. Agora que temos a totalidade dos grupos faz mais sentido um gráfico de colunas que represente a proporção de cada grupo.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nolimp_continentes <- data.frame(\n  continente = factor(\n    rep(c(\"África\", \"América\", \"Ásia\", \"Europa\", \"Oceania\"), each = 3),\n    levels = c(\"Europa\", \"Ásia\", \"América\", \"Oceania\", \"África\")\n  ),\n  medalha = factor(\n    rep(c(\"Ouro\", \"Prata\", \"Bronze\"), times = 5)\n  ),\n  contagem = c(11, 12, 14, 72, 70, 70, 92, 80, 98, 141, 164, 193, 26, 13, 29)\n)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = olimp_continentes, aes(x = medalha, y = contagem)) +\n  geom_col(aes(fill = continente), position = \"fill\") +\n  scale_fill_brewer(name = \"Continente\", type = \"qual\", palette = 6)\n```\n\n::: {.cell-output-display}\n![](2-grafico-coluna_files/figure-html/col-plot-continent-fill-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Renomeando os eixos do gráfico\n\nÉ muito importante que um gráfico seja o mais auto-explicativo possível. Para isso precisamos inserir informações relevantes como título, subtítulo e fonte.\n\nA função `labs()` permite facilmente renomear os eixos do gráfico. Os argumentos principais são os abaixo.\n\n-   `title` - título do gráfico\n-   `subtitle` - subtítulo do gráfico\n-   `x` - título do eixo-x (horizontal)\n-   `y` - título do eixo-y (vertical)\n-   `caption` - legenda abaixo do gráfico (em geral, a fonte)\n\nNovamente, utilizamos o sinal de soma para adicionar estes elementos ao gráfico.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = olimp_continentes, aes(x = medalha, y = contagem)) +\n  geom_col(aes(fill = continente), position = \"fill\") +\n  scale_fill_brewer(type = \"qual\", palette = 6) +\n  labs(\n    title = \"Europa lidera Olimpíadas\",\n    subtitle = \"Medalhas obtidas por continente nas Olimpíadas de Tóquio 2020\",\n    x = \"Tipo da medalha\",\n    y = \"Share de medalhas\",\n    caption = \"Fonte: www.olympiandatabase.com\"\n  )\n```\n\n::: {.cell-output-display}\n![](2-grafico-coluna_files/figure-html/col-plot-labels-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Invertendo os eixos\n\nPara facilitar a visualização das categorias pode ser interessante inverter os eixos do gráfico. Para isto usa-se o `coord_flip()`. Vale notar que é possível inverter os eixos de qualquer tipo de gráfico do ggplot.\n\nPara este exemplo, vamos utilizar a base de dados `gapminder`. Este base compila dados de PIB per capita, população e expectativa de vida de vários países ao longo dos anos. Como o número de países é muito grande, vamos nos concentrar somente nos países do continente americano. Além disso, vamos olhar somente para as observações em 2007.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(\"gapminder\")\ndata(\"gapminder\")\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-condensed table-hover\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:center;\"> country </th>\n   <th style=\"text-align:center;\"> continent </th>\n   <th style=\"text-align:center;\"> year </th>\n   <th style=\"text-align:center;\"> lifeExp </th>\n   <th style=\"text-align:center;\"> pop </th>\n   <th style=\"text-align:center;\"> gdpPercap </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:center;\"> Afghanistan </td>\n   <td style=\"text-align:center;\"> Asia </td>\n   <td style=\"text-align:center;\"> 1952 </td>\n   <td style=\"text-align:center;\"> 29 </td>\n   <td style=\"text-align:center;\"> 8425333 </td>\n   <td style=\"text-align:center;\"> 779 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Albania </td>\n   <td style=\"text-align:center;\"> Europe </td>\n   <td style=\"text-align:center;\"> 1952 </td>\n   <td style=\"text-align:center;\"> 55 </td>\n   <td style=\"text-align:center;\"> 1282697 </td>\n   <td style=\"text-align:center;\"> 1601 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Algeria </td>\n   <td style=\"text-align:center;\"> Africa </td>\n   <td style=\"text-align:center;\"> 1952 </td>\n   <td style=\"text-align:center;\"> 43 </td>\n   <td style=\"text-align:center;\"> 9279525 </td>\n   <td style=\"text-align:center;\"> 2449 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Angola </td>\n   <td style=\"text-align:center;\"> Africa </td>\n   <td style=\"text-align:center;\"> 1952 </td>\n   <td style=\"text-align:center;\"> 30 </td>\n   <td style=\"text-align:center;\"> 4232095 </td>\n   <td style=\"text-align:center;\"> 3521 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Argentina </td>\n   <td style=\"text-align:center;\"> Americas </td>\n   <td style=\"text-align:center;\"> 1952 </td>\n   <td style=\"text-align:center;\"> 62 </td>\n   <td style=\"text-align:center;\"> 17876956 </td>\n   <td style=\"text-align:center;\"> 5911 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Australia </td>\n   <td style=\"text-align:center;\"> Oceania </td>\n   <td style=\"text-align:center;\"> 1952 </td>\n   <td style=\"text-align:center;\"> 69 </td>\n   <td style=\"text-align:center;\"> 8691212 </td>\n   <td style=\"text-align:center;\"> 10040 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Austria </td>\n   <td style=\"text-align:center;\"> Europe </td>\n   <td style=\"text-align:center;\"> 1952 </td>\n   <td style=\"text-align:center;\"> 67 </td>\n   <td style=\"text-align:center;\"> 6927772 </td>\n   <td style=\"text-align:center;\"> 6137 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Bahrain </td>\n   <td style=\"text-align:center;\"> Asia </td>\n   <td style=\"text-align:center;\"> 1952 </td>\n   <td style=\"text-align:center;\"> 51 </td>\n   <td style=\"text-align:center;\"> 120447 </td>\n   <td style=\"text-align:center;\"> 9867 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Bangladesh </td>\n   <td style=\"text-align:center;\"> Asia </td>\n   <td style=\"text-align:center;\"> 1952 </td>\n   <td style=\"text-align:center;\"> 37 </td>\n   <td style=\"text-align:center;\"> 46886859 </td>\n   <td style=\"text-align:center;\"> 684 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Belgium </td>\n   <td style=\"text-align:center;\"> Europe </td>\n   <td style=\"text-align:center;\"> 1952 </td>\n   <td style=\"text-align:center;\"> 68 </td>\n   <td style=\"text-align:center;\"> 8730405 </td>\n   <td style=\"text-align:center;\"> 8343 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nO código abaixo seleciona as linhas relevantas.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Selecionar apenas os países das Américas em 2007\namericas <- subset(gapminder, continent == \"Americas\" & year == 2007)\n```\n:::\n\n\nVamos montar um gráfico de colunas para comparar a expectativa de vida nos países do continente americano.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = americas, aes(x = country, y = lifeExp)) +\n  geom_col() +\n  labs(title = \"Expectativa de Vida\") +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](2-grafico-coluna_files/figure-html/col-plot-flip-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nPodemos melhorar o gráfico acima reordenando as colunas. Como comentei acima, podemos definir a ordem de uma variável categórica usando o argumento `levels` da função `factor()`.\n\nImagine que você tem uma série de avaliações que podem ser \"Bom\", \"Médio\" ou \"Ruim\" armazenadas num vetor chamado `feedback`. Para estruturar esta variável como `factor` é preciso definir qual a ordem destes valores. No exemplo abaixo define-se uma relação crescente: de \"Ruim\" até \"Bom\".\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfeedback <- c(\"Bom\", \"Bom\", \"Médio\", \"Ruim\", \"Médio\", \"Médio\")\nsatisfacao <- factor(feedback, levels = c(\"Ruim\", \"Médio\", \"Bom\"))\n\nsatisfacao\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] Bom   Bom   Médio Ruim  Médio Médio\nLevels: Ruim Médio Bom\n```\n:::\n:::\n\n\nNo nosso caso, queremos que a ordem do nome dos países seja a mesma que a ordem de grandeza da expectativa de vida. Para fazer isto usamos a função `order()`. O código abaixo pode parecer confuso à primeira vista, mas veremos maneiras de simplificá-lo em posts futuros.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlvls <- americas[[\"country\"]][order(americas[[\"lifeExp\"]])]\namericas[\"country_order\"] <- factor(americas[[\"country\"]], levels = lvls)\n```\n:::\n\n\nO gráfico de colunas agora está ordenado. Note que também modifico o título dos eixos para suprimir um deles definindo `x = NULL`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = americas, aes(x = country_order, y = lifeExp)) +\n  geom_col() +\n  labs(\n    title = \"Expectativa de Vida\",\n    x = NULL,\n    y = \"Anos\") +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](2-grafico-coluna_files/figure-html/col-plot-flip-2-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Estatísticas descritivas\n\nO `ggplot` permite visualizar estatísticas descritivas simples diretamente, dispensando a manipulação dos dados. Voltando ao nosso exemplo inicial do preços de imóveis na base `hprice1` podemos visualizar o preço mediano dos imóveis por número de dormitórios.\n\nPara fazer isto inserimos o argumento `stat = \"summary_bin\"` dentro da função `geom_bar()`. Além disso, precisamos adicionar a função desejada pelo argumento `fun`\\`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Preço mediano por número de dormitórios\nggplot(data = hprice1, aes(x = factor(bdrms), y = price)) +\n  geom_bar(stat = \"summary_bin\", fun = median)\n```\n\n::: {.cell-output-display}\n![](2-grafico-coluna_files/figure-html/bar-plot-median-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nDa mesma forma, podemos comparar o preço médio dos imóveis por número de dormitórios.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Preço médio por número de dormitórios\nggplot(data = hprice1, aes(x = factor(bdrms), y = price)) +\n  geom_bar(stat = \"summary_bin\", fun = mean)\n```\n\n::: {.cell-output-display}\n![](2-grafico-coluna_files/figure-html/bar-plot-mean-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nIsto pode ser utilizado para visulizar rapidamente o valor médio entre grupos distintos. Na base `hprice1`, a varíavel `colonial` indica o estilo arquitetônico do imóvel. Em particular se `colonial = 1` o imóvel tem um estilo colonial (rústico). Caso contrário `colonial = 0`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Preço médio comparando imóveis coloniais e não-coloniais\nggplot(data = hprice1, aes(x = factor(colonial), y = price)) +\n  geom_bar(stat = \"summary_bin\", fun = mean)\n```\n\n::: {.cell-output-display}\n![](2-grafico-coluna_files/figure-html/bar-plot-mean-factor-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Resumo\n\nNeste post aprendemos o básico da estrutura sintática do `ggplot` e conseguimos montar gráficos de colunas/barras sofisticados usando poucas linhas de código. Em qualquer gráfico temos três elementos básicos\n\n1.  *Dados* - nossa tabela de dados.\n2.  *Função `aes()`* - que transforma os dados em objetos visuais.\n3.  *Objeto geométrico (`geom`)* - que escolhe qual o formato destes objetos visuais.\n\nAlguns pontos importantes:\n\n1.  A ordem das colunas é definida pelos níveis da variável `x`. Para reordenar as colunas é preciso definir uma nova ordem usando `factor(x, levels = c(...))`.\n2.  Além dos elementos estéticos, gráficos de colunas tem o argumento `position` que define o comportamento do gráfico.\n3.  A função `geom_bar()` conta a ocorrência dos valores nos dados e pode ser utilizada também para informar outras estatísticas descritivas.\n4.  A função `geom_col()` exige os argumentos `x` e `y`, onde `y` define a altura da coluna no gráfico.\n\nSeguindo esta lógica e somando os objetos podemos criar belos gráficos.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = hprice1, aes(x = factor(bdrms), y = price)) +\n  geom_bar(\n    stat = \"summary_bin\",\n    fun = median,\n    fill = \"#264653\") +\n  labs(\n    title = \"Preço mediano do imóvel por número de dormitórios\",\n    x = \"Número de dormitórios\",\n    y = \"Preço (USD milhares)\",\n    caption = \"Fonte: Wooldridge (Boston Globe)\"\n    )\n```\n\n::: {.cell-output-display}\n![](2-grafico-coluna_files/figure-html/bar-plot-final-1.png){fig-align='center' width=80%}\n:::\n:::\n",
    "supporting": [
      "2-grafico-coluna_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}