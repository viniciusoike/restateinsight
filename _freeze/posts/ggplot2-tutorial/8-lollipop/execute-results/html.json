{
  "hash": "2d541592089f44bee7cea91a572ef39a",
  "result": {
    "markdown": "---\ntitle: 'Indo Além: Lollipops'\ndate: '2023-09-26'\ncategories: ['data-visualization', 'ggplot2', 'tutorial-R']\ndescription: \"Post intermediário que ensina a fazer gráficos de lollipop no R usando o pacote ggplot2.\"\ntitle-block-banner: true\nimage: \"/static/ggplot2_lollipop.png\"\nimage-alt: \"/static/ggplot2_lollipop.png\"\nexecute: \n  message: false\n  warning: false\nformat:\n  html:\n    code-fold: false\n    code-tools: true\nfreeze: true\ndraft: true\n---\n\n\n\n\n# Lollipop charts\n\nOs gráficos de lollipop (*pirulito*) consistem de barras (colunas) com círculos no topo, que representam os valores das observações. Visualmente, elas lembram pirulitos. Eles são utilizados tanto para substituir gráficos de coluna convencionais, como para destacar e comparar valores entre diferentes categorias ou momentos no tempo.\n\n\n::: {.cell layout-align=\"center\" fig-caption='Exemplo de lollipop charts'}\n::: {.cell-output-display}\n![](8-lollipop_files/figure-html/unnamed-chunk-1-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n# R\n\nAntes de inicar é preciso carregar alguns pacotes. O código abaixo lista os pacotes necessários para acompanhar este post\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Instala os pacotes (se necessário)\ninstall.packages(c(\"ggplot2\", \"tidyr\", \"dplyr\", \"forcats\", \"gapminder\"))\n\n# Carrega os pacotes necessários\nlibrary(\"ggplot2\")\nlibrary(\"tidyr\")\nlibrary(\"dplyr\")\nlibrary(\"forcats\")\nlibrary(\"gapminder\")\n```\n:::\n\n\nEste é o primeiro post da parte intermediária da série de *Fundamentos de ggplot2*. Para uma introdução aos gráficos de coluna veja o [post introdutório](https://restateinsight.com/posts/ggplot2-tutorial/0-introduction). Além disso, alguma manipulação de dados será necessária para remodelar os dados. Não é necessário ter conhecimento sobre estas funções adicionais, mas caso queira aprender mais sobre manipulação/limpeza de dados veja o post [Manipular para enxergar]().\n\n## Exemplo\n\nPrimeiro vamos montar uma base de dados simulada. Vamos usar a função `tibble` para montar uma base de dados usando o código abaixo.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Monta uma base de dados usando o tibble\ndados <- tibble(\n  categoria = factor(c(\"A\", \"B\", \"C\", \"D\", \"E\")),\n  vendas_2020 = c(40, 10, 15, 30, 20),\n  vendas_2021 = c(55, 50, 30, 35, 30)\n)\n```\n:::\n\n\nA função `factor` no código acima indica que a variável `categoria` deve ser tratada como uma variável categórica. Temos 5 grupos distintos (A, B, C, D e E) na coluna `categoria`. As colunas `vendas_2020` e `vendas_2021` representam o total de vendas nos anos de 2020 e 2021, respectivamente. A base de dados tem a seguinte forma.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-condensed table-hover\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:center;\"> categoria </th>\n   <th style=\"text-align:center;\"> vendas_2020 </th>\n   <th style=\"text-align:center;\"> vendas_2021 </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:center;\"> A </td>\n   <td style=\"text-align:center;\"> 40 </td>\n   <td style=\"text-align:center;\"> 55 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> B </td>\n   <td style=\"text-align:center;\"> 10 </td>\n   <td style=\"text-align:center;\"> 50 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> C </td>\n   <td style=\"text-align:center;\"> 15 </td>\n   <td style=\"text-align:center;\"> 30 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> D </td>\n   <td style=\"text-align:center;\"> 30 </td>\n   <td style=\"text-align:center;\"> 35 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> E </td>\n   <td style=\"text-align:center;\"> 20 </td>\n   <td style=\"text-align:center;\"> 30 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nNão existe uma função `geom_lollipop`. Para montar um lollipop vamos combinar dois *geoms*: o `geom_segment` com o `geom_point`. A função `geom_segment()` desenha segmentos de linha e exige quatro argumentos: `x`, `xend`, `y` e `yend`, que especificam onde a linha começa e onde ela termina. Já a função `geom_point()` exige apenas os argumentos `x` e `y` que especificam a posição dos pontos.\n\nO código abaixo cria um gráfico de lollipop com a base de dados criada anteriormente.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Monta o gráifco\nggplot(data = dados) +\n  # Desenha o a linha reta\n  geom_segment(aes(x = categoria, xend = categoria, y = 0, yend = vendas_2020)) +\n  # Desenha os pontos\n  geom_point(aes(x = categoria, y = vendas_2020), size = 3)\n```\n:::\n\n\nVamos destrinchar o código acima em partes.\n\nPrimeiro fazemos a chamada do `ggplot` para começar o gráfico. Incluímos o argumento `data = dados` pois ambas as figuras vão utilizar a mesma base de dados.\n\nPor força de ser didático, deixamos todos os argumentos explícitos. Assim, a função `geom_segment` que desenha o segmento de reta precisa de 4 argumentos `x`, `xend`, `y` e `yend`. Como queremos uma linha reta na vertical, deixamos o valor de `x` igual ao de `xend`.\n\nO valor `y = 0` especifica que a linha deve iniciar no zero (no eixo-y) e `yend = vendas_2020` indica que a linha deve se estender até o valor de `vendas_2020`.\n\nA função `geom_point` precisa apenas dos argumentos `x` e `y` que definem as coordenadas de cada ponto. Assim `x = categoria` indica a coordenada horizontal e `y = vendas_2020` indica a coordenada vertical. O argumento `size = 3` aumenta o tamanho do círculo (opcional, mas recomendado).\n\nO gráfico fica da seguinte forma:\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](8-lollipop_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nVale notar que os argumentos `x` e `y` são compartilhados entre tanto o `geom_segment` como o `geom_point` de tal forma que poderíamos simplificar o código, fazendo uma pequena adaptação nos argumentos `y` e `yend` da seguinte maneira:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Código mais sucinto\nggplot(data = dados, aes(x = categoria, xend = categoria, y = vendas_2020, yend = 0)) +\n  geom_segment() +\n  geom_point(size = 3)\n```\n\n::: {.cell-output-display}\n![](8-lollipop_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nAté aqui, o gráfico de lollipop parece muito similar a um gráfico de colunas, com as desvantagens de ser mais complexo e de exigir mais linhas de código. O exemplo abaixo deixa isto evidente.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Código para gerar o lollipop chart\nggplot(data = dados, aes(x = categoria, xend = categoria, y = vendas_2020, yend = 0)) +\n  geom_segment() +\n  geom_point(size = 3)\n\n# Código para gerar um gráfico de colunas equivalente\nggplot(data = dados, aes(x = categoria, y = vendas_2020)) +\n  geom_col()\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](8-lollipop_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nDe fato, o gráfico de lollipop pode ser utilizado para mostrar valores, mas uma das suas principais vantanges está em *poder comparar valores entre grupos*. No nosso caso, temos os valores das vendas de 2020 e 2021 de cinco grupos distinos (A, B, C, D, e E). Podemos montar um gráfico que enfatiza a evolução das vendas em cada um dos grupos.\n\nPode-se adaptar o gráfico para ressaltar a diferença nas vendas entre os anos. Agora fica evidente, por exemplo, que as vendas aumentaram em todos os grupos entre 2020 e 2021. Além disso, o grupo B teve o maior crescimento no volume das vendas.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = dados, aes(x = categoria)) +\n  # Segmento de reta que liga os pontos\n  geom_segment(aes(xend = categoria, y = vendas_2020, yend = vendas_2021)) +\n  # Ponto (verde) que representa as vendas de 2020\n  geom_point(aes(y = vendas_2020), color = \"#2A9D8F\", size = 3) +\n  # Ponto (amarelo) que representa as vendas de 2021\n  geom_point(aes(y = vendas_2021), color = \"#E9C46A\", size = 3) \n```\n\n::: {.cell-output-display}\n![](8-lollipop_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Refinando o gráfico\n\nO gráfico acima é bom, mas podemos melhorá-lo modificando alguns parâmetros estéticos. Vamos fazer estas melhorias em três etapas:\n\n1.  **Alterar a cor do segmento de linha**\n2.  **Ajustar os eixos**\n3.  **Virar o gráfico e alterar a cor do fundo**\n\n### Alterar a cor do segmento de linha\n\nPrimeiro vamos mudar a cor do segmento de reta com o argumento `color` dentro de `geom_segment()`. Vamos escolher um tom mais escuro de cinza.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = dados, aes(x = categoria)) +\n  geom_segment(\n    aes(xend = categoria, y = vendas_2020, yend = vendas_2021),\n    # Ajuste a cor da linha\n    color = \"gray30\") +\n  geom_point(aes(y = vendas_2020), color = \"#2A9D8F\", size = 3) +\n  geom_point(aes(y = vendas_2021), color = \"#E9C46A\", size = 3) \n```\n\n::: {.cell-output-display}\n![](8-lollipop_files/figure-html/unnamed-chunk-11-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n### Ajustar os eixos\n\nDepois, vamos ajustar o eixo-y, usando `scale_y_continuous()`, para iniciar no zero modificando o argumento `limits`. Este argumento aceita dois valores: o primeiro valor define o limite inferior e o segundo valor define o limite superior. Para deixar qualquer um dos limites \"livre\" basta defini-lo como `NA`. Assim `limits = c(0, NA)` força o eixo a começar no zero e deixa o limite superior \"livre\" (i.e. definido automaticamente).\n\nJá o argumento `breaks` define quais os números que devem ser destacados no texto do eixo. Definimos este valor usando `breaks = seq(0, 50, 10)` que cria uma sequência de 0 a 50, de 10 em 10.\n\nO eixo-y foi automaticamente nomeado como \"vendas_2020\" o que pode causar certa confusão. Além disso o título do eixo-x, \"categoria\" é um pouco redundante. Modificamos estes nomes utilizando a função `labs()`. Definimos `y = \"Vendas (unidades)\"` e `x = NULL` para omitir o título no eixo-x.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = dados, aes(x = categoria)) +\n  geom_segment(\n    aes(xend = categoria, y = vendas_2020, yend = vendas_2021),\n    color = \"gray30\") +\n  geom_point(aes(y = vendas_2020), color = \"#2A9D8F\", size = 3) +\n  geom_point(aes(y = vendas_2021), color = \"#E9C46A\", size = 3) +\n  # Ajusta o eixo-y\n  scale_y_continuous(\n    # Quebras de linha\n    breaks = seq(0, 50, 10),\n    # Limites do eixo (NA = livre): força o gráfico a começar no 0\n    limits = c(0, NA)) +\n  # Altera nome/título dos eixos\n  labs(\n    x = NULL,\n    y = \"Vendas (unidades)\")\n```\n\n::: {.cell-output-display}\n![](8-lollipop_files/figure-html/unnamed-chunk-12-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n### Virar o gráfico e alterar a cor do fundo\n\nPor fim, vamos virar o gráfico de lado usando a função `coord_flip()` e, em seguida, definir um tema simples com fundo branco usando `theme_white()`. Para mais opções de temas consulte, por exemplo, o pacote `ggthemes` ou veja o [post da série](https://restateinsight.com/posts/ggplot2-tutorial/7-themes-fonts).\n\nO código abaixo reúne todas estas melhorias.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = dados, aes(x = categoria)) +\n  # Segmento de reta que liga os pontos\n  geom_segment(\n    aes(xend = categoria, y = vendas_2020, yend = vendas_2021),\n    # Ajuste a cor da linha\n    color = \"gray30\") +\n  # Ponto (verde) que representa as vendas de 2020\n  geom_point(aes(y = vendas_2020), color = \"#2A9D8F\", size = 3) +\n  # Ponto (amarelo) que representa as vendas de 2021\n  geom_point(aes(y = vendas_2021), color = \"#E9C46A\", size = 3) +\n  # Ajusta o eixo-y\n  scale_y_continuous(\n    # Quebras de linha\n    breaks = seq(0, 50, 10),\n    # Limites do eixo (NA = livre): força o gráfico a começar no 0\n    limits = c(0, NA)) +\n  # Altera nome/título dos eixos\n  labs(\n    x = NULL,\n    y = \"Vendas (unidades)\") +\n  # Inverte o gráfico (vira ele de lado)\n  coord_flip() +\n  # Tema minimalista com fundo branco\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](8-lollipop_files/figure-html/unnamed-chunk-13-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nQuem já tem certo domínio do `ggplot2` deve ter percebido que falta uma legenda no gráfico acima. De fato, da maneira como nossos dados estão estruturados, não é possível ter uma legenda de cores que explique que os círculos verdes são referentes às vendas de 2020, enquanto os círculos amarelos são referentes às vendas de 2021.\n\nGerar esta legenda não é tão simples e exigiria, provavelmente, dois `tibble`: um para representar os pontos e outro para representar a reta que liga os pontos. No código abaixo conseguimos fazer isto numa simples linha de código utilizando a função `tidyr::pivot_longer`.\n\nNote que agora a chamada inicial do `ggplot` está vazia e especificamos o argumento `data` dentro de cada função `geom_*`. O controle da legenda de cores é feito pela função `scale_color_manual()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Converte a base para o formato longitudinal\ntbl_pontos <- tidyr::pivot_longer(dados, vendas_2020:vendas_2021)\n\nggplot() +\n  # Define o segmento de reta que liga os pontos\n  geom_segment(\n    data = dados,\n    aes(x = categoria, xend = categoria, y = vendas_2020, yend = vendas_2021)\n  ) +\n  # Desenha os pontos \n  geom_point(\n    data = tbl_pontos,\n    aes(x = categoria, y = value, color = name),\n    size = 3\n  ) +\n  # Controla as cores e a legenda\n  scale_color_manual(\n    # Título da legenda\n    name = \"Vendas no Ano\",\n    # Cores dos pontos\n    values = c(\"#2A9D8F\", \"#E9C46A\"),\n    # Texto da legenda\n    labels = c(\"2020\", \"2021\")\n  ) +\n  # Ajusta o texto do eixo-y\n  scale_y_continuous(\n    breaks = seq(0, 50, 10),\n    limits = c(0, NA)) +\n  # Altera nome/título dos eixos\n  labs(\n    x = NULL,\n    y = \"Vendas (unidades)\") +\n  # Inverte o gráfico (vira ele de lado)\n  coord_flip() +\n  # Tema minimalista com fundo branco\n  theme_light() +\n  # Coloca a legenda na parte inferior do gráfico\n  theme(\n    legend.position = \"bottom\"\n  )\n```\n\n::: {.cell-output-display}\n![](8-lollipop_files/figure-html/unnamed-chunk-14-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Formato dos dados\n\nHá uma maneira de contornar a necessidade de ter duas bases de dados distintas (uma em formato *wide* e outra em formato *long*), substituindo a função `geom_segment()` pela função `geom_line()`[^1]. A função `geom_line()` é tipicamente utilizada para desenhar gráficos de séries de tempo, mas também pode ser utilizada para desenhar simples linhas retas.\n\n[^1]: Evidentemente, as funções `geom_path` e `geom_step` também funcionariam no lugar de `geom_line`.\n\nO código abaixo exemplifica como isto pode ser feito. Note o uso do argumento `group = categoria` dentro da função `geom_line()`.\n\nApesar de mais simples nestre caso, a função `geom_line()` é menos versátil para montar gráficos de lollipop. Não é possível replicar o primeiro gráfico que fizemos, com comportamento similar a um gráfico de colunas, usando esta função, por exemplo.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(tbl_pontos, aes(x = categoria, y = value)) +\n  geom_line(aes(group = categoria), color = \"gray30\") +\n  geom_point(aes(color = name), size = 3) +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](8-lollipop_files/figure-html/unnamed-chunk-15-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Alterando a ordem dos elementos\n\nPor fim, um último ponto importante é a ordem da variável categórica. No primeiro gráfico que fizemos a variável categórica foi exposta da esquerda para a direita, como seria mais natural para leitores ocidentais. Contudo, quando usamos a função `coord_flip()` para virar o gráfico, a variável categórica agora vai de baixo para cima o que acaba sendo confuso.\n\nO exemplo abaixo ilustra o problema: no gráfico da direita a ordem do eixo-y começa no E e termina no A.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Gráfico na horizontal com a variável categórica da esquerda para a direita\nggplot(\n  data = dados,\n  aes(x = categoria, xend = categoria, y = vendas_2020, yend = 0)\n  ) +\n  geom_segment() +\n  geom_point(size = 3)\n\n# Gráfico na vertical com a variável categórica de baixo para cima\nggplot(\n  data = dados,\n  aes(x = categoria, xend = categoria, y = vendas_2020, yend = 0)\n  ) +\n  geom_segment() +\n  geom_point(size = 3) +\n  coord_flip()\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](8-lollipop_files/figure-html/unnamed-chunk-17-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nA maneira mais segura e consistente de remediar isto é alterar a base de dados. Especificamente, deve-se interveter a ordem da variável categórica. Há muitas maneiras de fazer isso usando as funções `factor()` e `rev()`. Felizmente, o pacote `forcats` também tem uma função feita justamente para inverter a ordem de uma variável factor. O código abaixo utiliza justamente a função `forcats::fct_rev()`. Note que agora a ordem da variável `categoria` está de cima para baixo, de A até E.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndados <- mutate(dados, categoria = forcats::fct_rev(categoria))\n\n# Agora a variável categórica está ordenada de cima para baixo\nggplot(\n  data = dados,\n  aes(x = categoria, xend = categoria, y = vendas_2020, yend = 0)\n  ) +\n  geom_segment() +\n  geom_point(size = 3) +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](8-lollipop_files/figure-html/unnamed-chunk-18-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nPode-se também fazer a ordem dos elementos categóricos seguir a variável numérica que se quer representar. Neste caso, usa-se a função `forcats::fct_reorder`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndados <- mutate(\n  dados,\n  categoria = forcats::fct_reorder(categoria, vendas_2020)\n  )\n\n# Agora a variável categórica está ordenada segundo vendas_2020\nggplot(\n  data = dados,\n  aes(x = categoria, xend = categoria, y = vendas_2020, yend = 0)\n  ) +\n  geom_segment() +\n  geom_point(size = 3) +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](8-lollipop_files/figure-html/unnamed-chunk-19-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n# Expectativa de vida\n\nAgora vamos fazer um exemplo aplicado usando dados da base `gapminder`. A [Gapminder](https://www.gapminder.org) é uma fundação de pesquisa independente que compila dados sobre importantes fatos globais. Caso não tenha carregado ainda, use o código abaixo para carregar o pacote necessário.\n\nA tabela que vamos utilizar compila dados de expectativa de vida (`lifeExp`), população (`pop`) e de PIB per capita (`gdpPercap`) ao longo do período 1952-2007 para quase todos os países do mundo. Os dados estão armazenados no `tibble` chamado `gapminder`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata(\"gapminder\")\ngapminder\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-condensed table-hover\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:center;\"> country </th>\n   <th style=\"text-align:center;\"> continent </th>\n   <th style=\"text-align:center;\"> year </th>\n   <th style=\"text-align:center;\"> lifeExp </th>\n   <th style=\"text-align:center;\"> pop </th>\n   <th style=\"text-align:center;\"> gdpPercap </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:center;\"> Afghanistan </td>\n   <td style=\"text-align:center;\"> Asia </td>\n   <td style=\"text-align:center;\"> 1952 </td>\n   <td style=\"text-align:center;\"> 29 </td>\n   <td style=\"text-align:center;\"> 8425333 </td>\n   <td style=\"text-align:center;\"> 779 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Afghanistan </td>\n   <td style=\"text-align:center;\"> Asia </td>\n   <td style=\"text-align:center;\"> 1957 </td>\n   <td style=\"text-align:center;\"> 30 </td>\n   <td style=\"text-align:center;\"> 9240934 </td>\n   <td style=\"text-align:center;\"> 821 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Afghanistan </td>\n   <td style=\"text-align:center;\"> Asia </td>\n   <td style=\"text-align:center;\"> 1962 </td>\n   <td style=\"text-align:center;\"> 32 </td>\n   <td style=\"text-align:center;\"> 10267083 </td>\n   <td style=\"text-align:center;\"> 853 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Afghanistan </td>\n   <td style=\"text-align:center;\"> Asia </td>\n   <td style=\"text-align:center;\"> 1967 </td>\n   <td style=\"text-align:center;\"> 34 </td>\n   <td style=\"text-align:center;\"> 11537966 </td>\n   <td style=\"text-align:center;\"> 836 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Afghanistan </td>\n   <td style=\"text-align:center;\"> Asia </td>\n   <td style=\"text-align:center;\"> 1972 </td>\n   <td style=\"text-align:center;\"> 36 </td>\n   <td style=\"text-align:center;\"> 13079460 </td>\n   <td style=\"text-align:center;\"> 740 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Afghanistan </td>\n   <td style=\"text-align:center;\"> Asia </td>\n   <td style=\"text-align:center;\"> 1977 </td>\n   <td style=\"text-align:center;\"> 38 </td>\n   <td style=\"text-align:center;\"> 14880372 </td>\n   <td style=\"text-align:center;\"> 786 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n## Expectativa de vida nas Américas\n\nVamos montar um gráfico de lollipop que mostra a evolução da expectativa de vida nos países americanos no maior horizonte de tempo possível. Primeiro, temos de preparar os dados para nossa visualização.\n\nComo os dados já estão no formato longitudinal, vamos utilizar esta base para plotar os pontos do gráfico. O código abaixo usa a função `filter` para encontrar apenas as linhas referentes a países do continente americano (inclui América do Sul, Central e do Norte) no primeiro e o último ano disponível.\n\nDepois, o código inverte a ordem alfabética dos países usando `forcats::fct_rev()` dentro da função `mutate`. Isto é útil pois quando a função `coord_flip()` \"vira\" o gráfico, a ordem da variável categórica acaba ficando invertida (como nos gráficos que fizemos acima).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\namericas <- gapminder |> \n  filter(\n    continent == \"Americas\",\n    year == min(year) | year == max(year)) |> \n  mutate(country = forcats::fct_rev(country))\n```\n:::\n\n\nPara converter os dados no formato necessário da função `geom_segment` usamos a função `pivot_wider()`. Os argumentos podem parecer confusos à primeira vista. Essencialmente, estamos indicando que cada linha deve ser um país, que as colunas devem representar os valores dos anos (1952 e 2007) e que os valores destas colunas estão em `lifeExp`. Vale consultar `?pivot_wider`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\namericas_wide <- tidyr::pivot_wider(\n  americas,\n  # Cada linha é um país\n  id_cols = \"country\",\n  # As novas colunas devem representar os anos de 1952 e 2007\n  names_from = \"year\",\n  # Os valores destas novas colunas estão na coluna lifeExp\n  values_from = \"lifeExp\",\n  # Concatena o stringr 'life_exp_' no nome das novas colunas\n  names_prefix = \"life_exp_\"\n  )\n```\n:::\n\n\nO código completo para o gráfico segue abaixo.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot() +\n  geom_segment(\n    data = americas_wide,\n    aes(x = country, xend = country, y = life_exp_1952, yend = life_exp_2007),\n    color = \"gray30\") +\n  geom_point(\n    data = americas,\n    aes(x = country, y = lifeExp, color = as.factor(year)),\n    size = 2) +\n  scale_color_brewer(name = \"Ano\", type = \"qual\", palette = 6) +\n  labs(\n    title = \"Aumento da Expectativa de Vida\",\n    subtitle = \"Expectativa de vida ao nascer em 1952 e em 2007 nos países americanos.\",\n    caption = \"Fonte: Gapminder.\",\n    x = NULL,\n    y = \"Expectativa de vida (Anos)\") +\n  coord_flip() +\n  theme_light() +\n  theme(\n    legend.position = \"top\",\n    panel.grid.minor = element_blank()\n    )\n```\n\n::: {.cell-output-display}\n![](8-lollipop_files/figure-html/unnamed-chunk-24-1.png){fig-align='center' width=100% height=550px}\n:::\n:::\n\n\n## Expectativa de vida em relação à média\n\nPode-se também montar um gráfico que compara a expectativa de vida nos países em relação à média mundial. O código abaixo pega as observações do ano mais recente e calcula o desvio em relação à média de cada país. Para tornar a visualização mais limpa, seleciona-se um subconjunto de 20 países\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngap07 <- gapminder |> \n  filter(year == max(year)) |> \n  mutate(\n    diff = lifeExp - mean(lifeExp),\n    country = fct_reorder(country, diff)\n    )\n\ncountry_sel <- c(\n  \"Swaziland\", \"Rwanda\", \"Botswana\", \"Kenya\", \"Haiti\",\n  \"India\", \"Brazil\", \"Turkey\", \"Mexico\", \"United States\",\n  \"Austria\", \"France\", \"Japan\", \"Taiwan\", \"Argentina\",\n  \"Sri Lanka\", \"Egypt\", \"Iraq\", \"Nigeria\", \"Afghanistan\"\n  )\n\nsub07 <- filter(gap07, country %in% country_sel)\n```\n:::\n\n\nNo gráfico abaixo, além de incluir uma linha vertical para sinalizar a média mundial com `geom_hline`, também coloco uma pequena nota de texto para destacar que a expectativa de vida média mundial era de 67 anos[^2].\n\n[^2]: Para mais sobre como usar `geom_text` e outras maneiras de usar elementos textuais no gráfico consulte [Estético: Destancado informação](https://restateinsight.com/posts/ggplot2-tutorial/5-grafico-text).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\ndftext <- tibble(\n  x = \"Kenya\",\n  y = 8,\n  label = \"67 anos de vida\\né expectativa de\\nvida média do mundo.\"\n  )\n\nggplot(data = sub07) +\n  geom_segment(\n    aes(x = country, xend = country, y = diff, yend = 0),\n    color = \"gray30\"\n  ) +\n  geom_point(\n    aes(x = country, y = diff, color = continent),\n    size = 3\n  ) +\n  geom_hline(yintercept = 0) +\n  geom_text(\n    data = dftext,\n    aes(x = x, y = y, label = label),\n    size = 3\n  ) +\n  scale_y_continuous(limits = c(-28, 28)) +\n  scale_color_manual(\n    name = \"Continente\",\n    values = c(\"#7F3B08\", \"#A50026\", \"#984ea3\", \"#4daf4a\")\n    ) +\n  labs(\n    title = \"Expectativa de Vida\",\n    subtitle = \"Expectativa de vida em 2007 nos países selecionados em relação à média mundial.\",\n    caption = \"Fonte: Gapminder.\",\n    x = NULL,\n    y = \"Expectativa de vida (Dif. em rel. a média)\") +\n  coord_flip() +\n  theme_light() +\n  theme(\n    legend.position = \"top\",\n    panel.grid.minor = element_blank(),\n    panel.grid.major.y = element_blank()\n    )\n```\n\n::: {.cell-output-display}\n![](8-lollipop_files/figure-html/unnamed-chunk-26-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## Expectativa de vida por continente\n\nPor fim, podemos montar um lollipop similar a um gráfico de colunas. Para torná-lo mais interessante, vamos fazer um lollipop, onde o valor numérico é plotado no meio círculo.\n\nO código abaixo calcula a média ponderada da expectativa de vida por continente. Além disso, ordena-se o nome dos continentes e cria-se uma variável chamada `label`, que arredonda o resultado do cálculo. Este valor será plotado no meio do círculo.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntab_continent <- gap07 |> \n  group_by(continent) |> \n  summarise(avg = weighted.mean(lifeExp, pop)) |> \n  mutate(\n    continent = fct_reorder(continent, avg),\n    label = format(round(avg, 1), decimal.mark = \",\")\n    )\n```\n:::\n\n\nO gráfico combina `geom_point`, `geom_segment` e `geom_text`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(tab_continent, aes(x = continent, y = avg, color = continent)) +\n  geom_point(size = 15) +\n  geom_segment(aes(xend = continent, yend = 0), linewidth = 2) +\n  geom_text(aes(label = label), color = \"white\", fontface = \"bold\") +\n  guides(color = \"none\")\n```\n\n::: {.cell-output-display}\n![](8-lollipop_files/figure-html/unnamed-chunk-28-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nA versão finalizada do gráfico remove elementos temáticos desnecessários para deixar o gráfico mais minimalista. Além disso, uso o `coord_flip` não apenas para virar o gráfico, mas também para dar um \"zoom-in\". Note que o gráfico claramente não começa no zero, o que ajuda a enfatizar a diferença entre os grupos. Apesar de ser um conselho comum que se deve sempre iniciar o eixo-y no zero, há casos em que isto não faz muito sentido.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(tab_continent, aes(x = continent, y = avg, color = continent)) +\n  geom_point(size = 15) +\n  geom_segment(aes(xend = continent, yend = 0), linewidth = 2) +\n  geom_text(aes(label = label), color = \"white\", fontface = \"bold\") +\n  coord_flip(ylim = c(50, NA), expand = TRUE) +\n  scale_color_brewer(type = \"qual\", palette = 2) +\n  guides(color = \"none\") +\n  labs(\n    x = NULL,\n    y = NULL,\n    title = \"Expectativa de vida média por continente\",\n    subtitle = \"Média ponderada da expectativa de vida por continente (2007).\",\n    caption = \"Fonte: Gapminder\"\n    ) +\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    axis.text.x = element_blank(),\n    axis.text.y = element_text(\n      color = \"#000000\",\n      size = 12,\n      hjust = 0.5,\n      vjust = 0.5\n      )\n  )\n```\n\n::: {.cell-output-display}\n![](8-lollipop_files/figure-html/unnamed-chunk-29-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n# Imóveis\n\nPara os próximos exemplos vamos voltar novamente à base `txhousing` para visualizar a queda na venda de imóveis após a grande crise imobiliária no mercado dos EUA.\n\n## Antes e depois da Crise\n\nPara esta visualização, primeiro, vamos selecionar um subconjunto de cidades a ser comparadas em 2006 e 2010. O código abaixo agrega as vendas mensais, ano a ano, em oito cidades do Texas em 2006 e 2010.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsel_cities <- c(\n  \"Houston\", \"Dallas\", \"Denton County\", \"Austin\",\"San Antonio\",\n  \"Collin County\", \"Fort Worth\", \"Fort Bend\"\n  )\n\n#> Seleciona um subconjunto de cidades e soma as vendas a cada ano\nsub <- txhousing |>\n  filter(city %in% sel_cities, year %in% c(2006, 2010)) |> \n  group_by(city, year) |> \n  summarise(year_sales = sum(sales))\n```\n:::\n\n\nPara definir a ordem das cidades no gráfico ordeno as cidades por número de vendas, em 2006, em ordem ascendente (da menor para a maior).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Pega o nome das cidades ordenadas por vendas em 2006\nlvls <- sub |> \n  filter(year == 2006) |> \n  arrange(year_sales) |> \n  pull(city)\n\nsub <- mutate(sub, city = factor(city, levels = lvls))\n```\n:::\n\n\nO gráfico abaixo mostra a queda na venda de imóveis nestas cidades entre os anos de 2006 a 2010. No caso de Houston, a queda foi de mais de 20 mil unidades. Note que a diferença no porte das cidades acaba dificultando a comparação da queda nas vendas nas regiões menores como Fort Bend e Denton County.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(sub, aes(x = city, y = year_sales)) +\n  geom_line(aes(group = city), color = \"gray30\") +\n  geom_point(aes(color = as.factor(year)), size = 3) +\n  scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 8)) +\n  scale_y_continuous(\n    breaks = seq(0, 80000, 10000),\n    labels = scales::label_number(big.mark = \".\"),\n    limits = c(0, NA)\n    ) +\n  scale_color_manual(\n    name = \"Ano\",\n    values = c(\"#2A9D8F\", \"#E9C46A\"),\n    labels = c(\"2006\", \"2010\")\n  ) +\n  coord_flip() +\n  labs(\n    title = \"Queda na venda de imóveis nos principais mercados\", \n    x = NULL,\n    y = \"Vendas\") +\n  theme_light() +\n  theme(\n    legend.position = \"bottom\",\n    axis.text.y = element_text(hjust = 0.5),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor = element_blank()\n    )\n```\n\n::: {.cell-output-display}\n![](8-lollipop_files/figure-html/unnamed-chunk-32-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n## Histórico de vendas nas cidades pequenas\n\nGráficos de lollipop também podem ser utilizados para mostrar a variância num conjunto de dados entre diferentes grupos. Podemos, por exemplo, mostrar o número mínimo, máximo e médio de vendas nas cidades ao longo do período da amostra (2000 a 2015).\n\nO código abaixo encontra os valores de venda máximo, mínimo e médio em cada uma das cidades. Além disso, também encontro em qual ano que os valores máximo e mínimo ocorreram. Note que se exclui o ano de 2015, pois as observações neste ano não estão completas.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntab_summary_sales <- txhousing |> \n  #> Remove 2015\n  filter(year < 2015) |> \n  #> Total de vendas anuais por cidade\n  group_by(city, year) |> \n  summarise(total = sum(sales)) |> \n  #> Máximos, mínimos e média por cidade\n  group_by(city) |> \n  summarise(\n    sales_max = max(total),\n    sales_min = min(total),\n    sales_avg = mean(total),\n    year_max = year[which.max(total)],\n    year_min = year[which.min(total)]\n    )\n```\n:::\n\n\nPara melhorar a visualização, escolho somente as cidades pequenas, que registraram número médio de vendas entre 1000 e 5000 unidades.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#> Converte os dados para long e remove valores ausentes\ntab_sales <- tab_summary_sales |> \n  pivot_longer(-city, names_to = \"stat\") |> \n  filter(!is.na(value))\n\n#> Pega o nome das cidades com número médio de vendas entre 1000 e 5000\n#> ordenadas pelo número de vendas\nsmall_cities <- tab_sales |> \n  filter(stat == \"sales_avg\", value > 1000, value < 5000) |> \n  arrange(value) |> \n  pull(city) |> \n  unique()\n\n#> Filtra a tabela para conter apenas cidades pequenas\ntab_small_sales <- tab_sales |> \n  filter(city %in% small_cities) |> \n  mutate(city = factor(city, levels = small_cities))\n```\n:::\n\n\nSeparo os valores com os números de vendas num `tibble` e os valores com os anos num outro `tibble`. O primeiro conjunto de dados será utilizado para plotar os pontos e a linha (o lollipop), enquanto o segundo será utilizado para plotar os labels de texto (com os números).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#> Número de vendas (pontos e linha)\nsub_sales <- tab_small_sales |> \n  filter(stringr::str_detect(stat, \"sales\")) |> \n  mutate(stat = factor(stat, levels = c(\"sales_min\", \"sales_avg\", \"sales_max\")))\n\n#> Anos recordes (texto)\nsub_years <- tab_small_sales |> \n  filter(stringr::str_detect(stat, \"max|min\")) |> \n  pivot_wider(\n    id_cols = \"city\",\n    names_from = \"stat\",\n    names_sep = \"_\",\n    values_from = \"value\"\n  )\n```\n:::\n\n\nO resultado final é bastante interessante. Em muitas cidades, o menor valor de vendas foi registrado em 2000 e o maior, em 2013 ou 2014. Nestes casos, como em Irving e San Angelo, parece que houve uma tendência geral de crescimento nas vendas.\n\nJá em Amarillo e Killeen-Fort Hood o pico de vendas ocorreu antes da Crise em 2005/2006, indicando que estas regiões não voltaram a registrar vendas no mesmo patamar ao pré-crise. No caso da segunda região, o número médio histórico de vendas está bem abaixo do pico, cerca de 50%.\n\nWichita Falls e Corpus Christi também apresentam pico em 2006, mas seus piores anos foram em 2011, sugerindo que o período pós-crise foi particularmente severo nestas regiões.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(sub_sales, aes(x = city, y = value)) +\n  geom_line(aes(group = city)) +\n  geom_point(aes(color = stat), size = 3) +\n  geom_text(\n    data = sub_years,\n    aes(x = city, y = sales_min - 200, label = year_min),\n    size = 3\n  ) +\n  geom_text(\n    data = sub_years,\n    aes(x = city, y = sales_max + 200, label = year_max),\n    size = 3\n  ) +\n  scale_x_discrete(labels = function(x) stringr::str_wrap(x, width = 8)) +\n  scale_y_continuous(\n    breaks = seq(0, 5500, 500),\n    labels = scales::label_number(big.mark = \".\"),\n    limits = c(0, NA)\n    ) +\n  scale_color_manual(\n    name = \"\",\n    values = c(\"#e9c46a\", \"#f4a261\", \"#e76f51\"),\n    labels = c(\"Mínimo\", \"Média\", \"Máximo\")\n  ) +\n  labs(\n    x = NULL,\n    y = \"Vendas\",\n    title = \"Variação de vendas (2000-2014)\",\n    subtitle = \"Número mínimo, máximo e médio de vendas anuais. Números indicam quais foram os anos de recordes.\"\n  ) +\n  coord_flip() +\n  theme_light() +\n  theme(\n    legend.position = \"bottom\",\n    axis.text.y = element_text(hjust = 0.5),\n    panel.grid.major.y = element_blank(),\n    panel.grid.minor = element_blank()\n    )\n```\n\n::: {.cell-output-display}\n![](8-lollipop_files/figure-html/unnamed-chunk-36-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n# Resumindo\n\nOs gráficos de lollipop são uma forma atraente de comparar valores ou proporções entre diferentes categorias. Eles consistem em um gráfico de barras horizontais com pontos representando os valores plotados no topo, que lembram pirulitos. Há várias maneiras de montar estes gráficos usando `ggplot2` mas a mais completa é combinando o `geom_segment` com o `geom_point`.\n\nAbaixo resumimos alguns dos pontos positivos destes gráficos.\n\nPontos positivos:\n\n-   *Visualmente atraente*: os gráficos de lollipop são uma forma elegante de exibir seus dados em relatórios e apresentações.\n-   *Comparação de valores entre grupos*: permitem facilmente comparar, visualmente, a diferença entre grupos e dentro de um mesmo grupo.\n-   *Ocupam pouco espaço*: são visualmente compactos e transmitem um grande quantidade de informação.\n\nEm resumo, os gráficos de lollipop são uma opção atraente e eficiente para comparar valores ou proporções entre categorias, mas podem não ser a melhor opção para comparar dados categóricos ou com muitas categorias.\n\n## Outros posts citados\n\n-   [Fundamentos: gráfico de coluna](https://restateinsight.com/posts/ggplot2-tutorial/2-grafico-coluna)\n-   [Fundamentos: gráfico de linha](https://restateinsight.com/posts/ggplot2-tutorial/4-grafico-de-linha)\n-   [Fundamentos: gráfico de dispersão](https://restateinsight.com/posts/ggplot2-tutorial/1-grafico-dispersao)\n-   [Estético: Destacando informação](https://restateinsight.com/posts/ggplot2-tutorial/5-grafico-text)\n-   [Estético: Tipografia e temas](https://restateinsight.com/posts/ggplot2-tutorial/7-themes-fonts)\n",
    "supporting": [
      "8-lollipop_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}