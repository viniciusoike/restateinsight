{
  "hash": "1942162efd73d52160d41b96d69c9ee2",
  "result": {
    "markdown": "---\ntitle: \"Apêndice: manipular para enxergar\"\ndate: '2023-01-04'\ncategories: ['data-visualization', 'ggplot2', 'tutorial-R']\ntitle-block-banner: true\npage-layout: article\nexecute: \n  message: false\n  warning: false\nformat:\n  html:\n    code-fold: false\n    code-tools: true\n    fig-align: center\n    fig-asp: 0.618\ndraft: true\nfreeze: true\n---\n\n\n\n\nO primeiro passo para montar uma visualização é ter os dados no formato certo. Em geral, isto envolve três etapas: (1) importar os dados no `R`; (2) limpar os dados; e (3) transformar os dados no formato apropriado. Neste tutorial vamos focar sobretudo na última etapa.\n\nApesar de funcionar como um repositório de pacotes, o `R` já vem com diversas funções \"de fábrica\" que permitem a importação e manipulação de dados. Estas funções que já vem carregadas no `R` são chamadas de funções \"base\". Alguns pacotes foram criados para melhorar estas funções \"base\".\n\nVamos começar instalando o conjunto de pacotes `tidyverse`. Para instalar um pacote no `R` utilizamos a função `install.packages()`. Para carregar o pacote utilizamos a função `library()` com o nome do pacote.\n\n### Você tem um momento para falar sobre o `tidyverse`?\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Instala o pacote tidyverse\ninstall.packages(\"tidyverse\")\n# Carrega o pacote tidyverse\nlibrary(\"tidyverse\")\n```\n:::\n\n\nTodos os pacotes e funções que vamos utilizar serão carregados nesta única linha de código.\n\n* `readr`/`vroom` - importação e exportação de dados.\n* `dplyr` - manipulação de dados.\n* `tidyr` - manipulação de dados.\n* `stringr` - manipulacao de strings (`character`)\n* `forcats` - manipulacao de `factors`\n* `lubridate` - manipulação de datas (`Date`)\n\n## Exemplos aplicados\n\n### dplyr\n\nO pacote `dplyr` é uma das ferramentas mais populares e úteis para manipulação de dados no R. Ele fornece uma série de funções simples e poderosas para filtrar, agrupar, modificar e resumir dados. Neste tutorial, vamos explorar algumas dessas funções e ver como elas podem ser usadas para realizar tarefas comuns de manipulação de dados.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# create example data\ndf <- tibble(\n  x = c(1, 2, 3, 4, 5),\n  y = c(2, 4, 6, 8, 10),\n  z = c(\"a\", \"b\", \"c\", \"d\", \"e\")\n)\n```\n:::\n\n\nAgora, vamos ver algumas das funções mais úteis do dplyr:\n\n* rename(): permite renomear colunas de um tibble\n* mutate(): permite criar novas colunas baseadas em outras colunas\n* filter(): permite selecionar apenas as linhas que atendem a determinadas condições\n* arrange(): permite ordenar os dados por uma ou mais colunas\n* group_by(): permite agrupar os dados por uma ou mais colunas\n* summarise(): permite resumir os dados de várias maneiras, como fazer médias, somas, etc.\n\nAgora que temos os dados em um tibble, podemos começar a limpar e transformar os dados. O primeiro passo é verificar se os dados estão no formato tidy. O formato tidy é um padrão para organizar os dados de maneira consistente e fácil de trabalhar. Ele consiste em três regras básicas:\n\nCada coluna deve conter apenas um tipo de variável\nCada linha deve conter uma única observação\nCada tipo de observação deve ter sua própria tabela\n\n\nAmbas as funções são muito úteis para criar novas colunas baseadas em condições lógicas. No entanto, é importante lembrar que a linguagem lógica do R é um pouco diferente da linguagem lógica em outras linguagens de programação. Alguns dos operadores lógicos mais comuns são:\n\n|: operador \"ou\"\n&: operador \"e\"\n!: operador \"não\"\n==: operador de igualdade\nPor exemplo, para verificar se um número é maior que 5 e menor que 10, podemos usar a seguinte condição:\n\nAlém dessas funções, o pacote dplyr também inclui uma série de funções de agregação, como mean(), sum(), median(), sd(), var(), etc. Essas funções são muito úteis quando usamos group_by() e summarise() para resumir os dados.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf <- tibble(\n  id = c(1, 2, 3),\n  value_1 = c(10, 20, 30),\n  value_2 = c(15, 25, 35)\n)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n     id value_1 value_2\n  <dbl>   <dbl>   <dbl>\n1     1      10      15\n2     2      20      25\n3     3      30      35\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npivot_longer(data = df, cols = c(value_1, value_2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n     id name    value\n  <dbl> <chr>   <dbl>\n1     1 value_1    10\n2     1 value_2    15\n3     2 value_1    20\n4     2 value_2    25\n5     3 value_1    30\n6     3 value_2    35\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npivot_longer(data = df, cols = -id)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n     id name    value\n  <dbl> <chr>   <dbl>\n1     1 value_1    10\n2     1 value_2    15\n3     2 value_1    20\n4     2 value_2    25\n5     3 value_1    30\n6     3 value_2    35\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npivot_longer(data = df, cols = starts_with(\"value\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 3\n     id name    value\n  <dbl> <chr>   <dbl>\n1     1 value_1    10\n2     1 value_2    15\n3     2 value_1    20\n4     2 value_2    25\n5     3 value_1    30\n6     3 value_2    35\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}