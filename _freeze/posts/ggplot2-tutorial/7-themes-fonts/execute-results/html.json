{
  "hash": "afddab312d3987c12f212cff8cfff8e2",
  "result": {
    "markdown": "---\ntitle: 'Estético: Tipografia e temas'\ndate: '2023-10-10'\ncategories: ['data-visualization', 'ggplot2', 'tutorial-R']\ndescription: \"Este post encerra a discussão de elementos 'estéticos' de gráficos. Primeiro apresento, brevemente, uma discussão sobre tipografias e como utilizar fontes em gráficos de ggplot2. Depois, entro numa discussão mais detalhada sobre a função theme, que controla todos os aspectos 'temáticos' do gráfico\"\nimage: \"/static/ggplot2_theme.png\"\nimage-alt: \"/static/ggplot2_theme.png\"\nexecute: \n  message: false\n  warning: false\nformat:\n  html:\n    code-fold: false\n    code-tools: true\n---\n\n\n\n\n# Introdução\n\nEste post encerra a discussão de elementos \"estéticos\" de gráficos. Primeiro apresento, brevemente, uma discussão sobre tipografias e como utilizar fontes em gráficos de ggplot2. Depois, entro numa discussão mais detalhada sobre a função `theme`, que controla todos os aspectos \"temáticos\" do gráfico, isto é, todos os aspectos que não envolvem diretamente algum dado: o tamanho do título, a posição da legenda, a cor do fundo, etc.\n\nEste é talvez o post mais burocrático de todos. A função `theme` permite um controle fino sobre o gráfico, mas exige instruções igualmente detalhadas. Assim, o código, em termos de linhas, começa a crescer muito. Um simples gráfico de linhas, que podia ser feito em 5 ou 6 linhas, torna-se uma tarefa complexa, que pode ultrapassar 50 linhas de código. O lado positivo disto é que estas configurações podem então ser replicadas em múltiplos gráficos. Isto não é apenas um ganho estético, mas também permite padronizar a identidade visual dos gráficos.\n\nAssim, o esforço de customizar o gráfico é feito uma única vez e depois pode ser replicado em todos os gráficos subsequentes.\n\n# Fontes\n\nA tipografia desempenha um papel fundamental na eficácia da visualização de dados. [Neste post anterior](https://restateinsight.com/posts/ggplot2-tutorial/5-grafico-text), vimos diferentes formas de como integrar texto num gráfico; também vimos, brevemente como utilizar diferentes tipografias/fontes no R. De maneira geral, há três opções para usar fontes no R[^1]: usando (1) `extrafont`, (2) showtext e (3) ragg. Neste post vou mostrar como usar fontes usando showtext.\n\n[^1]: [Neste post](https://restateinsight.com/posts/general-posts/tutorial-showtext/), mostro em maiores detalhes como utilizar o pacote showtext para importar e usar fontes no R.\n\nA escolha da fonte deve ser guiada pelo contexto, audiência e metas da visualização de dados, visando a eficácia na comunicação. Não há uma fonte universalmente ideal. Dito isso, acho que vale a pena se ater a um pequeno conjunto de fontes que, tradicionalmente, funcionam bem. Fontes como Helvetica, Futura, Arial e Roboto são amplamente utilizadas porque atendem a vários critérios técnicos, que garantem que estas fontes sejam legíveis, acessíveis e agradáveis ao olhar humano.\n\nEm muitos contextos, a escolha da fonte é uma prerrogativa editorial da publicação ou faz parte da identidade de marca da empresa ou instituição. Nestes casos, a escolha da fonte é imediata.\n\nA maneira simples de conseguir fontes é baixando elas do [Google Fonts](https://fonts.google.com). O Google Fonts oferece mais de 1500 fontes diferentes. Não acho que vale a pena olhar ou testar todas. Abaixo segue uma pequena lista de fontes populares, muitas das quais já usei pessoalmete:\n\n1.  Lato\n2.  Montserrat\n3.  Roboto e Roboto Condensed\n4.  PT Serif\n5.  Noto Sans\n6.  Open Sans\n7.  Source Serif Pro\n8.  Questrial\n9.  Fira Sans ou Source Code Pro\n10. Oswald\n\nA fonte deste blog é a Questrial, enquanto os códigos são escritos com Fira Code.\n\nA única potencial desvantagem de usar uma fonte popular é que a sua escolha de tipografia não vai chamar atenção. Em muitos casos isto não é propriamente uma desvantagem já que enfatiza o conteúdo sobre a forma. Certamente, existe um argumento de que muitas empresas e publicações estão usando as mesmas fontes como [Roboto](https://bootcamp.uxdesign.cc/please-dont-use-roboto-again-e80e48358bef) e [Helvetica](https://type-01.com/why-we-need-to-stop-advocating-helvetica-as-the-best-typeface/) a ponto disto tornar-se monótono. Novamente, não acha que seja um problema utilizar uma fonte popular e, na maior parte dos casos, uma fonte como Roboto é quase que objetivamente a escolha certa a se fazer.\n\nFontes populares com Helvetica, Arial, Times New Roman, etc. costumam vir junto com o seu sistema operacional. Abaixo segue uma listinha com algumas fontes populares que gosto de usar.\n\n1.  Arial\n2.  Helvetica / Helvetica Neue\n3.  Futura\n4.  Calibri\n5.  Georgia\n6.  Verdana\n7.  Century Gothic\n8.  Cambria\n9.  Palatino\n10. Garamond\n11. Tahoma\n12. Franklin Gothic\n13. Myriad Pro\n14. Avenir\n15. Times New Roman\n\nParticularmente, sou um grande fã de Helvetica[^2].\n\n[^2]: Uma boa referência sobre a história da tipografia [The Story of the World's Most Famous Font: Helvetica](https://www.designandpaper.com/the-story-of-the-worlds-most-famous-font-helvetica/)\n\n![](https://upload.wikimedia.org/wikipedia/commons/2/28/HelveticaSpecimenCH.svg){fig-align=\"center\"}\n\n## Fontes no R\n\nPara adicionar fontes em gráficos vamos utilizar o pacote `showtext`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(sysfonts)\nlibrary(showtext)\n```\n:::\n\n\nNo código abaixo eu importo a fonte Montserrat.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfont_add_google(\"Montserrat\", \"Montserrat\")\n```\n:::\n\n\nO gráfico abaixo mostra como ficam as letras.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#> Carrega as fontes\nshowtext_auto()\n\ndat <- expand.grid(x = 1:5, y = 6:1)\ndat$z <- c(letters, 1, 2, 3, 4)\n\nggplot(dat, aes(x = x, y = y, label = z)) +\n  geom_text(family = \"Montserrat\") +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](7-themes-fonts_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nNo segundo exemplo mostro como adicionar a fonte Helvetica. Neste caso, será necessário que a fonte esteja instalada em seu computador.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfont_add(\"Helvetica\", \"Helvetica.ttc\")\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(dat, aes(x = x, y = y, label = z)) +\n  geom_text(family = \"Helvetica\") +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](7-themes-fonts_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nNa seção seguinte mostro como utilizar estas fontes em outras partes do gráfico.\n\n# Temas\n\nOs elementos estéticos não relacionados com dados são os elementos \"temáticos\" do gráfico, controlados pela função `theme`. Exemplos de elementos temáticos incluem: linhas de grade, margem do gráfico, fonte do título, cor do fundo, etc. Há três elementos centrais que servem para construir estas escolhas temáticas, mas há quatro funções:\n\n-   `element_line`: controla as linhas do gráfico. Em geral, serve para ajustar as linhas de grade que ficam no fundo do gráfico.\n-   `element_rect`: controla os elementos retangulares do gráfico. Em geral, serve para ajustar o fundo do gráfico e seu contorno.\n-   `element_text`: controla os elementos textuais do gráfico. Em geral, serve para alterar configurações do título, subtítulo e título dos eixos.\n-   `element_blank`: serve para suprimir algum elemento temático do gráfico.\n\nSão quatro os principais elementos temáticos de um gráfico: fundo, eixos, legenda e margens. Para modificar qualquer elemento temático, usa-se a função `theme`.\n\nA imagem abaixo, de Henry Wang, é uma boa referência de todos os elementos temáticos de um gráfico de ggplot2[^3].\n\n[^3]: <https://henrywang.nl/ggplot2-theme-elements-demonstration/>\n\n![](https://henrywang.nl/wp-content/uploads/2020/04/theme_elements-1024x755.png){fig-align=\"center\"}\n\nAntes de entrar nos detalhes da função `theme` vale começar com os temas \"completos\". Estas funções acompanham os pacotes `ggplot2` e `ggthemes` e aplicam um tema completo sobre um gráfico.\n\n## Temas completos\n\nUm tema completo é um conjunto de especificações temáticas que pode ser aplicado diretamente num gráfico. É a opção mais simples e direta de customização: no exemplo abaixo aplico o tema minimalista usando `theme_minimal()`.\n\nO gráfico abaixo usa a mesma base da Pesquisa Origem e Destino (POD) do post anterior e mostra o número absoluto de carros no eixo-x e o número de carros por domicílio no eixo-y.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#> Importa os dados limpos da Zona OD.\npod <- readr::read_csv(\n  \"https://github.com/viniciusoike/restateinsight/raw/main/posts/ggplot2-tutorial/table_pod.csv\"\n  )\n#> Seleciona apenas zonas de São Paulo com população acima de zero\npod <- dplyr::filter(pod, code_muni == 36, pop > 0)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pod, aes(x = cars, y = car_rate)) +\n  geom_point(aes(color = as.factor(is_cbd)), alpha = 0.5) +\n  scale_color_brewer(type = \"qual\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](7-themes-fonts_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nO tema `theme_minimal` já vem carregado no pacote `ggplot2`. Abaixo mostro alguns temas diferentes aplicados ao mesmo gráfico. Para não sobrecarregar a visualização eu omito a legenda.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbase_plot <- ggplot(pod, aes(x = cars, y = car_rate)) +\n  geom_point(aes(color = as.factor(is_cbd)), alpha = 0.5) +\n  scale_x_continuous(labels = scales::label_number(big.mark = \".\")) +\n  scale_color_brewer(type = \"qual\", palette = 2) +\n  guides(color = \"none\") +\n  labs(x = \"Carros\", y = \"Carros por habitante\")\n\n#> Tema \"clássico\" padrão\nbase_plot + theme_classic()\n#> Tema preto e branco padrão\nbase_plot + theme_bw()\n#> Tema claro padrão\nbase_plot + theme_light()\n#> Tema completamente vazio (útil para mapas)\nbase_plot + theme_void()\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](7-themes-fonts_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\nO pacote `ggthemes` traz algumas funções `theme_*` adicionais. Além disso, ele também traz escalas de cores, que combinam com estes temas.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggthemes)\n```\n:::\n\n\nNo exemplo abaixo uso `theme_pander` e `scale_color_pander` em conjunto.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pod, aes(x = cars, y = car_rate)) +\n  geom_point(aes(color = as.factor(is_cbd)), alpha = 0.5) +\n  scale_x_continuous(labels = scales::label_number(big.mark = \".\")) +\n  guides(color = \"none\") +\n  labs(title = \"Pander\", x = \"Carros\", y = \"Carros por habitante\") + \n  scale_color_pander() +\n  theme_pander()\n```\n\n::: {.cell-output-display}\n![](7-themes-fonts_files/figure-html/unnamed-chunk-11-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nNovamente, os gráficos abaixo mostram algumas das opções disponíveis no pacote `ggthemes`. Estes temas \"imitam\" algumas publicações famosas como The Economist e FiveThirtyEight. Há também temas que imitam a identidade visual de \"softwares\" estatísticos como Stata, Excel, Google Docs, etc.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbase_plot <- ggplot(pod, aes(x = cars, y = car_rate)) +\n  geom_point(aes(color = as.factor(is_cbd)), alpha = 0.5) +\n  scale_x_continuous(labels = scales::label_number(big.mark = \".\")) +\n  guides(color = \"none\") +\n  labs(x = \"Carros\", y = \"Carros por habitante\")\n\n#> Tema que imita a The Economist\nbase_plot + scale_color_economist() + theme_economist()\n#> Tema que imita o Excel\nbase_plot + scale_color_excel_new() + theme_excel_new()\n#> Tema que imita o Google Docs\nbase_plot + scale_color_gdocs() + theme_gdocs()\n#> Tema que imita o FiveThirtyEight\nbase_plot + scale_color_fivethirtyeight() + theme_fivethirtyeight()\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](7-themes-fonts_files/figure-html/unnamed-chunk-13-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\nHá também outros pacotes que exportam escalas e temas pré-definidos. O pacote `hrbrthemes`, por exemplo, oferece boas opções e já traz algumas tipografias como Roboto Condensed e Arial. Para conhecer mais sobre o pacote consulte o seu [repositório no GitHub](https://github.com/hrbrmstr/hrbrthemes). Acredito que os temas deste pacote funcionam bem para contextos formais em geral, sejam acadêmicos ou empresariais.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(hrbrthemes)\n\nbase_plot +\n  hrbrthemes::scale_color_ft() +\n  hrbrthemes::theme_ft_rc()\n```\n\n::: {.cell-output-display}\n![](7-themes-fonts_files/figure-html/unnamed-chunk-14-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nOutro pacote interessante é o `cowplot`, que oferece uma [visualização simples e limpa](https://cran.r-project.org/web/packages/cowplot/vignettes/introduction.html). Acredito que o tema funciona bem para publicações acadêmicas em geral.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(cowplot)\n\nbase_plot + \n  cowplot::theme_half_open(font_size = 10, font_family = \"mono\") +\n  cowplot::background_grid()\n```\n\n::: {.cell-output-display}\n![](7-themes-fonts_files/figure-html/unnamed-chunk-15-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Os elementos principais\n\nPara entender como estes temas são construídos precisa-se entender os elementos temáticos do gráfico em maiores detalhes. São quatro os principais elementos temáticos de um gráfico: **fundo**, **eixos**, **legenda** e **margens**.\n\nNas próximas seções vamos explorar estes elementos.\n\n### Fundo\n\nPor \"fundo\" quer-se dizer tudo o que fica atrás do gráfico principal. Num gráfico, temos dois \"fundos\": o fundo do gráfico como um todo (`plot.background`) e o fundo do \"painel\" onde fica o gráfico (`panel.background`).\n\nO exemplo abaixo tenta mostrar a diferença entre estes dois \"fundos\". Aqui, as cores seguem o mesmo padrão de `geom_col`, o argumento color define a borda do objeto enquanto fill define a cor que preenche o objeto. Como fundo do gráfico coloquei uma margem azul espessa e um preenchimento em cinza-escuro (`gray40`). Como fundo do painel coloquei um \"off-white\" e uma linha de contorno escura (`gray10`).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pod, aes(x = cars, y = car_rate)) +\n  geom_point(aes(color = as.factor(is_cbd)), alpha = 0.5) +\n  guides(color = \"none\") +\n  theme(\n    plot.background = element_rect(\n      fill = \"gray40\",\n      color = \"blue\",\n      linewidth = 5),\n    panel.background = element_rect(\n      fill = \"#f8f8f8\",\n      color = \"gray10\"\n      )\n  )\n```\n\n::: {.cell-output-display}\n![](7-themes-fonts_files/figure-html/unnamed-chunk-16-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nAs linhas de grade também compõem o fundo do gráfico. Estas linhas são úteis para relacionar as observações no gráfico com os valores destacados nos eixos. O excesso de linhas de grade, contudo, pode poluir um gráfico.\n\nAs linhas de grade são controladas por `element_line` e muitos dos argumentos seguem a lógica de `geom_line`. Isto é, pode-se modificar o tipo de linha com `linetype` ou a espessura da linha com `linewidth`.\n\nNo exemplo abaixo, novamente, exagero nos argumentos para exemplificar algumas das possibilidades. As linhas \"principais\" que saem diretamente dos valores destacados no eixo são controladas via `panel.grid.major`; as linhas \"intermediárias\", `panel.grid.minor`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pod, aes(x = cars, y = car_rate)) +\n  geom_point(aes(color = as.factor(is_cbd)), alpha = 0.5) +\n  guides(color = \"none\") +\n  theme(\n    panel.grid.major = element_line(\n      color = \"gray10\",\n      linetype = 2\n    ),\n    panel.grid.minor = element_line(\n      color = \"red\",\n      linetype = 3\n    )\n  )\n```\n\n::: {.cell-output-display}\n![](7-themes-fonts_files/figure-html/unnamed-chunk-17-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nPara omitir qualquer elemento temático usa-se `element_blank`. No caso abaixo, elimina-se as linhas de grade intermediárias.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(pod, aes(x = cars, y = car_rate)) +\n  geom_point(aes(color = as.factor(is_cbd)), alpha = 0.5) +\n  guides(color = \"none\") +\n  theme(\n    panel.grid.major = element_line(\n      color = \"gray50\",\n      linetype = 1\n    ),\n    panel.grid.minor = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![](7-themes-fonts_files/figure-html/unnamed-chunk-18-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n### Eixos\n\nPor eixos, quer-se dizer não somente os elementos textuais nos eixos x e y, mas também os elementos textuais adicionais (título, subtítulo e *caption*[^4]).\n\n[^4]: Uso o termo em inglês para evitar confusão com a legenda, que se refere à legenda de cores. Uma tradução livre seria: nota de rodapé.\n\nOs eixos são um elemento temático bastante complexo. [No post anterior](https://restateinsight.com/posts/ggplot2-tutorial/6-scales-labels), vimos como controlar alguns dos aspectos dos eixos usando funções scale. A função `theme` como mencionado diversas vezes permite um controle detalhado dos elementos temáticos. Para exemplificar o seu uso vamos começar com um gráfico cheio de elementos textuais.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbase_plot <- ggplot(pod, aes(x = cars, y = car_rate)) +\n  geom_point(aes(color = as.factor(is_cbd)), alpha = 0.5) +\n  scale_x_continuous(labels = scales::label_number(big.mark = \".\")) +\n  scale_color_brewer(type = \"qual\", palette = 2) +\n  guides(color = \"none\") +\n  labs(\n    x = \"Carros\",\n    y = \"Carros por habitante\",\n    title = \"Carros demais em SP\",\n    subtitle = \"Proporção e número absoluto de carros por Zona OD\",\n    caption = \"Fonte: POD (2017)\"\n    )\n\nbase_plot\n```\n\n::: {.cell-output-display}\n![](7-themes-fonts_files/figure-html/unnamed-chunk-19-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nVamos começar trocando a fonte, cor e tamanho do título do gráfico. Note que é necessário ter a fonte Montserrat carregada, o que pode ser feito usando `font_add_google(\"Montserrat\", \"Montserrat\")` como visto acima.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbase_plot <- base_plot +\n  theme(\n    plot.title = element_text(\n      family = \"Montserrat\",\n      size = 20,\n      color = \"gray10\")\n  )\n\nbase_plot\n```\n\n::: {.cell-output-display}\n![](7-themes-fonts_files/figure-html/unnamed-chunk-20-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nHá dois elementos temáticos que compõem os eixos x e y. Temos o título do eixo (\"Carros por habitante\") e o texto do eixo (\"0.5\", \"1.0\", \"1.5\"). Para modificar o primeiro usa-se `axis.title` e para modificar o segundo, `axis.text`. Estes elementos temáticos são replicados em ambos os eixos; contudo, se for necessário maior controle têm-se os elementos `axis.title.x`, `axis.title.y`, `axis.text.x` e `axis.text.y`.\n\nNo exemplo abaixo eu deixo o título dos eixos em Roboto Condensed em negrito, tamanho 12, e em cinza-escuro. Já o texto dos eixos fica em Raleway, tamanho 10, num tom mais claro de cinza.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbase_plot <- base_plot +\n  theme(\n    axis.title = element_text(\n      family = \"Roboto Condensed\",\n      face = \"bold\",\n      size = 12,\n      color = \"gray10\"\n    ),\n    axis.text = element_text(\n      family = \"Raleway\",\n      size = 10,\n      color = \"gray40\"\n      )\n  )\n```\n:::\n\n\nPor fim, falta apenas o subtítulo e o *caption* do gráfico. Note como uso `hjust = 0` para alinhar o *caption* à esquerda. Outra opção seria `hjust = 0.5` (centralizar) ou `hjust = 1` (à direita).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbase_plot +\n  theme(\n    plot.subtitle = element_text(size = 10, color = \"gray50\"),\n    plot.caption = element_text(size = 8, hjust = 0, color = \"gray50\")\n  )\n```\n\n::: {.cell-output-display}\n![](7-themes-fonts_files/figure-html/unnamed-chunk-22-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nUma maneira mais sã de utilizar estes argumentos é definindo uma mesma fonte para o gráfico inteiro. Aqui é importante notar que os elementos temáticos \"herdam\" argumentos. Para modificar todos os elementos textuais de um gráfico, por exemplo, pode-se modificar apenas `text = element_text()` e `title = element_text()`. A partir disto pode-se modificar os demais elementos introduzindo exceções à regra geral.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbase_plot +\n  theme(\n    text = element_text(family = \"Montserrat\", size = 10),\n    title = element_text(size = 8, color = \"gray50\"),\n    plot.title = element_text(\n      size = 20,\n      color = \"gray10\"\n      ),\n    axis.title = element_text(\n      face = \"bold\",\n      size = 12,\n      color = \"gray10\"\n    ),\n    axis.text = element_text(\n      color = \"gray40\"\n      )\n  )\n```\n\n::: {.cell-output-display}\n![](7-themes-fonts_files/figure-html/unnamed-chunk-23-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n### Legenda\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbase_plot <- ggplot(pod, aes(x = cars, y = car_rate)) +\n  geom_point(aes(color = as.factor(is_cbd)), alpha = 0.5) +\n  scale_x_continuous(labels = scales::label_number(big.mark = \".\")) +\n  scale_color_brewer(\n    type = \"qual\",\n    palette = 2,\n    name = \"Dentro do CE?\",\n    labels = c(\"Não\", \"Sim\")\n    ) +\n  labs(\n    x = \"Carros\",\n    y = \"Carros por habitante\",\n    title = \"Carros demais em SP\",\n    subtitle = \"Proporção e número absoluto de carros por Zona OD\",\n    caption = \"Fonte: POD (2017)\"\n    )\n\nbase_plot\n```\n\n::: {.cell-output-display}\n![](7-themes-fonts_files/figure-html/unnamed-chunk-24-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nO código abaixo mostra a maior parte das modificações que pode-se fazer com a legenda.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbase_plot +\n  theme(\n    legend.position = \"bottom\",\n    legend.background = element_rect(color = \"red\"),\n    legend.key = element_rect(color = \"blue\"),\n    legend.title = element_text(family = \"Montserrat\"),\n    legend.text = element_text(color = \"gray50\")\n  )\n```\n\n::: {.cell-output-display}\n![](7-themes-fonts_files/figure-html/unnamed-chunk-25-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n### Margens\n\nPor fim, as margens do gráfico são determinados diretamente via o elemento `margin`. As duas principais margens a se escolher são: a margem do gráfico e a margem da legenda. A ordem dos argumentos é margem de cima, da direita, de baixo e da esquerda (sentido horário começando em cima).\n\nVale notar que não costuma haver motivos para modificar as margens padrão do `ggplot2`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nbase_plot +\n  theme(\n    plot.margin = margin(5, 10, 5, 10),\n    legend.box.margin = margin(20, 20, 20, 20)\n  )\n```\n\n::: {.cell-output-display}\n![](7-themes-fonts_files/figure-html/unnamed-chunk-26-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Criando seu tema\n\nA motivação para aprender temas é poder criar o seu próprio tema e utilizá-lo em múltiplos gráficos. Em geral, recomenda-se começar com um tema simples e aí adicionar modificações; pode-se usar, por exemplo, o `theme_minimal` como ponto de partida.\n\nNo código abaixo eu monto o `theme_vini`, que modifica o `theme_minimal`. O meu tema utiliza Helvetica como fonte padrão (em tamanho 12). Além disso, eu removo as linhas de grade intermediárias, posiciono qualquer legenda no topo do gráfico e modifico as configurações do título do gráfico.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntheme_vini <- theme_bw(base_size = 12, base_family = \"Helvetica\") +\n  theme(\n    #> Remove linhas de grade intermediárias\n    panel.grid.minor = element_blank(),\n    #> Posiciona a legenda no topo do gráfico\n    legend.position = \"top\",\n    #> Aumenta o tamanho e destaca o título\n    plot.title = element_text(size = 20, color = \"#000000\")\n  )\n```\n:::\n\n\nAgora posso utilizar este tema em qualquer gráfico.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_point(aes(color = as.factor(cyl))) +\n  labs(title = \"Meu gráfico\") +\n  theme_vini\n```\n\n::: {.cell-output-display}\n![](7-themes-fonts_files/figure-html/unnamed-chunk-28-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n# Reproduzindo gráficos\n\nPara mostrar o potencial do conhecimento adquirido aqui, vamos reproduzir dois gráficos de publicações de jornal.\n\nMuitos portais de notícias utilizam o `ggplot2` para produzir as suas visualizações. Um bom exercício é tentar reproduzir estes gráficos - mesmo nos casos em que a publicação original não foi feita em ggplot2, costuma ser possível chegar num resultado muito próximo. O portal Nexo, por exemplo, [utiliza o ggplot2](https://www.nexojornal.com.br/grafico/2023/09/08/Como-o-Nexo-usa-o-R-para-visualização-de-dados) para a maior parte das suas visualizações[^5]. Portais internacionais como a BBC, também utilizam e, há inclusive um pacote auxiliar [bbplot](https://github.com/bbc/bbplot).\n\n[^5]: Vale notar o pacote [ggimprensa](https://brunomioto.github.io/ggimprensa/) de Bruno Mioto.\n\nComo vimos acima, as funções `theme_*` já incluem funções que reproduzem a identidade visual de publicações como a The Economist e a 538. De fato, utilizando a função `theme` podemos fazer o mesmo e tentar reproduzir alguns gráficos.\n\n## Folha de SP\n\nO primeiro exemplo que escolhi vem da Folha de São Paulo em [matéria publicada em outubro de 2021](https://www1.folha.uol.com.br/mercado/2021/10/apenas-os-10-mais-ricos-podem-comprar-imovel-acima-de-r-600-mil-em-sp-diz-pesquisa.shtml). A matéria foi baseada num estudo que participei que tentava mensurar a acessibilidade financeira à moradia em São Paulo. Usando preços de anúncios online e microdados de renda, mensurei a maior (ou menor) acessibilidade via um indicador chamado HAI (housing affordability index).\n\n![](/static/images/plot_folha_sp.png){fig-align=\"center\"}\n\nEm linhas gerais, o HAI compara a renda média de um grupo contra o valor da parcela de financiamento de um imóvel típico. As condições de financiamento seguem as médias do mercado na época. A demanda pelo \"imóvel típico\" é inferida a partir do grupo. No recorte abaixo, por exemplo, assume-se que a pessoa que mora sozinha vai comprar um apartamento de um dormitório; já a família com dois filhos vai comprar um apartamento de 3 ou 4 dormitórios.\n\nValores próximos de 100 indicam uma acessibilidade boa, enquanto valores próximos de 0 indicam uma acessibilidade ruim.\n\nNeste exemplo vamos reproduzir apenas o gráfico de colunas. Para reproduzir o gráfico, copio os dados diretamente da imagem e tento chegar em tons de azul similares ao da imagem original. Não faço ideia qual a fonte que a Folha utiliza; usei a \"Roboto\" por ser relativamente similar e de fácil acesso.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\n#> Dados do HAI\ndados <- tibble::tribble(\n  ~nome,             ~hai, ~type,\n  \"República\",       80.1,    1L,\n  \"Tatuapé\",         70.4,    1L,\n  \"Jabaquara\",       68.3,    1L,\n  \"Vila Mazzei\",     66.4,    1L,\n  \"Santana\",         62.8,    1L,\n  \"Jardim Brasil\",   51.9,    0L,\n  \"Belém\",           48.5,    0L,\n  \"Jardim Umarizal\", 42.1,    0L,\n  \"Parque Arariba\",  42.1,    0L,\n  \"Brasilândia\",     42.1,    0L\n)\n\ndados <- dados |> \n  mutate(nome = factor(nome), nome = fct_reorder(nome, hai))\n\n#> Cores dos grupos\ncores <- c(\"#B9D4EE\", \"#348ACA\")\n#> Adiciona a fonte Roboto\nfont_add_google(\"Roboto\", \"Roboto\")\n```\n:::\n\n\nA primeira versão do gráfico contém apenas o essencial da imagem. Temos um gráfico de colunas, virado na horizontal, com labels de texto. Além disso, as cores estão variando por grupo e temos uma legenda de cores. Sem utilizar a função `theme` o resultado do gráfico fica próximo, mas ainda muito distante do original.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(dados) +\n  geom_col(aes(x = nome, y = hai, fill = as.factor(type)), width = 0.5) +\n  geom_text(aes(x = nome, y = hai + 5, label = hai), color = \"#000000\") +\n  coord_flip() +\n  labs(x = NULL, y = NULL) +\n  scale_fill_manual(\n    name = \"\",\n    values = c(\"#B9D4EE\", \"#348ACA\"),\n    labels = c(\n      \"Para um casal com dois\\nfilhos e renda mediana**\",\n      \"Para quem mora sozinho\\ne tem renda mediana**\")\n  )\n```\n\n::: {.cell-output-display}\n![](7-themes-fonts_files/figure-html/unnamed-chunk-30-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nO código abaixo tenta chegar num resultado próximo ao da imagem original. Essencialmente, precisamos:\n\n1.  Ajustar a cor do fundo.\n2.  Remover as linhas de grade.\n3.  Remover todas as informações dos eixos.\n4.  Ajustar a posição da legenda.\n5.  Mudar a fonte e a cor do texto.\n\nAlém destas mudanças, também deixo os números em negrito e uso a vírgula como separador de decimal. O resultado final segue abaixo. Eu utilizo `theme_minimal` como um template inicial.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(dados) +\n  geom_col(\n    aes(x = nome, y = hai, fill = as.factor(type)),\n    width = 0.5\n    ) +\n  geom_text(\n    aes(x = nome, y = hai + 5, label = format(hai, decimal.mark = \",\")),\n    size = 4,\n    vjust = 0.5,\n    family = \"Roboto\",\n    color = \"#000000\",\n    fontface = \"bold\") +\n  scale_y_continuous(expand = c(0, 0), limits = c(NA, 95)) +\n  coord_flip() +\n  labs(x = NULL, y = NULL, title = \"\") +\n  scale_fill_manual(\n    name = \"\",\n    values = c(\"#B9D4EE\", \"#348ACA\"),\n    labels = c(\n      \"Para um casal com dois\\nfilhos e renda mediana**\",\n      \"Para quem mora sozinho\\ne tem renda mediana**\")\n  ) +\n  theme_minimal() +\n  theme(\n    #> Fundo branco\n    panel.background = element_rect(fill = \"white\", color = \"white\"),\n    plot.background = element_rect(fill = \"white\", color = \"white\"),\n    #> Remove as linhas de grade\n    panel.grid = element_blank(),\n    #> Aplica a fonte Roboto\n    legend.text = element_text(family = \"Roboto\", color = \"#000000\"),\n    #> Ajusta o texto no eixo-y\n    axis.text.y = element_text(\n      family = \"Roboto\",\n      color = \"#000000\",\n      size = 12,\n      vjust = 0.4),\n    #> Remove o texto no eixo-x\n    axis.text.x = element_blank(),\n    #> Aumenta. margem superior para dar espaço para a legenda\n    plot.margin = margin(t = 40, r = 5, b = 5, l = 5),\n    #> Ajusta a posição e direção da legenda\n    legend.position = c(0.15, 1.1),\n    legend.direction = \"horizontal\"\n  )\n```\n\n::: {.cell-output-display}\n![](7-themes-fonts_files/figure-html/unnamed-chunk-31-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Financial Times\n\nO segudo exemplo vem do [Financial Times](https://www.ft.com/content/75942d5f-6bdf-40fb-b7ce-a48429ab84fc) e foi publicado março de 2021. O gráfico abaixo mostra a evolução trimestral do preço dos imóveis em alguns países da OCDE. Mais especificamente, os valores representam a variação real dos índices de preços imobiliários dos respectivos países; para comparar a evolução entre os países, os valores foram indexados no valor do primeiro trimestre de 2000.\n\nEssencialmente, o gráfico mostra como o preço dos imóveis subiu muito no Reino Unido e o autor argumenta que é necessário aumentar a oferta de moradia para conter a pressão sobre os preços.\n\n![](/static/images/plot_ft.png){width=\"80%\" fig-align=\"center\"}\n\nPara reproduzir este gráfico, primeiro importo as séries via o pacote `OECD`. É preciso filtrar os países, limpar as datas e indexar os valores.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(OECD)\n\ndataset <- \"HOUSE_PRICES\"\nhp <- get_dataset(dataset)\ncountries <- c(\"CAN\", \"DEU\", \"USA\", \"ITA\", \"GBR\", \"FRA\", \"ESP\")\n\ndat <- hp |> \n  janitor::clean_names() |> \n  filter(ind == \"RHP\", cou %in% countries, stringr::str_length(time) > 4) |> \n  mutate(\n    date = zoo::as.Date(zoo::as.yearqtr(time, format = \"%Y-Q%q\")),\n    obs_value = as.numeric(obs_value)\n    ) |> \n  filter(date >= as.Date(\"2000-01-01\"), date <= as.Date(\"2022-10-01\")) |> \n  select(country = cou, date, index = obs_value)\n\ndat <- dat |> \n  mutate(reindex = index / first(index) * 100, .by = \"country\") \n\ncountry_order <- dat |> \n  filter(date == max(date)) |> \n  arrange(desc(reindex)) |> \n  pull(country)\n\ndat <- dat |> \n  mutate(country = factor(country, levels = country_order))\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\nNa sua essência, as duas linhas de código abaixo reproduzem o gráfico do Financial Times.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(dat, aes(x = date, y = reindex, color = country)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](7-themes-fonts_files/figure-html/unnamed-chunk-34-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nPara recriar o gráfico vou precisar das cores das linhas. Tentei encontrar cores parecidas, mas os códigos abaixo não devem ser idênticos aos do gráfico original. Além disso, também preciso do nome - por extenso - dos países.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#> Cores\ncores <- c(\n  \"#1A48B0\", \"#EB5F8E\", \"#73DAE4\", \"#A1BC4B\", \"#2F8CC9\", \"#7B052D\", \"#BBB7B4\")\n#> Nomes dos países\ncountry_labels <- c(\n  \"Canada\", \"UK\", \"France\", \"US\", \"Spain\", \"Germany\", \"Italy\"\n  )\n```\n:::\n\n\nAs quebras no eixo-x são um pouco difíceis de emular, pois elas fogem do comportamento padrão do ggplot2. Assim, eu preciso definir ela manualmente e ainda fazer um pequeno \"hack\": essencialmente, eu crio um vetor que destaca os anos \"cheios\" (2000, 2005, ... 2020) e coloca valores vazios nos anos intermediários.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndate_breaks <- seq(as.Date(\"2000-01-01\"), as.Date(\"2022-01-01\"), by = \"year\")\ndate_labels <- c(date_breaks[c(1, 6, 11, 16, 21)])\nlabels_year <- format(date_labels, \"%Y\")\nlabs <- c(sapply(labels_year, function(x) {c(x, rep(\"\", 4))}))\nlabs <- labs[1:length(date_breaks)]\n\nlabs\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"2000\" \"\"     \"\"     \"\"     \"\"     \"2005\" \"\"     \"\"     \"\"     \"\"    \n[11] \"2010\" \"\"     \"\"     \"\"     \"\"     \"2015\" \"\"     \"\"     \"\"     \"\"    \n[21] \"2020\" \"\"     \"\"    \n```\n:::\n:::\n\n\nUsando todos os conhecimentos adquiridos nos posts anteriores, pode-se criar a visualização abaixo. Note que o resultado já é bastante satisfatório. Eu mantive a ordem das cores, mas como a ordem dos países mudou com a atualização dos dados, elas não batem com as dos países no gráfico original.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(dat, aes(x = date, y = reindex, color = country)) +\n  geom_line(linewidth = 1) + \n  scale_color_manual(name = \"\", values = cores, labels = country_labels) +\n  scale_y_continuous(position = \"right\") +\n  scale_x_date(breaks = date_breaks, labels = labs) +\n  labs(\n    title = \"The divergent paths of house prices across countries\",\n    subtitle = \"Real house prices (Q1 2000 = 100)\",\n    caption = \"Source: OECD (replica FT)\",\n    x = NULL,\n    y = NULL) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](7-themes-fonts_files/figure-html/unnamed-chunk-37-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nPara chegar num resultado mais próximo do original é necessário mexer em vários elementos temáticos. Como fonte, usei a Gill Sans.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(dat, aes(x = date, y = reindex, color = country)) +\n  geom_line(linewidth = 1.1) + \n  scale_color_manual(name = \"\", values = cores, labels = country_labels) +\n  scale_y_continuous(position = \"right\") +\n  scale_x_date(breaks = date_breaks, labels = labs) +\n  labs(\n    title = \"The divergent paths of house prices across countries\",\n    subtitle = \"Real house prices (Q1 2000 = 100)\",\n    caption = \"Source: OECD (replica)\",\n    x = NULL,\n    y = NULL) +\n  guides(color = guide_legend(nrow = 1)) +\n  theme_minimal() +\n  theme(\n    #> Muda a cor do fundo do gráfico\n    plot.background = element_rect(fill = \"#FEF1E4\", color = NA),\n    #> Remove todos as linhas de grade intermediárias\n    panel.grid.minor = element_blank(),\n    #> Remove as linhas de grade \"verticais\" que partem do eixo-x\n    panel.grid.major.x = element_blank(),\n    #> Altera a cor das linhas de grade \"horizontais\" que partem do eixo-y\n    panel.grid.major.y = element_line(color = \"#EAE3DF\"),\n    \n    #> Altera a fonte e a cor de todos os elementos textuais\n    text = element_text(family = \"Gill Sans\", color = \"#686261\"),\n    #> Ajusta o título do gráfico para ser maior e em preto\n    plot.title = element_text(size = 20, color = \"#000000\"),\n    #> Ajusta o tamanho da legenda\n    plot.subtitle = element_text(size = 12),\n    #> Ajusta a posição da \"Fonte\"\n    plot.caption = element_text(hjust = 0),\n    #> Altera o tamanho e a cor do texto nos eixos\n    axis.text = element_text(size = 11, color = \"#6B6865\"),\n    \n    #> Aumenta as margens do gráfico\n    plot.margin = margin(rep(10, 4)),\n    \n    #> Muda a cor do \"tiquezinho\" no eixo-x e deixa ele mais comprido\n    axis.ticks.x = element_line(color = \"#EADFD8\"),\n    axis.ticks.length = unit(7, \"pt\"),\n    \n    #> Altera a posição da legenda\n    legend.position = c(0.35, 1)\n    \n    )\n```\n\n::: {.cell-output-display}\n![](7-themes-fonts_files/figure-html/unnamed-chunk-38-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n# Conclusão\n\nEste post teve o difícil desafio de mostrar como se usa a função `theme`. Esta é tipo de função que se leva anos para aprender, pois há inúmeros argumentos, a maioria dos quais será utilizada apenas pontualmente. Ela concentra grande parte do poder de customização do `ggplot` e permite que se reproduza praticamente qualquer visualização de dados estática. Não tenho dúvida de que ela é a função que mais leva usuários ao StackOverflow.\n\n### Outros posts citados\n\n-   [Estético: escalas e cores](https://restateinsight.com/posts/ggplot2-tutorial/6-scales-labels)\n\n-   [Estético: destacando informação](https://restateinsight.com/posts/ggplot2-tutorial/5-grafico-text)\n\n-   [Usando fontes com showtext no R](https://restateinsight.com/posts/general-posts/tutorial-showtext/)\n",
    "supporting": [
      "7-themes-fonts_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}