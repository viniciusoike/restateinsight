{
  "hash": "ae0b743022bee7dbb7d5693d2e8a5d07",
  "result": {
    "markdown": "---\ntitle: 'Estético: Destacando informação'\ndate: '2023-09-01'\ncategories: ['data-visualization', 'ggplot2', 'tutorial-R']\ndescription: \"Um gráfico deve ser autoexplicativo. Neste post, discutiremos três estratégias simples para realçar informações em um gráfico: usar linhas com geom_vline(), geom_hline() e geom_abline() para destacar eixos ou informações numéricas; realçar seções do gráfico com geom_rect(); e destacar informações numéricas e texto usando geom_text() e annotate().\"\ntitle-block-banner: true\nimage: \"/static/ggplot2_text.png\"\nimage-alt: \"/static/ggplot2_text.png\"\nexecute: \n  message: false\n  warning: false\nformat:\n  html:\n    code-fold: false\n    code-tools: true\n---\n\n\n\n\n# Destacando informação\n\nUm gráfico deve ser o mais autosuficiente possível; a imagem deve explicar-se por si mesma. Existem algumas ferramentas adicionais que pode-se usar para atingir este objetivo. Neste post vou discutir três estratégias simples para destacar uma informação no gráfico.\n\nEspecificamente, vamos ver como:\n\n-   Usar linhas para destacar os eixos ou informações numéricas com `geom_vline()`, `geom_hline()` e `geom_abline()`\n-   Destacar partes do gráfico com `geom_rect()`\n-   Destacar informações numéricas e texto usando `geom_text()` e `annotate()`\n\n# R\n\nOs pacotes necessários para acompanhar este post estão destacados abaixo. A partir deste post começo a utilizar os pacotes da família `tidyverse` para fazer a manipulação de dados. Apesar do foco do post ser apenas a visualização vou explicar um pouco do que está acontecendo em cada estágio do código. Se você deseja uma introdução mais completa a estes pacotes veja o post [Manipular para Enxergar]().\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Instala os pacotes (se necesário)\npacks <- c(\"ggplot2\", \"tidyr\", \"dplyr\", \"forcats\", \"GetBCBData\")\ninstall.packages(packs)\n\n# Carrega os pacotes\nlibrary(ggplot2)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(GetBCBData)\n```\n:::\n\n\n# 1. Desenhando linhas\n\n## Básico\n\nJá sabemos como desenhar linhas usando tanto o `geom_line()` como o `geom_path()`. Estas funções exigem dois a três arguemntos que especficam as coordenadas da linha e de que forma a linha deve unir estas coordenadas.\n\nSuponha, por exemplo, que se queira desenhar uma linha reta no eixo-x. Para isto precisamos estruturar um `data.frame`, informar as coordenadas e então chamar `geom_line()`.\n\nNote como no código abaixo, não preciso repetir o valor `y = 0` já que o `tibble` \"recicla\" este número para que ele tenha o mesmo comprimento (`length)` que o vetor `x`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf <- tibble(\n  x = c(1, 10),\n  y = 0\n)\n\nggplot(df, aes(x = x, y = y)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](5-grafico-text_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\nO procedimento acima é nada prático, exige a criação de um `data.frame` apartado dos dados e as linhas ainda tem comprimento fixo. Para desenhar linhas retas arbitrárias com maior facilidade há três funções:\n\n-   `geom_vline` - Desenha linhas verticais\n-   `geom_hline` - Desenha linhas horizontais\n-   `geom_abline` - Desenha linhas retas especificando o intercepto e a inclinação.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot() +\n  geom_vline(xintercept = 0) +\n  geom_hline(yintercept = 0)\n```\n\n::: {.cell-output-display}\n![](5-grafico-text_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\nA função `geom_abline()` segue a equação da reta $y = ax + b$ onde $a$ é a inclinação da reta (`slope`) e $b$ é o intercepto (`intercept`) o ponto onde a linha cruza o eixo vertical.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot() +\n  geom_vline(xintercept = 0) +\n  geom_hline(yintercept = 0) +\n  geom_abline(slope = 1, intercept = 0)\n```\n\n::: {.cell-output-display}\n![](5-grafico-text_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n## Desenhando eixos num gráfico\n\nO uso mais imediato destas funções é de desenhar eixos num gráfico. O gráfico de dispersão abaixo mostra a relação entre a taxa de desmprego e a taxa de poupança, usando a base `economics`. A inclusão do eixo-x e eixo-y ajudam a melhor contextualizar os dados.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(economics, aes(uempmed, psavert)) +\n  geom_vline(xintercept = 0) +\n  geom_hline(yintercept = 0) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](5-grafico-text_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n## Destacando informações com linhas\n\nTambém pode-se usar linhas para destacar algum tipo de informação no gráfico. Nos exemplos abaixo mostro como destacar o valor médio e mediano ou os quintis.\n\n### Média e mediana num gráfico\n\nNo gráfico abaixo, mostro a distribuição mensal de listings de imóveis (anúncios de imóveis) em Houston, TX. No código eu uso `geom_hline()` para exibir uma linha reta no eixo-x e `geom_vline()` para destacar os valores médio e mediano. A linha tracejada em vermelho indica o valor médio, enquanto a linha tracejada em amarelo indica o valor mediano.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsubhousing <- filter(txhousing, city == \"Houston\")\n\nggplot(subhousing, aes(x = listings)) +\n  geom_histogram(bins = 6, color = \"white\", fill = \"#1B6F88\") +\n  geom_hline(yintercept = 0) +\n  geom_vline(\n    xintercept = mean(subhousing$listings, na.rm = TRUE),\n    color = \"#9e2a2b\",\n    linewidth = 1,\n    linetype = 2) +\n  geom_vline(\n    xintercept = median(subhousing$listings, na.rm = TRUE),\n    color = \"#e09f3e\",\n    linewidth = 1,\n    linetype = 2\n    )\n```\n\n::: {.cell-output-display}\n![](5-grafico-text_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n### Quintis ou grupos\n\nPara desenhar múltiplas linhas basta passar o argumento como um vetor. No caso abaixo eu calculo os quintis do taxa de poupança da base `economics` e sobreponho estas linhas ao histograma.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nquintil <- quantile(economics$psavert, probs = c(0.2, 0.4, 0.6, 0.8))\n\nggplot(economics, aes(x = psavert)) +\n  geom_histogram(bins = 15, color = \"white\") +\n  geom_vline(xintercept = quintil)\n```\n\n::: {.cell-output-display}\n![](5-grafico-text_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\nPor fim, pode-se também passar as linhas como um argumento estético em `color`. No código abaixo eu calculo o número total de listings por ano; no gráfico, cada ano é exibido numa linha com cor diferente.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlisting <- subhousing %>%\n  filter(year < 2015) %>%\n  summarise(total_listing = sum(listings, na.rm = TRUE), .by = \"year\")\n\nggplot(listing) +\n  geom_vline(aes(color = year, xintercept = total_listing)) +\n  scale_color_viridis_c()\n```\n\n::: {.cell-output-display}\n![](5-grafico-text_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n# 2. Desenhando retângulos\n\nAgora vamos aprender a desenhar retângulos usando a função `geom_rect()`. Esta função exige quatro argumentos que servem para desenhar um retângulo no plano cartesiano. O código abaixo apresenta um exemplo simples.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot() +\n  geom_rect(aes(xmin = 1, xmax = 2, ymin = 2, ymax = 3)) +\n  scale_y_continuous(limits = c(0, 4)) +\n  scale_x_continuous(limits = c(0, 4))\n```\n\n::: {.cell-output-display}\n![](5-grafico-text_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\nA função `geom_rect()` aceita argumentos estéticos similares ao `geom_column()` e `geom_histogram()`. Ou seja, pode-se:\n\n-   Alterar a cor da borda do quadrado usando `color`.\n-   Alterar a cor do quadrado em si usando `fill`.\n-   Alterar a transparência do quadrado usando `alpha`.\n\n## PIB e ciclos de recessão\n\nVamos aplicar esta função num exemplo mais interessante. Primeiro vamos baixar a série do PIB brasileiro[^1] do site do Banco Central do Brasil usando a função `gbcbd_get_series()`. O código abaixo, além de baixar a série, também faz um gráfico de linha simples.\n\n[^1]: Mais especificamente, a série trimestral do PIB dessazonalizado a preços de mercado com valores encadeados com base no primeiro trimestre de 1995.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Importa a série do PIB\npib <- gbcbd_get_series(22109, first.date = as.Date(\"1995-01-01\"))\n\nggplot(pib, aes(ref.date, value)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](5-grafico-text_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\nPara mapearmos os ciclos de recessão uso as definições da [CODACE](https://portalibre.fgv.br/codace)[^2]. A tabela indica o início e o final de cada recessão, junto com uma sigla que identifica cada recessão. Eu crio esta tabela usando a função `tribble()`. Esta função é, essencialmente, equivalente a um `data.frame()` convencional, mas permite colocar os dados num formato que fica mais legível[^3].\n\n[^2]: O Comitê de Datação de Ciclos Econômicos (CODACE) organizado pela Fundação Getúlio Vargas (FGV) se reúne periodicamente para datar os ciclos econômicos brasileiros.\n\n[^3]: Este esforço adicional é feito por motivos didáticos. Na prática não é necessário usar a função `tribble`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncodace <- tribble(\n            ~rec_start,               ~rec_end, ~label,\n  #-------------------#----------------------#----------#\n  as.Date(\"1998-01-01\"), as.Date(\"1999-03-31\"), \"FHC-1\",\n  as.Date(\"2001-04-01\"), as.Date(\"2001-12-31\"), \"FHC-2\",\n  as.Date(\"2003-01-01\"), as.Date(\"2003-06-30\"), \"LULA\",\n  as.Date(\"2008-10-01\"), as.Date(\"2009-03-31\"), \"GFR\",\n  as.Date(\"2014-04-01\"), as.Date(\"2016-12-31\"), \"DILMA\",\n  as.Date(\"2020-01-01\"), as.Date(\"2020-06-30\"), \"COVID\"\n)\n```\n:::\n\n\nO código abaixo gera o mesmo gráfico do PIB, mas agora temos retângulos sombreados destacando cada uma das recessões da história econômica recente do Brasil.\n\nComo estou mapeando dados de dois objetos distintos, eu coloco o argumento `data` dentro da respectiva função `geom()`. Isto não é obrigatório, mas acredito que o código fica melhor estruturado desta maneira.\n\nNote o uso do `Inf` para garantir que o retângulo se estenda verticalmente no gráfico de maneira indefinida. Além disso, uso o argumento `alpha` para deixar a região mais transparente.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot() +\n  geom_line(\n    data = pib,\n    aes(x = ref.date, y = value)\n  ) +\n  geom_rect(\n    data = codace,\n    aes(xmin = rec_start, xmax = rec_end, ymin = -Inf, ymax = Inf, group = label),\n    alpha = 0.4\n  )\n```\n\n::: {.cell-output-display}\n![](5-grafico-text_files/figure-html/unnamed-chunk-12-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n# 3. Usando texto\n\nPode-se inserir texto diretamente num gráfico gerado pelo `ggplot` usando a função `annotate`. Esta função posiciona um texto numa posição específica do gráfico.\n\nO exemplo abaixo aproveita uma base de dados bastante popular do `R` chamada `mtcars`. Esta tabela traz algumas informações sobre carros[^4].\n\n[^4]: Para mais informações sobre esta base consulte `help(\"mtcars\")`.\n\nA função `annotate` é bastante simples: os argumentos `x` e `y` especificam a posição do texto e o argumento `label` é o texto propriamente dito. Note que é possível adicionar quebras de linha usando `\\n`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_point() +\n  annotate(\"text\", x = 4, y = 25, label = \"Aqui, um pouco\\nde texto.\")\n```\n\n::: {.cell-output-display}\n![](5-grafico-text_files/figure-html/unnamed-chunk-13-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\nEsta função é útil para criar pequenas caixas de texto no gráfico que podem servir para destacar alguma informação pontual. Ela é especialmente prática quando temos alguma informação que não está dentro de um `data.frame`, até por isso esta função não tem os argumentos usuais `data` e `aes` de todas as outras funções `geom`.\n\nNo exemplo abaixo mostro como é possível escrever em notação matemática usando esta função.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_point() +\n  annotate(\n    \"text\",\n    x = 2,\n    y = 12,\n    label = \"paste(italic(R) ^ 2, \\\" = .75\\\")\",\n    parse = TRUE\n    ) +\n  annotate(\n    \"text\",\n    x = 5,\n    y = 30,\n    label = \"y[t] == phi[1] * y[t-1] + e[t]\",\n    parse = TRUE\n  )\n```\n\n::: {.cell-output-display}\n![](5-grafico-text_files/figure-html/unnamed-chunk-14-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n## Usando geom_text\n\nQuando queremos trabalhar com texto como uma variável num `data.frame` é mais adequado usar a função `geom_text()`. Esta função tem os memos três argumentos obrigatórios da função `annotate()`:\n\n-   `x` - Especifica a posição do texto no eixo-x\n-   `y` - Especifica a posição do texto no eixo-y\n-   `label` - Texto a ser plotado\n\nAlém do básico, também pode-se alterar diversos elementos estéticos usando:\n\n-   `color` - Para alterar a cor do texto.\n-   `family` e `fontface` - Para alterar a fonte do texto ou deixar ele negrito, itálico, etc.\n-   `size` - Para alterar o tamnho do texto.\n-   `alpha` - Para alterar a transparência do texto.\n-   `angle`, `vjust`, `hjust` - Para ajustar o alinhamento horizontal e vertical do texto.\n\nO código abaixo refaz o gráfico acima, mas ao invés de pontos, agora vê-se o nome do modelo de cada automóvel.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(mtcars, aes(x = wt, y = mpg)) +\n  geom_text(aes(label = rownames(mtcars)), size = 3)\n```\n\n::: {.cell-output-display}\n![](5-grafico-text_files/figure-html/unnamed-chunk-15-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\nNo gráfico acima, o eixo-y (`mpg`) é \"milhas por galão\", isto é, quantas milhas o carro consegue percorrer por galão de combustível enquanto o eixo-x (`wt`) é o peso do veículo em milhares de libras. Assim, o Toyota Corolla é um carro leve e eficiente, enquanto o Chrysler Imperial é um carro pesado e ineficiente.\n\nUm problema frequente deste tipo de gráfico é a sobreposição dos nomes. De fato, vale a pena considerar encurtar os nomes ou usar abreviações para atenuar este tipo de problema. Outra opção é usar a extensão `ggrepel`[^5].\n\n[^5]: O pacote {ggrepel} cria pequenos deslocamentos na posição do texto e setas para melhor dispor os dados. Para mais informações veja [o site](https://ggrepel.slowkow.com).\n\n### Exemplo: Estados e Aluguel\n\nA tabela abaixo reúne alguns fatos da PNADC/A mais recente sobre o percentual de apartamentos, em relação ao total de domicílios, e o percentual de imóveis alugados, também em relação ao total de domicílios.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nrented <- tibble::tribble(\n  ~abbrev_state, ~share_apto, ~share_rented, ~name_region, \n  #------------#------------#--------------#------------#      \n           \"RO\",           8,          11.1, \"Norte\", \n           \"AC\",        7.47,          6.93, \"Norte\",\n           \"AM\",        15.8,          7.26, \"Norte\",\n           \"RR\",        14.3,          11.7, \"Norte\", \n           \"PA\",        4.53,          6.39, \"Norte\",\n           \"AP\",        10.7,          6.34, \"Norte\",\n           \"TO\",        3.17,          11.7, \"Norte\", \n           \"MA\",        4.06,          5.74, \"Nordeste\",\n           \"PI\",        4.08,          5.15, \"Nordeste\",\n           \"CE\",        9.85,          9.68, \"Nordeste\",\n           \"RN\",        9.27,          10.8, \"Nordeste\", \n           \"PB\",        11.9,          9.18, \"Nordeste\",\n           \"PE\",        10.4,          9.98, \"Nordeste\",\n           \"AL\",        6.32,          10.0, \"Nordeste\", \n           \"SE\",        12.0,            11, \"Nordeste\",   \n           \"BA\",        12.0,          7.61, \"Nordeste\",\n           \"MG\",        14.0,          10.5, \"Sudeste\", \n           \"ES\",        21.7,          10.7, \"Sudeste\", \n           \"RJ\",        26.8,          10.7, \"Sudeste\", \n           \"SP\",        19.4,          12.7, \"Sudeste\", \n           \"PR\",        11.9,          11.7, \"Sul\", \n           \"SC\",          17,          11.8, \"Sul\", \n           \"RS\",        16.5,          8.46, \"Sul\",\n           \"MS\",        3.67,          11.9, \"Centro Oeste\", \n           \"MT\",        3.29,          12.7, \"Centro Oeste\", \n           \"GO\",        9.88,          13.6, \"Centro Oeste\", \n           \"DF\",        35.4,          17.8, \"Centro Oeste\"\n)\n```\n:::\n\n\nPode-se visualizar este gráfico usando a sigla de cada estado e os números na tabela como a posição do texto. Assim, fica evidente como o DF tem uma proporção grande de apartamentos e de domicílios alugados. Maranhão e Piauí, por outro lado, tem poucos apartamentos e poucos domicílios alugados. Já Goiás tem um percentual relativamente grande de unidades alugadas, apesar de ter quase 90% de casas.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(rented, aes(x = share_apto, y = share_rented)) +\n  geom_text(\n    aes(label = abbrev_state),\n    size = 4\n    )\n```\n\n::: {.cell-output-display}\n![](5-grafico-text_files/figure-html/unnamed-chunk-17-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\nPode-se, naturalmente, mapear uma das variáveis categóricas num elemento estético. No gráfico abaixo, cada região é destaca com uma cor distinta.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(rented, aes(x = share_apto, y = share_rented)) +\n  geom_text(\n    aes(label = abbrev_state, color = as.factor(name_region)),\n    size = 4\n    ) +\n  scale_color_brewer(name = \"Região\", type = \"qual\", palette = 6) +\n  theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](5-grafico-text_files/figure-html/unnamed-chunk-18-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\nPor fim, vale notar que existe uma função equivalente chamada `geom_label`. A única diferença desta função é que ela coloca o texto dentro de um pequeno quadrado com fundo branco.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(rented, aes(x = share_apto, y = share_rented)) +\n  geom_label(\n    aes(label = abbrev_state, color = as.factor(name_region)),\n    size = 4\n    ) +\n  scale_color_brewer(name = \"Região\", type = \"qual\", palette = 6) +\n  theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](5-grafico-text_files/figure-html/unnamed-chunk-19-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n### Trocando a fonte\n\nComo citado acima, é possível modificar a fonte do texto usando o argumento `family`. As fontes disponíveis no R dependem do sistema operacional em que ele está rodando. Para verificar as fontes disponíveis no seu computador você pode tentar uma das duas opções abaixo\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#> Instale o pacote sysfonts se necessário\ninstall.packages(\"sysfonts\")\nlibrary(sysfonts)\n\nsysfonts::font_families()\n#> [1] \"sans\"  \"serif\" \"mono\"\n#> \n\n#> Ou use a função system\navailable_fonts <- system(\"fc-list : family\", intern = TRUE)\navailable_fonts <- available_fonts[order(available_fonts)]\n#> Mostra as primeiras dez fontes encontradas no sistema\navailable_fonts[1:10]\n\n#>  [1] \".Al Bayan PUA\"                                            \n#>  [2] \".Al Nile PUA\"                                             \n#>  [3] \".Al Tarikh PUA\"                                           \n#>  [4] \".Apple Color Emoji UI\"                                    \n#>  [5] \".Apple SD Gothic NeoI,Apple SD 산돌고딕 Neo\"              \n#>  [6] \".Aqua Kana,.Aqua かな\"                                    \n#>  [7] \".Aqua Kana,.Aqua かな,.Aqua Kana Bold,.Aqua かな ボールド\"\n#>  [8] \".Arial Hebrew Desk Interface\"                             \n#>  [9] \".Baghdad PUA\"                                             \n#> [10] \".Beirut PUA\"  \n```\n:::\n\n\nO gráfico abaixo mostra um exemplo de como modificar a fonte do texto. A depender do seu sistema operacional o código pode não funcionar.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(rented, aes(x = share_apto, y = share_rented)) +\n  geom_text(\n    aes(label = abbrev_state),\n    family = \"mono\"\n    )\n```\n\n::: {.cell-output-display}\n![](5-grafico-text_files/figure-html/unnamed-chunk-21-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\nUma solução mais consistente é de usar o pacote `showtext`. [Tenho um post explicando como este pacote funciona](/posts/general-posts/tutorial-showtext/index.qmd). O código abaixo importa a fonte [Montserrat do Google Fonts](https://fonts.google.com/specimen/Montserrat) e aplica no gráfico.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(showtext)\nsysfonts::font_add_google(\"Montserrat\", \"Montserrat\")\nshowtext::showtext_auto()\n\nggplot(rented, aes(x = share_apto, y = share_rented)) +\n  geom_text(\n    aes(label = abbrev_state),\n    family = \"Montserrat\"\n    )\n```\n\n::: {.cell-output-display}\n![](5-grafico-text_files/figure-html/unnamed-chunk-22-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n# Unindo todos os elementos\n\nComo de costume, um dos grandes diferenciais do `ggplot2` é a possibilidade de adicionar elementos aos gráficos sequencialmente.\n\n## Exemplo: PIB e ciclos\n\nPodemos resgatar nosso exemplo do PIB com os ciclos de recessão.\n\nNo código abaixo, uso um pouco de álgebra para plotar o texto no meio da região sombreada.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot() +\n  geom_hline(yintercept = 100) +\n  geom_line(\n    data = pib,\n    aes(x = ref.date, y = value)\n  ) +\n  geom_rect(\n    data = codace,\n    aes(xmin = rec_start, xmax = rec_end, ymin = -Inf, ymax = Inf, group = label),\n    alpha = 0.4\n  ) +\n  geom_text(\n    data = codace,\n    aes(x = (rec_end - rec_start) / 2 + rec_start, y = 180, label = label),\n    size = 3\n  )\n```\n\n::: {.cell-output-display}\n![](5-grafico-text_files/figure-html/unnamed-chunk-23-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n## Exemplo: IPCA\n\nPodemos também mesclar um gráfico de colunas com texto. A tabela traz os valores do IPCA acumulados ano a ano desde 2013.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nipca <- tibble::tribble(\n  ~ano, ~ipca,\n  2013, 5.91,\n  2014, 6.41,\n  2015, 10.67,\n  2016, 6.29,\n  2017, 2.95,\n  2018, 3.75,\n  2019, 4.31,\n  2020, 4.52,\n  2021, 10.06,\n  2022, 5.79\n)\n```\n:::\n\n\nNo gráfico abaixo mostro a variação anual do IPCA com o valor percentual indicado em cima de cada coluna. Note como a função `geom_text()` recebe `y + 0.5` como posição vertical.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(ipca, aes(x = ano, y = ipca)) +\n  #> Desenha a coluna com o valor do IPCA\n  geom_col() + \n  #> Linha horizontal no eixo-e\n  geom_hline(yintercept = 0) +\n  #> Número em cima de cada coluna\n  geom_text(aes(y = ipca + 0.5, label = ipca)) +\n  #> Força o eixo-x a imprimir todos os valores\n  scale_x_continuous(breaks = 2013:2022)\n```\n\n::: {.cell-output-display}\n![](5-grafico-text_files/figure-html/unnamed-chunk-25-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\nUma maneira alternativa de chegar no mesmo resultado é usando o argumento `nudge_y`, que cria um pequeno deslocamento no eixo-y.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(ipca, aes(x = ano, y = ipca)) +\n  geom_col() + \n  geom_hline(yintercept = 0) +\n  #> Usa nudge_y ao invés de ipca + 0.5\n  geom_text(aes(y = ipca, label = ipca), nudge_y = 0.5) +\n  scale_x_continuous(breaks = 2013:2022)\n```\n\n::: {.cell-output-display}\n![](5-grafico-text_files/figure-html/unnamed-chunk-26-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\nAs funções `round`, `paste`, `paste0` e `format` podem ser muito úteis para melhor apresentar resultados numéricos[^6]. Esta funções servem para arredondar números, concatenar strings e formatar números (usando ponto para separar milhar, vírgula para separar decimal, etc.). No código abaixo mostro um passo-a-passo de como usar estas funções para formatar o número em cima de cada coluna.\n\n[^6]: Outra opção interessante é função `glue::glue()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nipca <- ipca %>%\n  mutate(\n    # Arredonda até a primeira casa decimal\n    ipca_label = round(ipca, 1),\n    # Usa vírgula como separador de decimal\n    ipca_label = format(ipca_label, decimal.mark = \",\"),\n    # Coloca '%' no final do string\n    ipca_label = paste0(ipca_label, \"%\")\n  )\n\nggplot(ipca, aes(x = ano, y = ipca)) +\n  geom_col() + \n  geom_hline(yintercept = 0) +\n  geom_text(aes(y = ipca + 0.5, label = ipca_label)) +\n  scale_x_continuous(breaks = 2013:2022)\n```\n\n::: {.cell-output-display}\n![](5-grafico-text_files/figure-html/unnamed-chunk-27-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n## Exemplo: Demografia\n\nA tabela abaixo mostra a representatividade de cada grande grupo demográfico na população brasileira aos longo dos anos. Aqui, usam-se as seguintes definições: população jovem (14 anos ou menos); população adulta (de 15 a 64 anos); população idosa (65 anos ou mais). Os valores estão em percentuais.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntbl_demographics <- tribble(\n  ~year, ~young, ~adult, ~elder,\n  #----#-------#-------#-------#\n   1950, 0.4246, 0.5515, 0.0239,\n   1960, 0.4400, 0.5338, 0.0261,\n   1970, 0.4284, 0.5400, 0.0315,\n   1980, 0.3859, 0.5763, 0.0377,\n   1990, 0.3545, 0.6012, 0.0442,\n   2000, 0.3011, 0.6442, 0.0545,\n   2010, 0.2499, 0.6817, 0.0683,\n   2020, 0.2099, 0.6986, 0.0914\n)\n```\n:::\n\n\nAntes de visualizar os dados é preciso converter esta tabela para um formato longitudinal, onde cada linha representa um ano-grupo, isto é, cada linha indica o share da população de determinado grupo da população num determinado ano. Para isto uso a função `pivot_longer()`. Além disso eu transformo a coluna `age_group` num factor ordenado para melhorar a visualização.\n\nNo exemplo abaixo eu também ajusto o dado da coluna `share`: eu multiplico o valor por 100, arredondo até a primeira casa decimal, uso a vírgula como separador de decimal e coloco um sinal de \"%\" após o número.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndemo <- tbl_demographics %>%\n  pivot_longer(\n    cols = young:elder,\n    names_to = \"age_group\",\n    values_to = \"share\"\n  ) %>%\n  mutate(\n    age_group = factor(age_group, levels = c(\"elder\", \"adult\", \"young\")),\n    # Arredonda na primeira casa decimal\n    share_label = round(share * 100, 1),\n    # Usa vírgula como separador de decimal\n    share_label = format(share_label, decimal.mark = \",\"),\n    # Coloca '%' no final do string\n    share_label = paste0(share_label, \"%\")\n    )\n```\n:::\n\n\nPara montar o gráfico eu utilizo o argumento `position_stack()`, já apresentado no post introdutório sobre gráficos de coluna. A função `geom_text()` aceita o mesmo argumento; note que coloco o valor `vjust = 0.5`. Este valor indica que desejo que o texto fica exatamente no meio da coluna, no seu respectivo grupo.\n\nOutras opções seriam: `vjust = 0` para colocar o valor na base da coluna ou `vjust = 1` para colocar o valor no topo da coluna.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(demo, aes(x = year, y = share, fill = age_group)) +\n  geom_col(position = position_stack()) +\n  geom_hline(yintercept = 0) +\n  geom_text(aes(label = share_label), position = position_stack(vjust = 0.5)) +\n  scale_x_continuous(breaks = seq(1950, 2020, 10)) +\n  theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](5-grafico-text_files/figure-html/unnamed-chunk-30-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n## Exemplo: carros (de novo...)\n\nPor fim, monto mais um exemplo de como combinar gráficos de coluna com texto. No gráfico abaixo eu mostro a eficiência (milhas por galão) de um subconjunto de carros (os que tem 4 cilindradas). Além disso, eu ordeno o nome dos carros pela variável `mpg`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntbl_cars <- mtcars %>%\n  filter(cyl == 4) %>%\n  mutate(\n    name_car = rownames(.),\n    name_car = factor(name_car),\n    name_car = forcats::fct_reorder(name_car, mpg)\n    ) %>%\n  select(name_car, mpg)\n```\n:::\n\n\nUsando o `geom_text()` eu consigo plotar o nome do modelo dentro da coluna assim como o respectivo valor de `mpg`. Note como uso `fontface = 'bold'` para deixar o valor numérico em negrito.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(tbl_cars, aes(x = name_car, y = mpg)) +\n  geom_col(fill = \"#186177\") +\n  geom_hline(yintercept = 0) +\n  geom_text(\n    aes(y = 1, label = name_car),\n    color = \"#F9F7F3\",\n    hjust = 0) +\n  geom_text(\n    aes(y = mpg - 2, label = mpg),\n    color = \"#F9F7F3\",\n    fontface = \"bold\") +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](5-grafico-text_files/figure-html/unnamed-chunk-32-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\nInfelizmente, o gráfico acaba sobrecarregado com informação redundante, mas veremos como controlar os aspectos estéticos do gráfico em si (e.g. cor do fundo, texto nos eixos, etc.) num post futuro.\n\n# Resumo\n\nNeste post, apresentei algumas estratégias para destacar informação visualmente no gráfico. Vimos como\n\n-   Desenhar linhas com `geom_vline()`, `geom_hline()` e `geom_abline()`.\n-   Destacar partes do gráfico com `geom_rect()`.\n-   Destacar informações numéricas e texto usando `geom_text()` e `annotate()`.\n\nÉ muito útil ter estas funções no seu ferramental, pois elas ajudam a criar visualizações diferenciadas e destacam informações importantes de maneira intuitiva. Em particular, eu uso estas funções frequentemente no meu dia a dia.\n",
    "supporting": [
      "5-grafico-text_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}