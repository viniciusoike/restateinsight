{
  "hash": "6f42968970ec35520da50b2393228c73",
  "result": {
    "markdown": "---\ntitle: 'Fundamentos: gráfico de linha'\ndate: '2023-07-27'\ncategories: ['data-visualization', 'ggplot2', 'tutorial-R']\ndescription: \"Gráficos de linha são frequentemente usados para representar séries de tempo, isto é, valores que mudam ao longo do tempo. Estes gráficos revelam a evolução de uma variável ao longo do tempo.\"\ntitle-block-banner: true\nimage: \"/static/ggplot2_line.png\"\nimage-alt: \"/static/ggplot2_line.png\"\nexecute: \n  message: false\n  warning: false\nformat:\n  html:\n    code-fold: false\n    code-tools: true\nfreeze: true\ndraft: true\n---\n\n\n\n\n# Gráfico de Linha\n\nGráficos de linha são frequentemente usados para representar séries de tempo, isto é, valores que mudam ao longo do tempo. Estes gráficos revelam a evolução de uma variável ao longo do tempo. O `ggplot` oferece alguma variedade de funções para este fim, mas a mais comum é a `geom_line()`. Este `geom` exige argumentos tanto para o eixo-x como para o eixo-y. Em geral, o eixo-x representa o tempo e o eixo-y o valor da variável de interesse.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](4-grafico-de-linha_files/figure-html/plot-line-poster-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nNeste post vamos aprender a montar gráficos de linha usando o `ggplot2` no R. Primeiro vamos fazer um exemplo simples para enxergar a dinâmica da taxa de poupança nos EUA. Depois, vamos entender como customizar o gráfico.\n\nAlém disso, vamos importar séries do Banco Central para fazer alguns exemplos aplicados usando o pacote `GetBCBData`.\n\n# R\n\nAntes de iniciar precisamos carregar o pacote `ggplot2`, que traz as funções necessárias para montar os gráficos. Adicionalmente, vamos carregar o pacote `GetBCBData`, que utiliza a API do [Sistema Gerador de Séries Temporais](https://www3.bcb.gov.br/sgspub/localizarseries/localizarSeries.do?method=prepararTelaLocalizarSeries) (SGS) do Banco Central do Brasil para baixar séries de tempo econômicas no R\n\nCaso os pacotes não estejam instalados é preciso executar primeiro o código abaixo.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Instala os pacotes necessários\ninstall.packages(c(\"ggplot2\", \"GetBCBData\"))\n```\n:::\n\n\nPara carregar os pactoes utilizamos a função `library`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Carrega o pacote ggplot2\nlibrary(ggplot2)\n# Carrega o pacote GetBCBData\nlibrary(GetBCBData)\n```\n:::\n\n\nAlém de servir como um repositório de funções, alguns pactoes também trazem bases de dados consigo. Neste exemplo vamos utilizar a base `\"economics\"` do pacote `ggplot2`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata(\"economics\")\n```\n:::\n\n\nPara consultar as bases de dados disponíveis basta utilizar o comando `data()` sem nenhum argumento como no código abaixo\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndata()\n```\n:::\n\n\n## ggplot2\n\nO pacote `ggplot2` segue uma sintaxe bastante consistente, que permite \"somar\" elementos visuais sobre um mesmo gráfico. Isto permite que se crie uma infinidade de gráficos complexos a partir de elementos simples. Os elementos visuais são todos chamados por funções `geom_*`. Neste primeiro exemplo vamos focar na função `geom_line()` que desenha linhas. Estes elementos são todos somados de maneira intuitiva usando o sinal de soma `+`.\n\nEssencialmente, temos os seguintes elementos principais:\n\n1.  *Dados* - nossa tabela de dados.\n2.  *Função `aes()`* - que transforma os dados em objetos visuais.\n3.  *Objeto geométrico (`geom`)* - que escolhe qual o formato destes objetos visuais.\n\nEstes elementos são combinados numa sintaxe recorrente. A função `ggplot` tipicamente tem apenas dois elementos: `data` e `aes`. O argumento `data` indica o nome da base de dados. Já a função `aes` é a que indica como transformar os dados (as colunas da base de dados) em elementos visuais. Nos casos mais simples, esta função serve para indicar qual é o nome da variável `x` e qual é o nome da variável `y`.\n\nAdicionamos uma função `geom` nesta chamada inicial como no exemplo abaixo.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = dados, aes(x = varivel_x, y = variavel_y)) +\n  geom_line()\n```\n:::\n\n\n## Gráfico de linha\n\nPara construir um gráfico de linha precisamos, em geral, de apenas dois arguementos: um argumento `x` que é o nome da variável no eixo-x (comumemente, o tempo) e um argumento `y` que é o nome da variável no eixo-y (comumemente, a variável numérica).\n\nVamos utilizar a base `economics` que é carregada conjuntamente com o pacote `ggplot2`. Esta base traz a evolução de algumas variáveis econômicas ao longo do tempo.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Carrega a base de dados (caso ainda não tenha feito)\ndata(\"economics\")\n# Visualiza as primeiras linhas da base de dados\nhead(economics)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 6\n  date         pce    pop psavert uempmed unemploy\n  <date>     <dbl>  <dbl>   <dbl>   <dbl>    <dbl>\n1 1967-07-01  507. 198712    12.6     4.5     2944\n2 1967-08-01  510. 198911    12.6     4.7     2945\n3 1967-09-01  516. 199113    11.9     4.6     2958\n4 1967-10-01  512. 199311    12.9     4.9     3143\n5 1967-11-01  517. 199498    12.8     4.7     3066\n6 1967-12-01  525. 199657    11.8     4.8     3018\n```\n:::\n:::\n\n\nNote que a primeira coluna à esquerda (`date`) traz as datas. A coluna `psavert` é a taxa de poupança individual, mensurada em proporção à renda disponível. Podemos visualizar como se altera a taxa de poupança ao longo do tempo.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = economics, aes(x = date, y = psavert)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](4-grafico-de-linha_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nVamos quebrar o código acima em detalhes. Primeiro, usamos a função `ggplot()` para declarar que queremos fazer um gráfico. Colocamos os argumentos `data` e `aes` dentro desta função. O argumento `data` deve ser o nome da nossa base de dados: neste caso, `data = economics`.\n\nO argumento `aes` é o que transforma as variáveis (as colunas da base de dados) em elementos visuais. Neste caso ele vai transformar o tempo e a taxa de poupança em algum elemento visual. Escolhemos `aes(x = date, y = psavert)`.\n\nEspecificamos qual deve ser o elemento visual somando a função `geom_line()` no código inicial. Esta função indica que queremos um gráfico de linhas.\n\nUnindo todas estes elementos temos um código enxuto que plota o gráfico. Vemos que a taxa de poupança nos EUA apresenta uma tendência de queda a partir da segunda metade dos anos 1970 que é revertida somente após a primeira metade dos anos 2000.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(\n  # Especifica o nome da base de dados\n  data = economics,\n  # Indica como devem ser mapeadas as variáveis nos eixos x e y\n  aes(x = date, y = psavert)) +\n  # Especifica que queremos um gráfico de linha\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](4-grafico-de-linha_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n### Opções estéticas\n\nPodemos customizar um gráfico de `ggplot` modificando os seus **elementos estéticos**. Um elemento estético pode assumir dois tipos de valor: constante ou variável. Um valor constante é um número ou texto, enquanto uma variável é uma coluna da nossa base de dados.\n\nHá quatro opções estéticas básicas para gráficos de linha: `color`, `alpha`, `linewidth` e `linetype`.\n\n-   `color` - Define a cor da linha\n-   `alpha` - Define o nível de transparência da linha\n-   `linewidth` - Define a espessura da linha\n-   `linetype` - Define o tracejado da linha\n\n### Cores\n\nUtilizamos o argumento `color` dentro da função `geom_line` para variar a cor da linha no gráfico. Pode-se escolher a cor da linha tanto por nome como por código hexadecimal. Por padrão, a função `geom_line` utiliza `color = \"black\"`. No exemplo abaixo utilizo um tom de azul chamado `\"steelblue\"`. Uma lista completa de cores (por nome) [está disponível aqui](http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Gráfico de linha\nggplot(data = economics, aes(x = date, y = psavert)) + \n  # Altera a cor da linha\n  geom_line(color = \"steelblue\")\n```\n\n::: {.cell-output-display}\n![](4-grafico-de-linha_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nTambém é possível chamar as cores via código hexadecimal como no exemplo abaixo.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Gráfico de linha\nggplot(data = economics, aes(x = date, y = psavert)) +\n  # Altera a cor da linha\n  geom_line(color = \"#e76f51\")\n```\n\n::: {.cell-output-display}\n![](4-grafico-de-linha_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n### Alpha\n\nO argumento `alpha` controla o nível de transparência da cor e varia de 0 a 1, em que `alpha = 0` é perfeitamente transparente e `alpha = 1` é nada transparente. Por padrão, a função `geom_line` define que `alpha = 1`. Na prática, são raros os casos em que vale alterar este argumento. No exemplo abaixo definimos `alpha = 0.5`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = economics, aes(x = date, y = psavert)) +\n  geom_line(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](4-grafico-de-linha_files/figure-html/unnamed-chunk-11-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n### Espessura da linha\n\nO argumento `linewidth` controla a espessura da linha. No exemplo abaixo defino `linewidth = 1` dentro da função `geom_line()`. Na prática, não recomendo escolher um valor de `linewidth` acima de 1 pois a linha se torna muito espessa.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = economics, aes(x = date, y = psavert)) + \n  geom_line(linewidth = 1)\n```\n\n::: {.cell-output-display}\n![](4-grafico-de-linha_files/figure-html/unnamed-chunk-12-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nO gráfico abaixo compara alguns tamanhos diferentes de espessura de linha. Note que é possível especificar valores não-inteiros como 0,5. Para evitar de repetir o mesmo código várias vezes, guardo a chamada inicial do `ggplot` em um objeto chamado `p` (de *plot*).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np <- ggplot(data = economics, aes(x = date, y = psavert))\n\n# Espessura = 0.5\np + geom_line(linewidth = 0.5)\n# Espessura = 1\np + geom_line(linewidth = 1)\n# Espessura = 2\np + geom_line(linewith = 2)\n# Espessura = 5\np + geom_line(linewidth = 5)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](4-grafico-de-linha_files/figure-html/unnamed-chunk-14-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n### Tracejado da linha\n\nO argumento `linetype` controla o tracejado da linha. Por padrão, a função `geom_line()` utiliza `linetype = 1`, mas podemos escolher valores distintos. No exemplo abaixo usamos `linetype = 2`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = economics, aes(x = date, y = psavert)) + \n  geom_line(linetype = 2)\n```\n\n::: {.cell-output-display}\n![](4-grafico-de-linha_files/figure-html/unnamed-chunk-15-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nAbaixo pode-se ver a diferença entre cada uma delas.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](4-grafico-de-linha_files/figure-html/unnamed-chunk-16-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Combinando elementos\n\nComo foi aludido no início do post, parte da mágica do `ggplot` é de poder somar elementos ao mesmo gráfico. Isto permite uma grande flexibilidade na hora de montar nossas visualizações. Uma combinação bastante efetiva é juntar um gráfico de linha com um gráfico de pontos.\n\nPrimeiro, vamos importar a série do consumo de energia elétrica residencial no Brasil. Podemos importar séries de tempo do site do Banco Central do Brasil usando a função `gbcbd_get_series` do pacote `GetBCBData`.\n\nPara importar uma série de tempo precisamos informar apenas: (1) o código da série pelo argumento `id`; e (2) a data de início da extração pelo argumento `first.date` (no formato YYYY-MM-DD).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Import a série de consumo de energia elétrica residencial\nconsumo <- gbcbd_get_series(id = 1403, first.date = as.Date(\"2014-01-01\"))\n```\n:::\n\n\nO gráfico abaixo combina um `geom_line()` com um `geom_point()` para representar tanto os pontos de observação como a linha que une os pontos.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = consumo, aes(x = ref.date, y = value)) +\n  # Linha da série\n  geom_line() +\n  # Pontos sinalizando as observações\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](4-grafico-de-linha_files/figure-html/unnamed-chunk-18-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Começando o gráfico do zero\n\nOs gráficos de linha gerados pelo `ggplot2` não começam do zero no eixo-y. Isto pode ser um problema e, visualmente, criar a ilusão de que há mais volatilidade nos dados do que realmente existe.\n\nHá muitas formas de forçar o gráfico a iniciar no zero. Uma das mais efetivas é incluir uma linha horizontal no eixo ($y = 0$). Pode-se desenhar esta linha horizontal com a função `geom_hline()` (onde o \"hline\" sinaliza \"horizontal line\", *linha horizontal*).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = consumo, aes(x = ref.date, y = value)) +\n  # Linha horizontal y = 0\n  geom_hline(yintercept = 0) +\n  # Linha da série\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](4-grafico-de-linha_files/figure-html/unnamed-chunk-19-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nOutra forma de chegar no mesmo resultado é manipular o eixo-y para forçá-lo a iniciar no zero. No exemplo abaixo utilizamos a função `scale_y_continuous()`. Esta função controla todos os aspectos visuais da escala no eixo-y. O sufixo `_continuous` indica que a variável no eixo-y é contínua.\n\nPara redefinir os limites do eixo-y variamos o argumento `limits` que aceita um par de valores. O primeiro valor é o limite inferior e o segundo valor é o limite superior. Por padrão ambos são definidos como `NA`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = consumo, aes(x = ref.date, y = value)) +\n  # Linha da série\n  geom_line() +\n  # Manipular o eixo-y para inicar no zero\n  scale_y_continuous(limits = c(0, NA))\n```\n\n::: {.cell-output-display}\n![](4-grafico-de-linha_files/figure-html/unnamed-chunk-20-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Séries de tempo em degraus\n\nAlgumas séries de tempo variam de maneira \"descontínua\" no tempo. É o caso, por exemplo, da taxa SELIC, que é periodicamente definida como uma meta a ser perseguida pelo Banco Central. Neste caso, faz sentido ressaltar isto fazendo um gráfico que varia em \"degraus\".\n\nA função `geom_step()` faz este tipo de gráfico e possui os mesmos argumentos que a função `geom_line()`. O gráfico abaixo mostra a variação da taxa SELIC (meta) nos últimos anos.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Importa a série diária da SELIC (meta) anualizada\nselic <- gbcbd_get_series(id = 1178, first.date = as.Date(\"2016-01-01\"))\n\nggplot(data = selic, aes(x = ref.date, y = value)) +\n  geom_step()\n```\n\n::: {.cell-output-display}\n![](4-grafico-de-linha_files/figure-html/unnamed-chunk-21-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Usando cores para representar variáveis\n\nComo de costume, as características estéticas do gráfico podem refletir grupos de variáveis. No caso de gráficos de linha é comum querer representar séries de tempo distintas com cores diferentes.\n\nVamos importar três séries de tempo: o consumo de energia elétrica comercial (1402), residencial (1403) e industrial (1404). Todas as séries são mensais e são importadas a partir de janeiro de 2014.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Importa as séries mensais do consumo de energia elétrica\nseries <- gbcbd_get_series(\n  id = c(1402, 1403, 1404),\n  first.date = as.Date(\"2014-01-01\")\n  )\n```\n:::\n\n\nOs dados são automaticamente formatados no padrão longitudinal, em que cada linha representa uma observação no tempo de uma série em particular. Este é o formato ideal para trabalhar com visualizações em `ggplot`, onde os dados estão \"empilhados\".\n\nA coluna `ref.date` indica a data, a coluna `series.name` identifica o id da série e a coluna `value` representa o valor desta observação.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-condensed table-hover\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:center;\"> ref.date </th>\n   <th style=\"text-align:center;\"> value </th>\n   <th style=\"text-align:center;\"> id.num </th>\n   <th style=\"text-align:center;\"> series.name </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:center;\"> 2014-01-01 </td>\n   <td style=\"text-align:center;\"> 7745 </td>\n   <td style=\"text-align:center;\"> 1402 </td>\n   <td style=\"text-align:center;\"> id = 1402 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2014-01-01 </td>\n   <td style=\"text-align:center;\"> 11798 </td>\n   <td style=\"text-align:center;\"> 1403 </td>\n   <td style=\"text-align:center;\"> id = 1403 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2014-01-01 </td>\n   <td style=\"text-align:center;\"> 14537 </td>\n   <td style=\"text-align:center;\"> 1404 </td>\n   <td style=\"text-align:center;\"> id = 1404 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2014-02-01 </td>\n   <td style=\"text-align:center;\"> 8204 </td>\n   <td style=\"text-align:center;\"> 1402 </td>\n   <td style=\"text-align:center;\"> id = 1402 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2014-02-01 </td>\n   <td style=\"text-align:center;\"> 11879 </td>\n   <td style=\"text-align:center;\"> 1403 </td>\n   <td style=\"text-align:center;\"> id = 1403 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2014-02-01 </td>\n   <td style=\"text-align:center;\"> 15107 </td>\n   <td style=\"text-align:center;\"> 1404 </td>\n   <td style=\"text-align:center;\"> id = 1404 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nVamos mapear a coluna `series.name` nas cores das linhas. Para especificar isto utilizamos a função `aes`, que serve para transformar dados em elementos visuais. Da mesma forma como mapeamos a coluna `ref.date` e `value` numa linha, agora mapeamos `series.name` nas cores do gráfico.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = series, aes(x = ref.date, y = value)) +\n  geom_line(\n    # Indica que a variável series.name deve ser mapeada nas cores das linhas\n    aes(color = series.name))\n```\n\n::: {.cell-output-display}\n![](4-grafico-de-linha_files/figure-html/unnamed-chunk-24-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nAs escolhas de cores padrão nem sempre são satisfatórias. Para modificar as cores utilizamos a função `scale_color_manual()` que também nos dá controle sobre a legenda do gráfico.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = series, aes(x = ref.date, y = value)) +\n  geom_line(aes(color = series.name)) +\n  # Controla as cores e a legenda\n  scale_color_manual(\n    # Título da legenda (opcional)\n    name = \"Consumo de energia\",\n    # Nome das séries (opcional)\n    labels = c(\"Comercial\", \"Residencial\", \"Industrial\"),\n    # Cores das linhas\n    values = c(\"#264653\", \"#e9c46a\", \"#e76f51\"),\n  )\n```\n\n::: {.cell-output-display}\n![](4-grafico-de-linha_files/figure-html/unnamed-chunk-25-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nVale notar que existem vários pacotes e funções com cores pré-definidas que simplificam o processo manual de escolher as cores. O exemplo mais simples é o `scale_color_brewer()` que utiliza as paletas de cores do [Color Brewer](https://colorbrewer2.org).\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = series, aes(x = ref.date, y = value)) +\n  geom_line(aes(color = series.name)) +\n  # Controla as cores e a legenda\n  scale_color_brewer(\n    # Título da legenda (opcional)\n    name = \"Consumo de energia\",\n    # Nome das séries (opcional)\n    labels = c(\"Comercial\", \"Residencial\", \"Industrial\"),\n    # Tipo (\"qual\" - qualitativo, \"div\" - divergente ou \"seq\" - sequencial)\n    type = \"qual\",\n    # Escolha da paleta\n    palette = 6\n  )\n```\n\n::: {.cell-output-display}\n![](4-grafico-de-linha_files/figure-html/unnamed-chunk-26-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nPor padrão, a legenda das cores é colocada no lado direito do gráfico. Para modificar a sua posição usamos a função `theme()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = series, aes(x = ref.date, y = value)) +\n  geom_line(aes(color = series.name)) +\n  scale_color_brewer(\n    name = \"Consumo de energia\",\n    labels = c(\"Comercial\", \"Residencial\", \"Industrial\"),\n    type = \"qual\",\n    palette = 6) +\n  theme(\n    # Define a posição da legenda (top, bottom, right ou left)\n    legend.position = \"bottom\"\n  )\n```\n\n::: {.cell-output-display}\n![](4-grafico-de-linha_files/figure-html/unnamed-chunk-27-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nDa mesma forma que modificamos a cor das linhas, podemos variar outros aspectos estéticos como, por exemplo, o tracejado da linha de cada série. Este tipo de modificação pode ser útil no caso de uma publicação que vai ser visualizada ou impressa em escala de cinza.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = series, aes(x = ref.date, y = value)) +\n  geom_line(\n    # Cada série é desenhada com um tracejado diferente\n    aes(linetype = series.name)\n    ) +\n  # Controla a legenda das séries\n  scale_linetype_discrete(\n    # Título da legenda (opcional)\n    name = \"Consumo de energia\",\n    # Nome das séries (opcional)\n    labels = c(\"Comercial\", \"Residencial\", \"Industrial\")\n  )\n```\n\n::: {.cell-output-display}\n![](4-grafico-de-linha_files/figure-html/unnamed-chunk-28-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\nPor fim, podemos modificar elementos estéticos de dois `geoms` no mesmo gráfico. No exemplo abaixo tanto o tracejado da linha como o formato do ponto variam segundo a série.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = series, aes(x = ref.date, y = value)) +\n  geom_line(aes(linetype = series.name)) +\n  geom_point(aes(shape = series.name)) +\n  # Controla a legenda das séries\n  scale_linetype_discrete(\n    # Título da legenda (opcional)\n    name = \"Consumo de energia\",\n    # Nome das séries (opcional)\n    labels = c(\"Comercial\", \"Residencial\", \"Industrial\")\n  ) +\n  scale_shape_discrete(\n    # Título da legenda (opcional)\n    name = \"Consumo de energia\",\n    # Nome das séries (opcional)\n    labels = c(\"Comercial\", \"Residencial\", \"Industrial\")\n  )\n```\n\n::: {.cell-output-display}\n![](4-grafico-de-linha_files/figure-html/unnamed-chunk-29-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Renomeando os eixos do gráfico\n\nÉ muito importante que um gráfico seja o mais auto-explicativo possível. Para isso precisamos inserir informações relevantes como título, subtítulo e fonte.\n\nA função `labs()` permite facilmente renomear os eixos do gráfico. Os argumentos principais são os abaixo.\n\n-   `title` - título do gráfico\n-   `subtitle` - subtítulo do gráfico\n-   `x` - título do eixo-x (horizontal)\n-   `y` - título do eixo-y (vertical)\n-   `caption` - legenda abaixo do gráfico (em geral, a fonte)\n\nNo caso de gráficos de linha é muito comum omitir o nome do eixo-x, pois ele geralmente representa o tempo. Para omitir o nome de qualquer eixo basta defini-lo como `NULL`.\n\nNovamente, utilizamos o sinal de soma para adicionar estes elementos ao gráfico.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = consumo, aes(x = ref.date, y = value)) +\n  # Linha da série\n  geom_line() +\n  # Define os elementos textuais do gráfico\n  labs(\n    title = \"Aumento gradual na demanda por energia elétrica\",\n    subtitle = \"Consumo residencial de energia elétrica no Brasil.\",\n    # Omite o título do eixo-x\n    x = NULL,\n    y = \"GWh\",\n    caption = \"Fonte: Eletrobras.\"\n    )\n```\n\n::: {.cell-output-display}\n![](4-grafico-de-linha_files/figure-html/unnamed-chunk-30-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Resumo\n\nNeste post aprendemos o básico da estrutura sintática do `ggplot` e conseguimos montar gráficos de linha sofisticados usando poucas linhas de código. Em qualquer gráfico temos três elementos básicos\n\n1.  *Dados* - nossa tabela de dados.\n2.  *Função `aes()`* - que transforma os dados em objetos visuais.\n3.  *Objeto geométrico (`geom`)* - que escolhe qual o formato destes objetos visuais.\n\nAlguns pontos de destaque:\n\n1.  Utilize cores diferentes para séries distintas usando `aes(color = ...)`.\n2.  Combine elementos como linhas e pontos somando os \"geoms\".\n3.  Comece o gráfico no zero utilizando ou `geom_hline(yintercept = 0)` ou `scale_y_continuous(limits=c(0,NA))`.\n\nSeguindo esta lógica e somando os objetos podemos criar belos gráficos.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Importa as séries mensais do consumo de energia elétrica\nseries <- gbcbd_get_series(\n  id = c(1402, 1403, 1404),\n  first.date = as.Date(\"2019-01-01\")\n  )\n\nggplot(data = series, aes(x = ref.date, y = value)) +\n  geom_hline(yintercept = 0) +\n  geom_line(\n    aes(color = series.name),\n    linewidth = 1) +\n  geom_point(\n    aes(color = series.name),\n    size = 2) +\n  scale_color_manual(\n    name = \"Consumo de Energia\",\n    labels = c(\"Comercial\", \"Residencial\", \"Industrial\"),\n    values = c(\"#264653\", \"#e9c46a\", \"#e76f51\")) +\n  labs(\n    title = \"Recuperação do consumo de energia pós-pandemia\",\n    subtitle = \"Consumo mensal de energia elétrica segundo a finalidade.\",\n    x = NULL,\n    y = \"(GWh)\",\n    caption = \"Fonte: Eletrobras.\") +\n  theme(\n    legend.position = \"bottom\"\n  )\n```\n\n::: {.cell-output-display}\n![](4-grafico-de-linha_files/figure-html/unnamed-chunk-31-1.png){fig-align='center' width=80%}\n:::\n:::\n",
    "supporting": [
      "4-grafico-de-linha_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}