{
  "hash": "a656cf2d46ee69c7c4328293ce2a1588",
  "result": {
    "markdown": "---\ntitle: \"Importando dados em PDF no R\"\ndate: \"2024-04-07\"\ndescription: \"Neste post vou mostrar uma solução para importar dados em formato PDF de maneira fácil e prática usando `R`. Arquivos PDF não são um típico formato de armazenamento de dados, como `csv`, PDFs são relatórios que combinam texto, imagens, tabelas, etc. Ainda assim, não é incomum receber tabelas de dados salvas dentro de arquivos PDF.\"\ncategories: ['data-science', 'web-scraping', 'tutorial-R']\nexecute: \n  message: false\n  warning: false\n---\n\n\n# Importando dados em PDF\n\nTrabalhar com dados e visualizar dados, muitas vezes, são objetivos que não se conciliam facilmente. Uma tabela, otimizada para leitura humana, dificilmente será a mais apropriada para análise de dados. De maneira geral, a maior parte dos dados que se encontra são sujos, num sentido amplo. Isto não significa que estes dados estejam errados, ou com algum tipo de imprecisão; quer dizer que os dados não estão num formato tabular, apropriado para a análise de dados.\n\nTalvez um dos formatos mais frustrantes para se consumir dados seja o PDF. Arquivos PDF não são um típico formato de armazenamento de dados, como CSV, XLSX, SAV, etc. PDFs são relatórios que combinam texto, imagens, tabelas, fórmulas, etc. Ainda assim, não é incomum receber tabelas de dados salvas dentro de arquivos PDF.\n\n![](images/PDF_file_icon.svg){fig-align=\"center\" width=\"240\"}\n\nNeste post vou mostrar uma solução para importar dados em formato PDF de maneira fácil e prática usando `R`.\n\n## tabulizer\n\nO pacote `tabulizer` oferece funções simples para importar tabelas de dados que estão salvas em formato PDF. Como o formato PDF é muito flexível e diverso, não é possível garantir que o `tabulizer` funcione sempre. Além disso, como veremos adiante, o processo de limpeza dos dados é bastante artesanal, variando caso a caso.\n\n### Composição religiosa por país\n\nComo exemplo, vamos importar dados sobre a composição religiosa de cada país. A tabela provém do [Pew Research Center](https://www.pewresearch.org/religion/2012/12/18/global-religious-landscape-exec/) e pode ser baixada no [seguinte link](https://assets.pewresearch.org/wp-content/uploads/sites/11/2012/12/globalReligion-tables.pdf). Mais recentemente, foi disponibilizada uma [versão interativa destes dados](https://www.pewresearch.org/religion/interactives/religious-composition-by-country-2010-2050/), com uma opção mais simples de consumo. Mas, para seguir os objetivos deste post, vamos seguir com o arquivo PDF.\n\nA imagem abaixo mostra o começo da tabela em PDF. A tabela é dividida em 6 páginas e tem dez colunas.\n\n![](images/Screenshot 2024-04-09 at 11.04.31.png){fig-align=\"center\"}\n\n### Importando\n\nAbaixo listo os pacotes necessários para este tutorial.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tabulizer)\nlibrary(dplyr)\nlibrary(tidyr, include.only = \"pivot_longer\")\nlibrary(janitor)\nlibrary(stringr)\nlibrary(countries, include.only = \"country_name\")\n```\n:::\n\n\nO primeiro passo é baixar os dados e importar a tabela. Note que seria possível fazer isto de maneira mais automatizada usando `download.file`, criando um arquivo temporário, etc. Contudo, como trata-se de um dado estático, que será consumido uma única vez, acaba sendo mais simples baixá-lo manualmente. Para ler as tabelas do PDF usa-se a função `extract_tables()`. No código abaixo eu utilizo o pacote `here`, que não é essencial, mas é recomendável. Para mais sobre o pacote [veja 'Escrevendo paths relativos com here'](https://restateinsight.com/posts/general-posts/2023-09-comandos-simples/#escrevendo-paths-relativos-com-here).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# path fake, use o seu path\npath = here::here(\"project/data/globalReligion-tables.pdf\")\ntables = extract_tables(path)\n```\n:::\n\n\n\n\nO resultado é uma lista de seis elementos (um para cada página). Pode-se ver também que houve algum problema na hora de importar os dados. Como comentei, o padrão PDF não é apropriado para compatilhamento de dados; inevitavelmente, o processo de importação e limpeza será caso a caso.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(tables)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 6\n $ : chr [1:40, 1:10] \"\" \"COUNTRY\" \"Afghanistan\" \"Albania\" ...\n $ : chr [1:40, 1:10] \"ayman Islands\" \"entral African Republic\" \"had\" \"hannel Islands\" ...\n $ : chr [1:40, 1:10] \"reece\" \"reenland\" \"renada\" \"uadeloupe\" ...\n $ : chr [1:40, 1:10] \"uxembourg\" \"acau\" \"adagascar\" \"alawi\" ...\n $ : chr [1:40, 1:10] \"apua New Guinea\" \"araguay\" \"eru\" \"hilippines\" ...\n $ : chr [1:41, 1:10] \"weden\" \"witzerland\" \"yria\" \"aiwan\" ...\n```\n:::\n:::\n\n\n### Limpeza dos dados\n\nOlhando as primeiras linhas do primeiro elemento, vemos que o cabeçalho foi importado em duas linhas distintas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntables[[1]][1:5, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1]          [,2]         [,3]        [,4]      [,5]       [,6]     \n[1,] \"\"            \"COUNTRY\"    \"PERCENT\"   \"PERCENT\" \"PERCENT\"  \"PERCENT\"\n[2,] \"COUNTRY\"     \"POPULATION\" \"CHRISTIAN\" \"MUSLIM\"  \"UNAFFIL.\" \"HINDU\"  \n[3,] \"Afghanistan\" \"31,410,000\" \"0.1 %\"     \"99.7 %\"  \"< 0.1 %\"  \"< 0.1 %\"\n[4,] \"Albania\"     \"3,200,000\"  \"18.0\"      \"80.3\"    \"1.4\"      \"< 0.1\"  \n[5,] \"Algeria\"     \"35,470,000\" \"0.2\"       \"97.9\"    \"1.8\"      \"< 0.1\"  \n     [,7]       [,8]       [,9]       [,10]    \n[1,] \"PERCENT\"  \"FOLK\"     \"OTHER\"    \"PERCENT\"\n[2,] \"BUDDHIST\" \"RELIGION\" \"RELIGION\" \"JEWISH\" \n[3,] \"< 0.1 %\"  \"< 0.1 %\"  \"< 0.1 %\"  \"< 0.1 %\"\n[4,] \"< 0.1\"    \"< 0.1\"    \"0.2\"      \"< 0.1\"  \n[5,] \"< 0.1\"    \"< 0.1\"    \"< 0.1\"    \"< 0.1\"  \n```\n:::\n:::\n\n\nVamos primeiro separar estas linhas e montar o cabeçalho (nome das colunas) da nossa tabela. Queremos (1) juntar as informações; e (2) renomear as colunas. Assim, queremos juntar `\"PERCENT\"` com `\"CHRISTIAN\"` e depois tornar o nome limpo, i.e., `\"percent_christian\"`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Seleciona apenas as duas primeiras linhas do primeiro elemento\nheader = tables[[1]][1:2, ]\n\n# Junta as colunas e 'limpa' os nomes\ncol_names = apply(header, 2, \\(x) make_clean_names(str_c(x, collapse = \"_\")))\n\ncol_names\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"country\"            \"country_population\" \"percent_christian\" \n [4] \"percent_muslim\"     \"percent_unaffil\"    \"percent_hindu\"     \n [7] \"percent_buddhist\"   \"folk_religion\"      \"other_religion\"    \n[10] \"percent_jewish\"    \n```\n:::\n:::\n\n\nAgora vamos empilhar os dados e usar o cabeçalho. Além disso, vamos inspecionar as primeiras linhas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable_data = bind_rows(lapply(tables, as.data.frame))\ntable_data = table_data[3:nrow(table_data), ]\nnames(table_data) = col_names\n\nhead(table_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         country country_population percent_christian percent_muslim\n3    Afghanistan         31,410,000             0.1 %         99.7 %\n4        Albania          3,200,000              18.0           80.3\n5        Algeria         35,470,000               0.2           97.9\n6 American Samoa             70,000              98.3          < 0.1\n7        Andorra             80,000              89.5            0.8\n8         Angola         19,080,000              90.5            0.2\n  percent_unaffil percent_hindu percent_buddhist folk_religion other_religion\n3         < 0.1 %       < 0.1 %          < 0.1 %       < 0.1 %        < 0.1 %\n4             1.4         < 0.1            < 0.1         < 0.1            0.2\n5             1.8         < 0.1            < 0.1         < 0.1          < 0.1\n6             0.7         < 0.1              0.3           0.4            0.3\n7             8.8           0.5            < 0.1         < 0.1            0.1\n8             5.1         < 0.1            < 0.1           4.2          < 0.1\n  percent_jewish\n3        < 0.1 %\n4          < 0.1\n5          < 0.1\n6          < 0.1\n7            0.3\n8          < 0.1\n```\n:::\n:::\n\n\nA primeira coluna de nossa tabela é de strings, enquanto as demais são todas numéricas. Para facilitar a leitura humana, os números foram formatados, com separador de milhar, sinal de porcentagem, etc. O próximo passo é formatar os números: o código abaixo remove este símbolos e converte para numérico.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable_data = table_data |> \n  as_tibble() |> \n  mutate(across(2:last_col(), ~as.numeric(str_remove_all(.x, \"[%<>,]\"))))\n```\n:::\n\n\nPor fim, se olharmos para as últimas linhas da tabela, veremos que as linhas representam regiões ao invés de países. Isto é muito frequente em tabelas: é costumeiro acrescentar \"totais\" ou \"agregados\" nas últimas linhas de uma tabela para facilitar a interpretação dos dados.\n\nEm termos de análise, contudo, é importante que cada linha representa a mesma unidade. Isto é, cada linha na tabela principal deve representar um país.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslice_tail(table_data, n = 7)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 10\n  country                 country_population percent_christian percent_muslim\n  <chr>                                <dbl>             <dbl>          <dbl>\n1 sia-Pacific                     4054990000               7.1           24.3\n2 urope                            742550000              75.2            5.9\n3 atin America-Caribbean           590080000              90              0.1\n4 iddle East-North Africa          341020000               3.7           93  \n5 orth America                     344530000              77.4            1  \n6 ub-Saharan Africa                822720000              62.9           30.2\n7 orld                            6895890000              31.5           23.2\n  percent_unaffil percent_hindu percent_buddhist folk_religion other_religion\n            <dbl>         <dbl>            <dbl>         <dbl>          <dbl>\n1            21.2          25.3             11.9           9              1.3\n2            18.2           0.2              0.2           0.1            0.1\n3             7.7           0.1              0.1           1.7            0.2\n4             0.6           0.5              0.1           0.3            0.1\n5            17.1           0.7              1.1           0.3            0.6\n6             3.2           0.2              0.1           3.3            0.2\n7            16.3          15                7.1           5.9            0.8\n  percent_jewish\n           <dbl>\n1              0\n2              0\n3              0\n4              1\n5              1\n6              0\n7              0\n```\n:::\n:::\n\n\nVamos guardar esta informação num objeto secundário chamado `table_regions`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable_regions <- slice_tail(table_data, n = 7)\ntable_data <- slice(table_data, 1:(nrow(table_data) - 7))\n```\n:::\n\n\nPor fim, temos um problema específico. O nome de muitos países saiu cortado, faltando a primeira letra. Para resolver isto vamos usar o pacote `countries` que oferece um fuzzy matching para o nome de países.\n\nPara melhor compreender o uso do pacote vamos analisar um exemplo. Olhando a linha 51, vemos que o país importado foi \"yprus\". O correto seria \"Cyprus\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_name = table_data[51, ]$country\ntest_name\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"yprus\"\n```\n:::\n:::\n\n\nA função `country_name` consegue identificar o nome corretamente.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncountry_name(test_name, fuzzy_match = TRUE, to = \"name_en\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Cyprus\"\n```\n:::\n:::\n\n\nPode-se aplicar esta função em todos os nomes dos países. Além disso, é importante verificar se houve erros. O código busca qualquer entrada com `NA` em `name` ou `iso3c`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest = table_data |> \n  mutate(\n    name = country_name(country, to = \"name_en\", fuzzy_match = TRUE),\n    iso3c = country_name(country, to = \"ISO3\", fuzzy_match = TRUE)\n  )\n\nerrors = test |> \n  filter(if_any(name:iso3c, ~is.na(.))) |> \n  pull(country)\n\nerrors\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"hannel Islands\"         \"osovo\"                  \"etherlands Antilles\"   \n[4] \"orthern Mariana Is.\"    \"alestinian territories\" \"ruguay\"                \n```\n:::\n:::\n\n\nComo se vê, o algoritmo falha em identificar alguns países, que serão corrigidos manualmente. O foco do post não é de como usar o algortimo de fuzzy matching então não vou entrar em muitos detalhes. Vale notar que é possível acrescentar o argumento `verbose = TRUE` na função `country_name` para receber um retorno mais informativo.\n\nAlém dos valores ausentes, vou verificar também os matchings duplicados. O código abaixo faz uma correção manual destes casos. Vale notar que há um caso \"impossível\": Gambia e Zambia, pois ambos os países estão com o nome \"ambia\" na tabela importada. Neste caso, uso a informação da população para discriminar os casos.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nerrors = test |>\n  get_dupes(name) |> \n  select(name, country)\n  \ncorrection = c(\n  \"c\", \"k\", \"n\", \"n\", \"p\", \"u\", \"m\", \"m\", \"p\", \"\", \"m\", \"\", \"l\", \"e\", \"p\", \"f\",\n  \"i\", \"n\", \"z\", \"g\", \"u\", \"i\", \"o\", \"r\", \"r\", \"p\", \"s\", \"g\", \"u\", \"f\", \"u\"\n  )\n\nfix_table = errors |> \n  mutate(country_fixed = str_c(str_to_upper(correction), country)) |> \n  select(country, country_fixed)\n\ntable_data = table_data |> \n  left_join(fix_table, by = 'country', relationship = \"many-to-many\") |> \n  mutate(\n    temp_name = case_when(\n      country == \"ambia\" & country_population == 1730000 ~ \"Gambia\",\n      country == \"ambia\" & country_population > 1730000 ~ \"Zambia\",\n      is.na(country_fixed) ~ country,\n      TRUE ~ country_fixed\n    ),\n    # faz o matching do nomes dos países\n    name = country_name(temp_name, to = \"name_en\", fuzzy_match = TRUE),\n    # resolve alguns casos extremos \"Channel Islands\"\n    name = if_else(is.na(name), temp_name, name),\n    # encontra o ISO3 code de cada país\n    iso3c = country_name(name, to = \"ISO3\", fuzzy_match = FALSE)\n  )\n```\n:::\n\n\nOs erros finais acontecem porque alguns dos países listados não possuem ISO3, como `\"Netherlands Antilles\"`\n\n### Tabela Final\n\nA tabela final é apresentada abaixo. Vale notar que alguns dos valores estão truncados, o que gera uma pequena imprecisão, como é o caso das entradas que eram listadas como \"\\< 0.1\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable_data = table_data %>%\n  select(name, iso3c, country_population:percent_jewish)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nDT::datatable(table_data)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item\" id=\"htmlwidget-ae7a1d23449846cf5c0e\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-ae7a1d23449846cf5c0e\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"32\",\"33\",\"34\",\"35\",\"36\",\"37\",\"38\",\"39\",\"40\",\"41\",\"42\",\"43\",\"44\",\"45\",\"46\",\"47\",\"48\",\"49\",\"50\",\"51\",\"52\",\"53\",\"54\",\"55\",\"56\",\"57\",\"58\",\"59\",\"60\",\"61\",\"62\",\"63\",\"64\",\"65\",\"66\",\"67\",\"68\",\"69\",\"70\",\"71\",\"72\",\"73\",\"74\",\"75\",\"76\",\"77\",\"78\",\"79\",\"80\",\"81\",\"82\",\"83\",\"84\",\"85\",\"86\",\"87\",\"88\",\"89\",\"90\",\"91\",\"92\",\"93\",\"94\",\"95\",\"96\",\"97\",\"98\",\"99\",\"100\",\"101\",\"102\",\"103\",\"104\",\"105\",\"106\",\"107\",\"108\",\"109\",\"110\",\"111\",\"112\",\"113\",\"114\",\"115\",\"116\",\"117\",\"118\",\"119\",\"120\",\"121\",\"122\",\"123\",\"124\",\"125\",\"126\",\"127\",\"128\",\"129\",\"130\",\"131\",\"132\",\"133\",\"134\",\"135\",\"136\",\"137\",\"138\",\"139\",\"140\",\"141\",\"142\",\"143\",\"144\",\"145\",\"146\",\"147\",\"148\",\"149\",\"150\",\"151\",\"152\",\"153\",\"154\",\"155\",\"156\",\"157\",\"158\",\"159\",\"160\",\"161\",\"162\",\"163\",\"164\",\"165\",\"166\",\"167\",\"168\",\"169\",\"170\",\"171\",\"172\",\"173\",\"174\",\"175\",\"176\",\"177\",\"178\",\"179\",\"180\",\"181\",\"182\",\"183\",\"184\",\"185\",\"186\",\"187\",\"188\",\"189\",\"190\",\"191\",\"192\",\"193\",\"194\",\"195\",\"196\",\"197\",\"198\",\"199\",\"200\",\"201\",\"202\",\"203\",\"204\",\"205\",\"206\",\"207\",\"208\",\"209\",\"210\",\"211\",\"212\",\"213\",\"214\",\"215\",\"216\",\"217\",\"218\",\"219\",\"220\",\"221\",\"222\",\"223\",\"224\",\"225\",\"226\",\"227\",\"228\",\"229\",\"230\",\"231\",\"232\",\"233\",\"234\"],[\"Afghanistan\",\"Albania\",\"Algeria\",\"American Samoa\",\"Andorra\",\"Angola\",\"Anguilla\",\"Antigua and Barbuda\",\"Argentina\",\"Armenia\",\"Aruba\",\"Australia\",\"Austria\",\"Azerbaijan\",\"Bahamas\",\"Bahrain\",\"Bangladesh\",\"Barbados\",\"Belarus\",\"Belgium\",\"Belize\",\"Benin\",\"Bermuda\",\"Bhutan\",\"Bolivia (Plurinational State of)\",\"Bosnia and Herzegovina\",\"Botswana\",\"Brazil\",\"Virgin Islands (British)\",\"Brunei Darussalam\",\"Bulgaria\",\"Burkina Faso\",\"Myanmar\",\"Burundi\",\"Cambodia\",\"Cameroon\",\"Canada\",\"Cabo Verde\",\"Cayman Islands\",\"Central African Republic\",\"Chad\",\"Channel Islands\",\"Chile\",\"China\",\"Colombia\",\"Comoros\",\"Cook Islands\",\"Costa Rica\",\"Croatia\",\"Cuba\",\"Cyprus\",\"Czechia\",\"Congo\",\"Denmark\",\"Djibouti\",\"Dominica\",\"Dominican Republic\",\"Ecuador\",\"Egypt\",\"El Salvador\",\"Equatorial Guinea\",\"Eritrea\",\"Estonia\",\"Ethiopia\",\"Faroe Islands\",\"Falkland Islands (Malvinas)\",\"Micronesia (Federated States of)\",\"Fiji\",\"Finland\",\"France\",\"French Guiana\",\"French Polynesia\",\"Gabon\",\"Gambia\",\"Gambia\",\"Georgia\",\"Germany\",\"Ghana\",\"Gibraltar\",\"Greece\",\"Greenland\",\"Grenada\",\"Guadeloupe\",\"Guam\",\"Guatemala\",\"Guinea\",\"Guinea-Bissau\",\"Guyana\",\"Haiti\",\"Honduras\",\"Hong Kong\",\"Hungary\",\"Iceland\",\"India\",\"Indonesia\",\"Iran (Islamic Republic of)\",\"Iraq\",\"Ireland\",\"Isle of Man\",\"Israel\",\"Italy\",\"Côte d'Ivoire\",\"Jamaica\",\"Japan\",\"Jordan\",\"Kazakhstan\",\"Kenya\",\"Kiribati\",\"Kosovo\",\"Kuwait\",\"Kyrgyzstan\",\"Lao People's Democratic Republic\",\"Latvia\",\"Lebanon\",\"Lesotho\",\"Liberia\",\"Libya\",\"Liechtenstein\",\"Lithuania\",\"Luxembourg\",\"Macao\",\"Madagascar\",\"Malawi\",\"Malaysia\",\"Maldives\",\"Mali\",\"Malta\",\"Marshall Islands\",\"Martinique\",\"Mauritania\",\"Mauritius\",\"Mayotte\",\"Mexico\",\"Moldova, Republic of\",\"Monaco\",\"Mongolia\",\"Montenegro\",\"Montserrat\",\"Morocco\",\"Mozambique\",\"Namibia\",\"Nauru\",\"Nepal\",\"Netherlands\",\"Netherlands Antilles\",\"New Caledonia\",\"New Zealand\",\"Nicaragua\",\"Niger\",\"Nigeria\",\"Niue\",\"Korea (Democratic People's Republic of)\",\"Northern Mariana Islands\",\"Norway\",\"Oman\",\"Pakistan\",\"Palau\",\"Palestine, State of\",\"Panama\",\"Papua New Guinea\",\"Paraguay\",\"Peru\",\"Philippines\",\"Poland\",\"Portugal\",\"Puerto Rico\",\"Antarctica\",\"North Macedonia\",\"Congo\",\"Réunion\",\"Oman\",\"Russian Federation\",\"Rwanda\",\"Samoa\",\"San Marino\",\"Sao Tome and Principe\",\"Saudi Arabia\",\"Senegal\",\"Serbia\",\"Seychelles\",\"Sierra Leone\",\"Singapore\",\"Slovakia\",\"Slovenia\",\"Solomon Islands\",\"Somalia\",\"South Africa\",\"Korea, Republic of\",\"South Sudan\",\"Spain\",\"Sri Lanka\",\"Saint Helena, Ascension and Tristan da Cunha\",\"Saint Kitts and Nevis\",\"Saint Lucia\",\"Saint Pierre and Miquelon\",\"Saint Vincent and the Grenadines\",\"Sudan\",\"Suriname\",\"Eswatini\",\"Sweden\",\"Switzerland\",\"Syrian Arab Republic\",\"Taiwan, Province of China\",\"Tajikistan\",\"Tanzania, United Republic of\",\"Thailand\",\"Timor-Leste\",\"Togo\",\"Tokelau\",\"Tonga\",\"Trinidad and Tobago\",\"Tunisia\",\"Turkey\",\"Turkmenistan\",\"Turks and Caicos Islands\",\"Tuvalu\",\"Virgin Islands (U.S.)\",\"Uganda\",\"Ukraine\",\"United Arab Emirates\",\"United Kingdom of Great Britain and Northern Ireland\",\"United States of America\",\"Uruguay\",\"Uzbekistan\",\"Vanuatu\",\"Holy See\",\"Venezuela (Bolivarian Republic of)\",\"Viet Nam\",\"Wallis and Futuna\",\"Western Sahara\",\"Yemen\",\"Zambia\",\"Zambia\",\"Zimbabwe\"],[\"AFG\",\"ALB\",\"DZA\",\"ASM\",\"AND\",\"AGO\",\"AIA\",\"ATG\",\"ARG\",\"ARM\",\"ABW\",\"AUS\",\"AUT\",\"AZE\",\"BHS\",\"BHR\",\"BGD\",\"BRB\",\"BLR\",\"BEL\",\"BLZ\",\"BEN\",\"BMU\",\"BTN\",\"BOL\",\"BIH\",\"BWA\",\"BRA\",\"VGB\",\"BRN\",\"BGR\",\"BFA\",\"MMR\",\"BDI\",\"KHM\",\"CMR\",\"CAN\",\"CPV\",\"CYM\",\"CAF\",\"TCD\",null,\"CHL\",\"CHN\",\"COL\",\"COM\",\"COK\",\"CRI\",\"HRV\",\"CUB\",\"CYP\",\"CZE\",\"COG\",\"DNK\",\"DJI\",\"DMA\",\"DOM\",\"ECU\",\"EGY\",\"SLV\",\"GNQ\",\"ERI\",\"EST\",\"ETH\",\"FRO\",\"FLK\",\"FSM\",\"FJI\",\"FIN\",\"FRA\",\"GUF\",\"PYF\",\"GAB\",\"GMB\",\"GMB\",\"GEO\",\"DEU\",\"GHA\",\"GIB\",\"GRC\",\"GRL\",\"GRD\",\"GLP\",\"GUM\",\"GTM\",\"GIN\",\"GNB\",\"GUY\",\"HTI\",\"HND\",\"HKG\",\"HUN\",\"ISL\",\"IND\",\"IDN\",\"IRN\",\"IRQ\",\"IRL\",\"IMN\",\"ISR\",\"ITA\",\"CIV\",\"JAM\",\"JPN\",\"JOR\",\"KAZ\",\"KEN\",\"KIR\",null,\"KWT\",\"KGZ\",\"LAO\",\"LVA\",\"LBN\",\"LSO\",\"LBR\",\"LBY\",\"LIE\",\"LTU\",\"LUX\",\"MAC\",\"MDG\",\"MWI\",\"MYS\",\"MDV\",\"MLI\",\"MLT\",\"MHL\",\"MTQ\",\"MRT\",\"MUS\",\"MYT\",\"MEX\",\"MDA\",\"MCO\",\"MNG\",\"MNE\",\"MSR\",\"MAR\",\"MOZ\",\"NAM\",\"NRU\",\"NPL\",\"NLD\",null,\"NCL\",\"NZL\",\"NIC\",\"NER\",\"NGA\",\"NIU\",\"PRK\",\"MNP\",\"NOR\",\"OMN\",\"PAK\",\"PLW\",\"PSE\",\"PAN\",\"PNG\",\"PRY\",\"PER\",\"PHL\",\"POL\",\"PRT\",\"PRI\",\"ATA\",\"MKD\",\"COG\",\"REU\",\"OMN\",\"RUS\",\"RWA\",\"WSM\",\"SMR\",\"STP\",\"SAU\",\"SEN\",\"SRB\",\"SYC\",\"SLE\",\"SGP\",\"SVK\",\"SVN\",\"SLB\",\"SOM\",\"ZAF\",\"KOR\",\"SSD\",\"ESP\",\"LKA\",\"SHN\",\"KNA\",\"LCA\",\"SPM\",\"VCT\",\"SDN\",\"SUR\",\"SWZ\",\"SWE\",\"CHE\",\"SYR\",\"TWN\",\"TJK\",\"TZA\",\"THA\",\"TLS\",\"TGO\",\"TKL\",\"TON\",\"TTO\",\"TUN\",\"TUR\",\"TKM\",\"TCA\",\"TUV\",\"VIR\",\"UGA\",\"UKR\",\"ARE\",\"GBR\",\"USA\",\"URY\",\"UZB\",\"VUT\",\"VAT\",\"VEN\",\"VNM\",\"WLF\",\"ESH\",\"YEM\",\"ZMB\",\"ZMB\",\"ZWE\"],[31410000,3200000,35470000,70000,80000,19080000,20000,90000,40410000,3090000,110000,22270000,8390000,9190000,340000,1260000,148690000,270000,9600000,10710000,310000,8850000,60000,730000,9930000,3760000,2010000,194950000,20000,400000,7490000,16470000,47960000,8380000,14140000,19600000,34020000,500000,60000,4400000,11230000,150000,17110000,1341340000,46290000,730000,20000,4660000,4400000,11260000,1100000,10490000,65970000,5550000,890000,70000,9930000,14460000,81120000,6190000,700000,5250000,1340000,82950000,50000,10000,110000,860000,5360000,62790000,230000,270000,1510000,1730000,1730000,4350000,82300000,24390000,30000,11360000,60000,100000,460000,180000,14390000,9980000,1520000,750000,9990000,7600000,7050000,9980000,320000,1224610000,239870000,73970000,31670000,4470000,80000,7420000,60550000,19740000,2740000,126540000,6190000,16030000,40510000,100000,2080000,2740000,5330000,6200000,2250000,4230000,2170000,3990000,6360000,40000,3320000,510000,540000,20710000,14900000,28400000,320000,15370000,420000,50000,410000,3460000,1300000,200000,113420000,3570000,40000,2760000,630000,10000,31950000,23390000,2280000,10000,29960000,16610000,200000,250000,4370000,5790000,15510000,158420000,10000,24350000,60000,4880000,2780000,173590000,20000,4040000,3520000,6860000,6450000,29080000,93260000,38280000,10680000,3750000,1760000,2060000,4040000,850000,21490000,142960000,10620000,180000,30000,170000,27450000,12430000,7770000,90000,5870000,5090000,5460000,2030000,540000,9330000,50130000,48180000,9950000,46080000,20860000,10000,50000,170000,10000,110000,33600000,520000,1190000,9380000,7660000,20410000,23220000,6880000,44840000,69120000,1120000,6030000,10000,100000,1340000,10480000,72750000,5040000,40000,10000,110000,33420000,45450000,7510000,62040000,310380000,3370000,27440000,240000,10000,28980000,87850000,10000,530000,24050000,13090000,13090000,12570000],[0.1,18,0.2,98.3,89.5,90.5,90.59999999999999,93,85.2,98.5,91.90000000000001,67.3,80.40000000000001,3,96,14.5,0.2,95.2,71.2,64.2,87.59999999999999,53,75,0.5,93.90000000000001,52.3,72.09999999999999,88.90000000000001,84.5,9.4,82.09999999999999,22.5,7.8,91.5,0.4,70.3,69,89.09999999999999,83.5,89.5,40.6,85.2,89.40000000000001,5.1,92.5,0.5,96,90.90000000000001,93.40000000000001,59.2,73.2,23.3,95.8,83.5,2.3,94.40000000000001,88,94.09999999999999,5.1,88.2,88.7,62.9,39.9,62.8,98,67.2,95.3,64.40000000000001,81.59999999999999,63,84.40000000000001,94,76.5,4.5,4.5,88.5,68.7,74.90000000000001,88.8,88.09999999999999,96.09999999999999,96.59999999999999,95.90000000000001,94.2,95.2,10.9,19.7,66,86.90000000000001,87.59999999999999,14.3,81,95,2.5,9.9,0.2,0.8,92,84.09999999999999,2,83.3,44.1,77.2,1.6,2.2,24.8,84.8,97,11.4,14.3,11.4,1.5,55.8,38.3,96.8,85.90000000000001,2.7,91.90000000000001,89.8,70.40000000000001,7.2,85.3,82.7,9.4,0.4,3.2,97,97.5,96.5,0.3,25.3,0.7,95.09999999999999,97.40000000000001,86,2.3,78.09999999999999,93.5,0.1,56.7,97.5,79,0.5,50.6,93.90000000000001,85.2,57,85.8,0.8,49.3,96.40000000000001,2,81.3,84.7,6.5,1.6,86.7,2.4,93,99.2,96.90000000000001,95.5,92.59999999999999,94.3,93.8,96.7,13.8,59.3,85.90000000000001,87.59999999999999,99.5,73.3,93.40000000000001,96.8,91.59999999999999,82.2,4.4,3.6,92.5,94,20.9,18.2,85.3,78.40000000000001,97.40000000000001,0.1,81.2,29.4,60.5,78.59999999999999,7.3,96.5,94.59999999999999,91.09999999999999,94.7,88.7,5.4,51.6,88.09999999999999,67.2,81.3,5.2,5.5,1.6,61.4,0.9,99.59999999999999,43.7,99.8,98.90000000000001,65.90000000000001,0.2,0.4,6.4,92.09999999999999,96.7,94.8,86.7,83.8,12.6,71.09999999999999,78.3,57.9,2.3,93.3,99,89.3,8.199999999999999,97.40000000000001,0.2,0.2,97.59999999999999,97.59999999999999,87],[99.7,80.3,97.90000000000001,0.1,0.8,0.2,0.3,0.6,1,0.1,0.2,2.4,5.4,96.90000000000001,0.1,70.3,89.8,1,0.2,5.9,0.1,23.8,1.1,0.2,0.1,45.2,0.4,0.1,1.2,75.09999999999999,13.7,61.6,4,2.8,2,18.3,2.1,0.1,0.4,8.5,55.3,0.1,0.1,1.8,0.1,98.3,0.1,0.1,1.4,0.1,25.3,0.1,1.5,4.1,96.90000000000001,0.1,0.1,0.1,94.90000000000001,0.1,4,36.6,0.2,34.6,0.1,0.3,0.1,6.3,0.8,7.5,0.9,0.1,11.2,95.09999999999999,95.09999999999999,10.7,5.8,15.8,4,5.3,0.1,0.3,0.4,0.1,0.1,84.40000000000001,45.1,6.4,0.1,0.1,1.8,0.1,0.2,14.4,87.2,99.5,99,1.1,0.2,18.6,3.7,37.5,0.1,0.2,97.2,70.40000000000001,9.699999999999999,0.1,87,74.09999999999999,88,0.1,0.1,61.3,0.1,12,96.59999999999999,5,0.1,2.3,0.2,3,13,63.7,98.40000000000001,92.40000000000001,0.2,0.1,0.2,99.09999999999999,16.7,98.59999999999999,0.1,0.6,0.4,3.2,18.7,0.1,99.90000000000001,18,0.3,0.1,4.6,6,0.2,2.8,1.2,0.1,98.40000000000001,48.8,0.1,0.1,0.7,3.7,85.90000000000001,96.40000000000001,0.1,97.59999999999999,0.7,0.1,0.1,0.1,5.5,0.1,0.6,0.1,67.7,39.3,1.2,4.2,0.3,10,1.8,0.1,0.1,0.1,93,96.40000000000001,4.2,1.1,78,14.3,0.2,3.6,0.1,99.8,1.7,0.2,6.2,2.1,9.800000000000001,0.1,0.3,0.1,0.2,1.5,90.7,15.2,0.2,4.6,5.5,92.8,0.1,96.7,35.2,5.5,0.1,14,0.1,0.1,5.9,99.5,98,93,0.1,0.1,0.1,11.5,1.2,76.90000000000001,4.4,0.9,0.1,96.7,0.1,0.1,0.3,0.2,0.1,99.40000000000001,99.09999999999999,0.5,0.5,0.9],[0.1,1.4,1.8,0.7,8.800000000000001,5.1,4,1.7,12.2,1.3,6,24.2,13.5,0.1,3.1,1.9,0.1,1.9,28.6,29,8.9,5,19.4,0.1,4.1,2.5,20.6,7.9,3.9,0.4,4.2,0.4,0.5,0.1,0.2,5.3,23.7,9.1,9.4,1,2.5,14.2,8.6,52.2,6.6,0.1,3.2,7.9,5.1,23,1.2,76.40000000000001,1.8,11.8,0.2,0.5,10.9,5.5,0.1,11,5,0.1,59.6,0.1,1.7,31.5,0.9,0.8,17.6,28,3.4,4.9,5.6,0.1,0.1,0.7,24.7,4.2,2.9,6.1,2.5,1,2.5,1.7,4.1,1.8,4.3,2,10.6,10.5,56.1,18.6,3.5,0.1,0.1,0.1,0.1,6.2,15.4,3.1,12.4,8,17.2,57,0.1,4.2,2.5,0.8,1.6,0.1,0.4,0.9,43.8,0.3,3.1,1.4,0.2,2.9,10,26.8,15.4,6.9,2.5,0.7,0.1,2.7,2.5,1.5,2.3,0.1,0.6,0.2,4.7,1.4,11.7,35.9,3.2,4.8,0.1,17.9,1.9,4.5,0.3,42.1,3.3,10.4,36.6,12.5,0.7,0.4,3.3,71.3,1,10.1,0.2,0.1,1.2,0.1,4.8,0.1,1.1,3,0.1,5.6,4.4,1.9,0.9,1.4,9,2,0.1,16.2,3.6,2.5,7.2,12.6,0.7,0.1,3.3,2.1,0.1,16.4,14.3,18,0.2,0.1,14.9,46.4,0.5,19,0.1,3.3,1.6,6,3.8,2.5,1,5.4,10.1,27,11.9,2,12.7,1.5,1.4,0.3,0.1,6.2,0.1,0.1,1.9,0.2,1.2,0.5,4.6,1.3,3.7,0.5,14.7,1.1,21.3,16.4,40.7,0.8,1.2,0.1,10,29.6,0.6,0.4,0.1,0.5,0.5,7.9],[0.1,0.1,0.1,0.1,0.5,0.1,0.4,0.2,0.1,0.1,0.1,1.4,0.1,0.1,0.1,9.800000000000001,9.1,0.4,0.1,0.1,0.2,0.1,0.1,22.6,0.1,0.1,0.3,0.1,1.2,0.3,0.1,0.1,1.7,0.1,0.1,0.1,1.4,0.1,0.9,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.2,0.1,0.1,0.1,0.4,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,27.9,0.1,0.1,1.6,0.1,0.1,0.1,0.1,0.1,0.1,0.1,1.8,0.1,0.1,0.7,0.5,0.1,0.1,0.1,0.1,24.9,0.1,0.1,0.4,0.1,0.3,79.5,1.7,0.1,0.1,0.2,0.2,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,8.5,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,6,0.3,0.1,0.2,0.1,0.2,0.1,56.4,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,80.7,0.5,0.2,0.1,2.1,0.1,0.1,0.1,0.1,0.1,0.1,0.5,5.5,1.9,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,13.8,0.1,0.1,4.5,0.1,0.1,0.1,0.1,0.1,0.1,1.1,0.1,0.1,2.1,0.1,5.2,0.1,0.1,0.1,0.1,1.1,0.1,0.1,0.1,13.6,0.1,1.5,0.3,0.1,3.4,0.1,19.8,0.1,0.2,0.4,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,22.7,0.1,0.1,0.1,0.1,0.1,0.4,0.3,0.1,6.6,1.3,0.6,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.6,0.1,0.1,0.1],[0.1,0.1,0.1,0.3,0.1,0.1,0.1,0.1,0.1,0.1,0.1,2.7,0.2,0.1,0.1,2.5,0.5,0.1,0.1,0.2,0.5,0.1,0.5,74.7,0.1,0.1,0.1,0.1,0.1,8.6,0.1,0.1,80.09999999999999,0.1,96.90000000000001,0.1,0.8,0.1,0.1,0.1,0.1,0.1,0.1,18.2,0.1,0.1,0.1,0.1,0.1,0.1,0.2,0.1,0.1,0.2,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.2,0.4,0.1,0.1,0.5,0.1,0.1,0.1,0.1,0.1,0.1,0.3,0.1,0.1,0.1,0.1,0.1,0.1,1.1,0.1,0.1,0.1,0.1,0.1,0.1,13.2,0.1,0.4,0.8,0.7,0.1,0.1,0.2,0.1,0.3,0.2,0.1,0.1,36.2,0.4,0.2,0.1,0.1,0.1,2.8,0.1,66,0.1,0.2,0.1,0.1,0.3,0.1,0.1,0.1,17.3,0.1,0.1,17.7,0.6,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,55.1,0.1,0.1,0.1,0.1,0.1,1.1,10.3,0.2,0.5,0.6,1.6,0.1,0.1,0.1,0.1,1.5,10.6,0.6,0.8,0.1,0.8,0.1,0.2,0.1,0.1,0.2,0.1,0.1,0.6,0.3,3.1,0.1,0.1,0.2,0.1,0.1,0.1,0.1,0.1,0.1,0.3,0.1,0.1,0.1,0.1,33.9,0.1,0.1,0.3,0.1,0.2,22.9,0.1,0.1,69.3,0.1,0.1,0.1,0.1,0.1,0.1,0.6,0.1,0.4,0.4,0.1,21.3,0.1,0.1,93.2,0.1,0.1,0.1,0.1,0.3,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,2,0.4,1.2,0.1,0.1,0.1,0.1,0.1,16.4,0.1,0.1,0.1,0.1,0.1,0.1],[0.1,0.1,0.1,0.4,0.1,4.2,2.9,3.6,0.8,0.1,1.3,0.7,0.1,0.1,0.3,0.1,0.4,0.1,0.1,0.2,1.5,18.1,3,1.9,0.9,0.1,6,2.8,8.4,6.2,0.1,15.4,5.8,5.7,0.6,3.3,1.2,1.5,4.5,1,1.4,0.1,1.5,21.9,0.8,1,0.1,0.8,0.1,17.4,0.1,0.1,0.7,0.1,0.3,3,0.9,0.3,0.1,0.5,1.7,0.4,0.1,2.6,0.1,0.1,2.7,0.1,0.1,0.3,9.1,0.5,6,0.1,0.1,0.1,0.1,4.9,0.1,0.1,0.8,1.3,0.4,1.5,0.6,2.7,30.9,0.2,2.2,1.1,12.8,0.1,0.5,0.5,0.3,0.1,0.1,0.2,0.1,0.2,0.1,10.2,4.5,0.4,0.1,0.3,1.7,0.1,0.1,0.1,0.1,30.7,0.1,0.1,0.1,0.5,0.1,0.1,0.1,0.1,58.9,4.5,1.7,2.3,0.1,1.6,0.1,0.3,0.2,0.5,0.7,0.5,0.1,0.1,0.1,3.5,0.1,0.2,0.1,7.4,0.2,8.1,3.7,0.2,1.2,0.2,0.5,1.4,0.1,1.4,0.1,12.3,5.3,0.1,0.1,0.1,0.8,0.1,0.4,0.4,1.7,1,1.5,0.1,0.5,0.8,0.1,0.1,2.8,0.4,0.1,0.2,1,0.1,0.1,2.9,0.3,0.1,0.1,0.1,0.8,2.3,0.1,0.1,1.3,0.1,0.4,0.8,32.9,0.1,0.1,0.1,1.3,0.5,0.1,2,2.8,5.3,1,0.2,0.1,0.1,44.2,0.1,1.8,0.1,0.1,35.6,0.1,0.1,1.9,0.1,0.1,0.1,2.7,0.1,0.1,0.9,0.1,0.1,0.3,0.2,0.8,0.1,4.1,0.1,0.2,45.3,1.2,0.1,0.1,0.3,0.3,3.8],[0.1,0.2,0.1,0.3,0.1,0.1,1.6,1,0.3,0.1,0.1,0.8,0.1,0.1,0.3,0.2,0.1,1.4,0.1,0.1,0.1,0.1,0.8,0.1,1,0.1,0.6,0.2,0.8,0.1,0.1,0.1,0.2,0.1,0.1,2.7,0.9,0.2,0.6,0.1,0.1,0.3,0.2,0.7,0.1,0.1,0.8,0.3,0.1,0.1,0.1,0.1,0.1,0.1,0.1,1.7,0.1,0.1,0.1,0.3,0.5,0.1,0.1,0.1,0.3,0.8,0.7,0.5,0.1,0.2,0.5,0.4,0.7,0.1,0.1,0.1,0.1,0.2,0.3,0.1,0.6,0.2,0.4,1.6,0.1,0.1,0.1,0.6,0.3,0.6,1.5,0.1,0.2,2.3,0.1,0.2,0.1,0.1,0.1,0.1,0.1,0.2,1,4.7,0.1,0.1,1.2,2.2,0.1,0.3,0.1,0.7,0.2,0.1,0.1,0.1,0.1,0.1,0.1,0.3,1,0.1,0.1,0.2,0.1,0.1,0.1,0.8,0.6,0.1,0.3,0.1,0.1,0.1,0.2,0.1,0.1,1.5,0.1,0.1,0.1,7.4,0.1,0.2,0.3,0.8,0.7,0.1,0.1,0.1,0.2,12.9,1.1,0.2,1,0.1,10.4,0.1,0.4,0.2,0.2,0.3,0.1,0.1,0.1,0.1,0.7,0.1,1.1,1.1,0.1,0.1,0.2,0.4,0.9,2.4,0.3,0.1,0.1,0.6,0.1,9.699999999999999,0.1,0.1,0.7,0.1,0.3,0.2,0.1,0.1,0.1,0.2,0.8,2,1.3,2,0.1,1.8,0.4,0.2,0.1,0.1,16.2,0.1,0.1,0.1,0.1,0,0,0,1.4,0.1,0.2,0.1,0.6,1.9,0.6,0.1,0.1,0.8,0.8,0.6,0.3,0.1,1.4,0.1,0.1,0.4,0.8,0.1,0.1,0.9,0.9,0.3],[0.1,0.1,0.1,0.1,0.3,0.1,0.1,0.1,0.5,0.1,0.4,0.5,0.2,0.1,0.1,0.6,0.1,0.1,0.1,0.3,1,0.1,0.3,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,1,0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>name<\\/th>\\n      <th>iso3c<\\/th>\\n      <th>country_population<\\/th>\\n      <th>percent_christian<\\/th>\\n      <th>percent_muslim<\\/th>\\n      <th>percent_unaffil<\\/th>\\n      <th>percent_hindu<\\/th>\\n      <th>percent_buddhist<\\/th>\\n      <th>folk_religion<\\/th>\\n      <th>other_religion<\\/th>\\n      <th>percent_jewish<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":[3,4,5,6,7,8,9,10,11]},{\"orderable\":false,\"targets\":0},{\"name\":\" \",\"targets\":0},{\"name\":\"name\",\"targets\":1},{\"name\":\"iso3c\",\"targets\":2},{\"name\":\"country_population\",\"targets\":3},{\"name\":\"percent_christian\",\"targets\":4},{\"name\":\"percent_muslim\",\"targets\":5},{\"name\":\"percent_unaffil\",\"targets\":6},{\"name\":\"percent_hindu\",\"targets\":7},{\"name\":\"percent_buddhist\",\"targets\":8},{\"name\":\"folk_religion\",\"targets\":9},{\"name\":\"other_religion\",\"targets\":10},{\"name\":\"percent_jewish\",\"targets\":11}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n### Tidy data\n\nPor fim, vale notar que podemos melhorar ainda mais os dados acima. Na tabela acima, muitas das colunas são valores da variável \"religião\"; então podemos, transformar os dados em \"tidy\" convertendo-os em longitudinais da seguinte forma.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntab_religion = table_data |> \n  pivot_longer(\n    cols = percent_christian:percent_jewish,\n    names_to = \"religion\",\n    values_to = \"share\"\n    ) |> \n  mutate(religion = str_remove(religion, \"(percent_)|(_religion)\"))\n\ntab_religion\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1,872 × 5\n   name        iso3c country_population religion  share\n   <chr>       <chr>              <dbl> <chr>     <dbl>\n 1 Afghanistan AFG             31410000 christian   0.1\n 2 Afghanistan AFG             31410000 muslim     99.7\n 3 Afghanistan AFG             31410000 unaffil     0.1\n 4 Afghanistan AFG             31410000 hindu       0.1\n 5 Afghanistan AFG             31410000 buddhist    0.1\n 6 Afghanistan AFG             31410000 folk        0.1\n 7 Afghanistan AFG             31410000 other       0.1\n 8 Afghanistan AFG             31410000 jewish      0.1\n 9 Albania     ALB              3200000 christian  18  \n10 Albania     ALB              3200000 muslim     80.3\n# ℹ 1,862 more rows\n```\n:::\n:::\n\n\nAgora temos uma coluna `religion` que identifica cada uma das religiões consideradas na pesquisa e uma coluna `share` que mostra a representatividade de cada religão em cada país. Como comentado anteriormente, existem algumas impreciões pois substituímos os valores \"\\< 0.1\" simplesmente por \"0.1\", então alguns shares vão somar valores um pouco maiores do que 100.\n\nCom os dados neste formato fica fácil responder perguntas como: qual a religão dominante em cada país? Olhando os dados vemos que há 149 países em que a religião \"dominante\", definida simplesmente como a religão que tem o maior share de convertidos, é o cristianismo. Há um gap considerável entre a religão muçulmana, com 47 países.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntab_religion |> \n  filter(share == max(share), .by = c(\"name\", \"iso3c\")) |> \n  count(religion, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 2\n  religion      n\n  <chr>     <int>\n1 christian   160\n2 muslim       50\n3 buddhist      8\n4 unaffil       7\n5 folk          3\n6 hindu         3\n7 jewish        1\n```\n:::\n:::\n\n\nE qual o resultado quando se olha para o total da população religiosa? A religião cristã continua em primeiro lugar, com quase 1.6 bilhão de convertidos. Já a religião hindu, apesar de ser dominante em apenas 3 países, aparece com quase 1 bilhão de seguidores. Isto acontece porque esta é a religão dominante da Índia, que à época da pesquisa tinha 1.22 bilhão de habitantes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntab_religion |> \n  filter(share == max(share), .by = c(\"name\", \"iso3c\")) |> \n  mutate(total = country_population * share / 100) |> \n  summarise(total_relig = sum(total), .by = \"religion\") |> \n  arrange(desc(total_relig))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 2\n  religion  total_relig\n  <chr>           <dbl>\n1 christian  1984890470\n2 muslim     1174670350\n3 hindu       998475870\n4 unaffil     824792400\n5 buddhist    138877020\n6 folk         50377350\n7 jewish        5565000\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntab_religion |> \n  filter(share == max(share), .by = c(\"name\", \"iso3c\")) |> \n  filter(religion == \"hindu\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 5\n  name      iso3c country_population religion share\n  <chr>     <chr>              <dbl> <chr>    <dbl>\n1 India     IND           1224610000 hindu     79.5\n2 Mauritius MUS              1300000 hindu     56.4\n3 Nepal     NPL             29960000 hindu     80.7\n```\n:::\n:::\n\n\n## Resumo\n\nO código abaixo resume os passos da importação e limpeza dos dados.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tabulizer)\nlibrary(dplyr)\nlibrary(janitor)\nlibrary(stringr)\nlibrary(tidyr, include.only = \"pivot_longer\")\nlibrary(countries, include.only = \"country_name\")\n\n\n# (opcional: baixa os dados)\nurl = \"https://pewresearch ...\"\ndownload.file(url, destfile = tempfile(fileext = \"pdf\"))\n\n# Importa a tabela\npath = here::here(\"project/data/globalReligion-tables.pdf\")\ntables = extract_tables(path)\n\n# Limpeza -------------------------------------------------------\n\n# Nome das colunas\n\nheader = tables[[1]][1:2, ]\n# Junta as colunas e 'limpa' os nomes\ncol_names = apply(header, 2, \\(x) make_clean_names(str_c(x, collapse = \"_\")))\n# Empilha os dados e define nome das colunas\ntable_data = bind_rows(lapply(tables, as.data.frame))\ntable_data = table_data[3:nrow(table_data), ]\nnames(table_data) = col_names\n\n# Converte colunas para numérico\ntable_data = table_data |> \n  as_tibble() |> \n  mutate(across(2:last_col(), ~as.numeric(str_remove_all(.x, \"[%<>,]\"))))\n\n# Remove as últimas sete linhas\ntable_regions <- slice_tail(table_data, n = 7)\ntable_data <- slice(table_data, 1:(nrow(table_data) - 7))\n\n# Nome dos países\n\n# Correção manual\ntest = table_data |> \n  mutate(\n    name = country_name(country, to = \"name_en\", fuzzy_match = TRUE),\n    iso3c = country_name(country, to = \"ISO3\", fuzzy_match = TRUE)\n  )\n\nerrors = test |>\n  get_dupes(name) |> \n  select(name, country)\n  \ncorrection = c(\n  \"c\", \"k\", \"n\", \"n\", \"p\", \"u\", \"m\", \"m\", \"p\", \"\", \"m\", \"\", \"l\", \"e\", \"p\", \"f\",\n  \"i\", \"n\", \"z\", \"g\", \"u\", \"i\", \"o\", \"r\", \"r\", \"p\", \"s\", \"g\", \"u\", \"f\", \"u\"\n  )\n\nfix_table = errors |> \n  mutate(country_fixed = str_c(str_to_upper(correction), country)) |> \n  select(country, country_fixed)\n\n# Matching dos nomes\ntable_data = table_data |> \n  left_join(fix_table, by = 'country', relationship = \"many-to-many\") |> \n  mutate(\n    temp_name = case_when(\n      country == \"ambia\" & country_population == 1730000 ~ \"Gambia\",\n      country == \"ambia\" & country_population > 1730000 ~ \"Zambia\",\n      is.na(country_fixed) ~ country,\n      TRUE ~ country_fixed\n    ),\n    # faz o matching do nomes dos países\n    name = country_name(temp_name, to = \"name_en\", fuzzy_match = TRUE),\n    # resolve alguns casos extremos \"Channel Islands\"\n    name = if_else(is.na(name), temp_name, name),\n    # encontra o ISO3 code de cada país\n    iso3c = country_name(name, to = \"ISO3\", fuzzy_match = FALSE)\n  ) |> \n  select(name, iso3c, country_population:percent_jewish)\n\n# Tidy\n\n# Converte os dados para long\ntab_religion = table_data |> \n  pivot_longer(\n    cols = percent_christian:percent_jewish,\n    names_to = \"religion\",\n    values_to = \"share\"\n    ) |> \n  mutate(religion = str_remove(religion, \"(percent_)|(_religion)\"))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../../site_libs/htmltools-fill-0.5.8/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"../../../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/datatables-binding-0.32/datatables.js\"></script>\n<script src=\"../../../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../../../site_libs/dt-core-1.13.6/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"../../../site_libs/dt-core-1.13.6/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/dt-core-1.13.6/js/jquery.dataTables.min.js\"></script>\n<link href=\"../../../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}