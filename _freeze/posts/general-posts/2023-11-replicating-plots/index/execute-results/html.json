{
  "hash": "f38a93b144d337d81d663bd57e99aaa3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Replicando gráficos\"\ndate: '2023-11-30'\ncategories: ['data-visualization', 'ggplot2']\ndescription: \"Neste post mostro como replicar alguns gráficos de publicações usando apenas o ggplot2.\"\nexecute: \n  message: false\n  warning: false\n---\n\n\n\n# Setup\n\nAbaixo segue a lista com os principais pacotes que utilizo neste post. Eventualmente, outros pacotes como o `ggtext` ou `sidrar` são utilizados, mas deixo isto sinalizado.\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(stringr)\nlibrary(forcats)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(showtext)\nlibrary(patchwork)\n\nshowtext_auto()\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Para fins de replicabilidade\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.4.2 (2024-10-31)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Sequoia 15.3.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: America/Sao_Paulo\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] patchwork_1.3.0 showtext_0.9-7  showtextdb_3.0  sysfonts_0.8.9 \n[5] tidyr_1.3.1     dplyr_1.1.4     forcats_1.0.0   stringr_1.5.1  \n[9] ggplot2_3.5.1  \n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.6      jsonlite_1.8.9    compiler_4.4.2    tidyselect_1.2.1 \n [5] scales_1.3.0      yaml_2.3.10       fastmap_1.2.0     R6_2.6.1         \n [9] generics_0.1.3    knitr_1.49        htmlwidgets_1.6.4 tibble_3.2.1     \n[13] munsell_0.5.1     pillar_1.10.1     rlang_1.1.5       stringi_1.8.4    \n[17] xfun_0.50         cli_3.6.4         withr_3.0.2       magrittr_2.0.3   \n[21] digest_0.6.37     grid_4.4.2        rstudioapi_0.17.1 lifecycle_1.0.4  \n[25] vctrs_0.6.5       evaluate_1.0.3    glue_1.8.0        farver_2.1.2     \n[29] colorspace_2.1-1  rmarkdown_2.29    purrr_1.0.4       tools_4.4.2      \n[33] pkgconfig_2.0.3   htmltools_0.5.8.1\n```\n\n\n:::\n:::\n\n\n\n\n\n# Folha de SP\n\nA visualização abaixo vem da Folha de São Paulo em [matéria publicada em outubro de 2021](https://www1.folha.uol.com.br/mercado/2021/10/apenas-os-10-mais-ricos-podem-comprar-imovel-acima-de-r-600-mil-em-sp-diz-pesquisa.shtml). A matéria foi baseada num estudo que participei que tentava mensurar a acessibilidade financeira à moradia em São Paulo. Usando preços de anúncios online e microdados de renda, mensurei a maior (ou menor) acessibilidade via um indicador chamado HAI (housing affordability index). Neste\n\n![](/static/images/plot_folha_sp.png){fig-align=\"center\"}\n\nNeste exemplo vamos reproduzir apenas o gráfico de colunas. Para reproduzir o gráfico, copio os dados diretamente da imagem e tento chegar em tons de azul similares ao da imagem original. Não faço ideia qual a fonte que a Folha utiliza; usei a \"Roboto\" por ser relativamente similar e de fácil acesso.\n\n## Dados\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\n#> Dados do HAI\ndados <- tibble::tribble(\n  ~nome,             ~hai, ~type,\n  \"República\",       80.1,    1L,\n  \"Tatuapé\",         70.4,    1L,\n  \"Jabaquara\",       68.3,    1L,\n  \"Vila Mazzei\",     66.4,    1L,\n  \"Santana\",         62.8,    1L,\n  \"Jardim Brasil\",   51.9,    0L,\n  \"Belém\",           48.5,    0L,\n  \"Jardim Umarizal\", 42.1,    0L,\n  \"Parque Arariba\",  42.1,    0L,\n  \"Brasilândia\",     42.1,    0L\n)\n\ndados <- dados |> \n  mutate(nome = factor(nome), nome = fct_reorder(nome, hai))\n\n#> Cores dos grupos\ncores <- c(\"#B9D4EE\", \"#348ACA\")\n#> Adiciona a fonte Roboto\nfont_add_google(\"Roboto\", \"Roboto\")\n```\n:::\n\n\n\n## Replicando o gráfico\n\n### Básico\n\nA primeira versão do gráfico contém apenas o essencial da imagem. Temos um gráfico de colunas, virado na horizontal, com labels de texto. Além disso, as cores estão variando por grupo e temos uma legenda de cores. Sem utilizar a função `theme` o resultado do gráfico fica próximo, mas ainda muito distante do original.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(dados) +\n  geom_col(aes(x = nome, y = hai, fill = as.factor(type)), width = 0.5) +\n  geom_text(aes(x = nome, y = hai + 5, label = hai), color = \"#000000\") +\n  coord_flip() +\n  labs(x = NULL, y = NULL) +\n  scale_fill_manual(\n    name = \"\",\n    values = c(\"#B9D4EE\", \"#348ACA\"),\n    labels = c(\n      \"Para um casal com dois\\nfilhos e renda mediana**\",\n      \"Para quem mora sozinho\\ne tem renda mediana**\")\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\n### Completo\n\nO código abaixo tenta chegar num resultado próximo ao da imagem original. Essencialmente, precisamos:\n\n1.  Ajustar a cor do fundo.\n2.  Remover as linhas de grade.\n3.  Remover todas as informações dos eixos.\n4.  Ajustar a posição da legenda.\n5.  Mudar a fonte e a cor do texto.\n\nAlém destas mudanças, também deixo os números em negrito e uso a vírgula como separador de decimal. O resultado final segue abaixo. Eu utilizo `theme_minimal` como um template inicial.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(dados) +\n  geom_col(\n    aes(x = nome, y = hai, fill = as.factor(type)),\n    width = 0.5\n    ) +\n  geom_text(\n    aes(x = nome, y = hai + 5, label = format(hai, decimal.mark = \",\")),\n    size = 4,\n    vjust = 0.5,\n    family = \"Roboto\",\n    color = \"#000000\",\n    fontface = \"bold\") +\n  scale_y_continuous(expand = c(0, 0), limits = c(NA, 95)) +\n  coord_flip() +\n  labs(x = NULL, y = NULL, title = \"\") +\n  scale_fill_manual(\n    name = \"\",\n    values = c(\"#B9D4EE\", \"#348ACA\"),\n    labels = c(\n      \"Para um casal com dois\\nfilhos e renda mediana**\",\n      \"Para quem mora sozinho\\ne tem renda mediana**\")\n  ) +\n  theme_minimal() +\n  theme(\n    #> Fundo branco\n    panel.background = element_rect(fill = \"white\", color = \"white\"),\n    plot.background = element_rect(fill = \"white\", color = \"white\"),\n    #> Remove as linhas de grade\n    panel.grid = element_blank(),\n    #> Aplica a fonte Roboto\n    legend.text = element_text(family = \"Roboto\", color = \"#000000\"),\n    #> Ajusta o texto no eixo-y\n    axis.text.y = element_text(\n      family = \"Roboto\",\n      color = \"#000000\",\n      size = 12,\n      vjust = 0.4),\n    #> Remove o texto no eixo-x\n    axis.text.x = element_blank(),\n    #> Aumenta. margem superior para dar espaço para a legenda\n    plot.margin = margin(t = 40, r = 5, b = 5, l = 5),\n    #> Ajusta a posição e direção da legenda\n    legend.position = c(0.15, 1.1),\n    legend.direction = \"horizontal\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\n# Financial Times\n\nO gráfico abaixo mostra a evolução trimestral do preço dos imóveis em alguns países da OCDE. Mais especificamente, os valores representam a variação real dos índices de preços imobiliários dos respectivos países; para comparar a evolução entre os países, os valores foram indexados no valor do primeiro trimestre de 2000. O gráfico foi publicado nesta [matéria do Financial Times](https://www.ft.com/content/75942d5f-6bdf-40fb-b7ce-a48429ab84fc) e foi publicado março de 2021.\n\n![](/static/images/plot_ft.png){width=\"80%\" fig-align=\"center\"}\n\n## Dados\n\nPara reproduzir este gráfico, primeiro importo as séries via o pacote `OECD`. É preciso filtrar os países, limpar as datas e indexar os valores.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(OECD)\n\ndataset <- \"HOUSE_PRICES\"\nhp <- get_dataset(dataset)\ncountries <- c(\"CAN\", \"DEU\", \"USA\", \"ITA\", \"GBR\", \"FRA\", \"ESP\")\n\ndat <- hp |> \n  janitor::clean_names() |> \n  filter(ind == \"RHP\", cou %in% countries, stringr::str_length(time) > 4) |> \n  mutate(\n    date = zoo::as.Date(zoo::as.yearqtr(time, format = \"%Y-Q%q\")),\n    obs_value = as.numeric(obs_value)\n    ) |> \n  filter(date >= as.Date(\"2000-01-01\"), date <= as.Date(\"2022-10-01\")) |> \n  select(country = cou, date, index = obs_value)\n\ndat <- dat |> \n  mutate(reindex = index / first(index) * 100, .by = \"country\") \n\ncountry_order <- dat |> \n  filter(date == max(date)) |> \n  arrange(desc(reindex)) |> \n  pull(country)\n\ndat <- dat |> \n  mutate(country = factor(country, levels = country_order))\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n## Replicando o gráfico\n\n### Básico\n\nNa sua essência, as duas linhas de código abaixo reproduzem o gráfico do Financial Times.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(dat, aes(x = date, y = reindex, color = country)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\nPara recriar o gráfico vou precisar das cores das linhas. Tentei encontrar cores parecidas, mas os códigos abaixo não devem ser idênticos aos do gráfico original. Além disso, também preciso do nome - por extenso - dos países.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#> Cores\ncores <- c(\n  \"#1A48B0\", \"#EB5F8E\", \"#73DAE4\", \"#A1BC4B\", \"#2F8CC9\", \"#7B052D\", \"#BBB7B4\")\n#> Nomes dos países\ncountry_labels <- c(\n  \"Canada\", \"UK\", \"France\", \"US\", \"Spain\", \"Germany\", \"Italy\"\n  )\n```\n:::\n\n\n\nAs quebras no eixo-x são um pouco difíceis de emular, pois elas fogem do comportamento padrão do ggplot2. Assim, eu preciso definir ela manualmente e ainda fazer um pequeno \"hack\": essencialmente, eu crio um vetor que destaca os anos \"cheios\" (2000, 2005, ... 2020) e coloca valores vazios nos anos intermediários.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndate_breaks <- seq(as.Date(\"2000-01-01\"), as.Date(\"2022-01-01\"), by = \"year\")\ndate_labels <- c(date_breaks[c(1, 6, 11, 16, 21)])\nlabels_year <- format(date_labels, \"%Y\")\nlabs <- c(sapply(labels_year, function(x) {c(x, rep(\"\", 4))}))\nlabs <- labs[1:length(date_breaks)]\n\nlabs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"2000\" \"\"     \"\"     \"\"     \"\"     \"2005\" \"\"     \"\"     \"\"     \"\"    \n[11] \"2010\" \"\"     \"\"     \"\"     \"\"     \"2015\" \"\"     \"\"     \"\"     \"\"    \n[21] \"2020\" \"\"     \"\"    \n```\n\n\n:::\n:::\n\n\n\nEu mantive a ordem das cores, mas como a ordem dos países mudou com a atualização dos dados, elas não batem com as dos países no gráfico original.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(dat, aes(x = date, y = reindex, color = country)) +\n  geom_line(linewidth = 1) + \n  scale_color_manual(name = \"\", values = cores, labels = country_labels) +\n  scale_y_continuous(position = \"right\") +\n  scale_x_date(breaks = date_breaks, labels = labs) +\n  labs(\n    title = \"The divergent paths of house prices across countries\",\n    subtitle = \"Real house prices (Q1 2000 = 100)\",\n    caption = \"Source: OECD (replica FT)\",\n    x = NULL,\n    y = NULL) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\n### Completo\n\nPara chegar num resultado mais próximo do original é necessário mexer em vários elementos temáticos. Como fonte, usei a Gill Sans.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nfont_add(\"Gill Sans\", \"GillSans.ttc\")\nshowtext_auto()\n\nggplot(dat, aes(x = date, y = reindex, color = country)) +\n  geom_line(linewidth = 1.1) + \n  scale_color_manual(name = \"\", values = cores, labels = country_labels) +\n  scale_y_continuous(position = \"right\") +\n  scale_x_date(breaks = date_breaks, labels = labs) +\n  labs(\n    title = \"The divergent paths of house prices across countries\",\n    subtitle = \"Real house prices (Q1 2000 = 100)\",\n    caption = \"Source: OECD (replica)\",\n    x = NULL,\n    y = NULL) +\n  guides(color = guide_legend(nrow = 1)) +\n  theme_minimal() +\n  theme(\n    #> Muda a cor do fundo do gráfico\n    plot.background = element_rect(fill = \"#FEF1E4\", color = NA),\n    #> Remove todos as linhas de grade intermediárias\n    panel.grid.minor = element_blank(),\n    #> Remove as linhas de grade \"verticais\" que partem do eixo-x\n    panel.grid.major.x = element_blank(),\n    #> Altera a cor das linhas de grade \"horizontais\" que partem do eixo-y\n    panel.grid.major.y = element_line(color = \"#EAE3DF\"),\n    \n    #> Altera a fonte e a cor de todos os elementos textuais\n    text = element_text(family = \"Gill Sans\", color = \"#686261\"),\n    #> Ajusta o título do gráfico para ser maior e em preto\n    plot.title = element_text(size = 20, color = \"#000000\"),\n    #> Ajusta o tamanho da legenda\n    plot.subtitle = element_text(size = 12),\n    #> Ajusta a posição da \"Fonte\"\n    plot.caption = element_text(hjust = 0),\n    #> Altera o tamanho e a cor do texto nos eixos\n    axis.text = element_text(size = 11, color = \"#6B6865\"),\n    \n    #> Aumenta as margens do gráfico\n    plot.margin = margin(rep(10, 4)),\n    \n    #> Muda a cor do \"tiquezinho\" no eixo-x e deixa ele mais comprido\n    axis.ticks.x = element_line(color = \"#EADFD8\"),\n    axis.ticks.length = unit(7, \"pt\"),\n    \n    #> Altera a posição da legenda\n    legend.position = c(0.4, 1)\n    \n    )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\n# G1\n\n## Gráfico Original\n\nA imagem é um gráfico de colunas que mostra a taxa de desemprego média mensal no Brasil. A rigor, cada mês é um trimestre móvel. Os dados são da [PNAD/C do IBGE](https://www.ibge.gov.br/estatisticas/sociais/trabalho/9171-pesquisa-nacional-por-amostra-de-domicilios-continua-mensal.html). Há dois desafios nesta visualização: primeiro, o eixo-x, que apresenta o trimestre móvel junto com o ano (abreviado) e está virado em 90 graus; segundo, o valor em percentual que aparece no topo da coluna.\n\n![](images/Screenshot%202023-11-17%20at%2001.15.35.png){fig-align=\"center\"}\n\n## Dados\n\nImporto os dados diretamente da API do [SIDRA](https://sidra.ibge.gov.br/home/ipca15/brasil), o sistema de consultas do IBGE, via o pacote sidrar. Para mais informações sobre este pacote consulte o [meu post sobre](https://restateinsight.com/posts/general-posts/2023-08-importando-dados-sidra/).\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(sidrar)\n\nunemp <- sidrar::get_sidra(\n  6381,\n  variable = 4099,\n  period = \"202206-202306\"\n  )\n\n#> Limpeza de dados\ntbl_unemp <- unemp |> \n  # simplifica nome das colunas\n  janitor::clean_names() |> \n  # seleciona e renomeia colunas\n  select(\n    qtr = trimestre_movel_codigo,\n    date_label = trimestre_movel,\n    unemp = valor\n  ) |> \n  # faz alguns ajustes estéticos nos dados\n  mutate(\n    date_label = str_remove(date_label, \" 202[0-9]\"),\n    date_label = str_trim(date_label),\n    date = as.Date(paste0(qtr, \"01\"), format = \"%Y%m%d\"),\n    year = lubridate::year(date),\n    date_label = str_glue(\"{date_label}/{substr(year, 3, 4)}\"),\n    pct_label = paste(format(round(unemp, 1), decimal.mark = \",\"), \"%\")\n    )\n```\n:::\n\n\n\n## Replicando o gráfico\n\n### Básico\n\nO código abaixo reproduz os elementos mais marcantes do gráfico acima. Note que eu crio um grupo artificial (`fill = a`) para forçar o gráfico a ter uma legenda de cores.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(tbl_unemp, aes(x = date_label, y = unemp, fill = \"a\")) +\n  geom_col(alpha = 0.9, width = 0.8) +\n  geom_hline(yintercept = 0) +\n  geom_text(\n    aes(label = pct_label),\n    size = 3,\n    position = position_stack(0.95),\n    hjust = 0.5,\n    color = \"white\"\n  ) +\n  scale_y_continuous(breaks = 0:9, labels = \\(x) paste0(x, \"%\")) +\n  scale_fill_manual(\n    name = \"\",\n    values = \"#c6160d\",\n    labels = \"Índice no trimestre\"\n  ) +\n  theme_minimal() +\n  theme(\n    legend.position = \"top\",\n    legend.key = element_rect(color = NA),\n    axis.text.x = element_text(\n      angle = 90,\n      color = \"gray50\",\n      size = 10,\n      hjust = 1,\n      vjust = 1.5\n      )\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\n### Completo\n\nPara melhor reproduzir o gráfico, uso o pacote `ggtext` que me permite maior flexibilidade no título. Além disso utilizo um pequeno hack (`key_glyph='point'`) para fazer com que a legenda de cores seja no formato de um círculo ao invés de um quadrado.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(ggtext)\n\nggplot(tbl_unemp, aes(x = date_label, y = unemp, fill = \"a\", color = \"a\")) +\n  geom_col(alpha = 0.9, width = 0.8, key_glyph='point') +\n  geom_hline(yintercept = 0) +\n  geom_text(\n    aes(label = pct_label),\n    size = 3,\n    position = position_stack(0.95),\n    hjust = 0.5,\n    color = \"white\"\n  ) +\n  scale_y_continuous(breaks = 0:9, labels = \\(x) paste0(x, \"%\")) +\n  scale_fill_manual(\n    name = \"\",\n    values = \"#c6160d\",\n    labels = \"Índice no trimestre\"\n  ) +\n  scale_color_manual(\n    name = \"\",\n    values = \"#c6160d\",\n    labels = \"Índice no trimestre\"\n  ) +\n  guides(color = guide_legend(override.aes = list(size = 5))) +\n  labs(\n    title = \"<strong><span style='font-size:18px'>Evolu&ccedil;&atilde;o da taxa de desemprego no Brasil</span></strong><br>\n<span style='font-size:16px'>&Iacute;ndice no trimestre</span>\",\n    caption = \"Fonte: IBGE\",\n    x = NULL,\n    y = NULL) +\n  theme_minimal() +\n  theme(\n    legend.position = c(0.05, 1.1),\n    legend.key = element_rect(color = NA),\n    plot.background = element_rect(fill = \"#ffffff\", color = NA),\n    panel.background = element_rect(fill = \"#ffffff\", color = NA),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_line(linetype = 2),\n    axis.text.x = element_text(angle = 90, color = \"gray50\", size = 10, hjust = 1.85, vjust = 1.5),\n    axis.ticks = element_blank(),\n    plot.title = element_textbox(margin = margin(t = 0, r = 0, b = 30, l = 0), hjust = 0)\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\n# Nexo\n\n## Gráfico 1\n\nO gráfico mostra o ciclo de recessões e expansões nos países da América Latina, desde 1900. Os dados são do [projeto Maddison](https://www.rug.nl/ggdc/historicaldevelopment/maddison/?lang=en) e a [fonte para a matéria está aqui](https://www.nexojornal.com.br/grafico/2018/07/30/O-crescimento-e-a-queda-do-PIB-dos-países-ao-longo-do-tempo). [Num post anterior](https://restateinsight.com/posts/general-posts/repost-crescimento-pib-mundo/) mostrei como reproduzir este gráfico e os outros da matéria.\n\n![](/static/images/grafico_nexo_crescimento.png){fig-align=\"center\"}\n\n### Dados\n\nExiste um [pacote com os dados do projeto Maddison](https://cran.r-project.org/web/packages/maddison/vignettes/maddison_project_database.html), chamado `maddisson`, mas os dados estão um pouco defasados. Para o propósito de replicar o gráfico acima isto não é um problema, já que a série se encerra em 2016. Para atualizar o gráfico, contudo, é preciso baixar os [dados manualmente do site](https://www.rug.nl/ggdc/historicaldevelopment/maddison/data/mpd2020.xlsx). Felizmente, isto é bastante simples no R. O código abaixo mostra as duas opções.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Usando o pacote\nlibrary(maddison)\n\nmad <- maddison::maddison\n\n# Para trabalhar com dados mais atualizados\n\nlibrary(readxl)\n# url com a tabela em Excel\nurl <- \"https://www.rug.nl/ggdc/historicaldevelopment/maddison/data/mpd2020.xlsx\"\n#> Cria um path temporario e tenta baixar os dados\ntemp_path <- tempfile(\"maddison.xlsx\")\n\ntry(download.file(url = url, destfile = temp_path, mode = \"wb\", quiet = TRUE))\n\nif (file.exists(temp_path)) {\n  mad <- readxl::read_excel(temp_path, sheet = 3)\n}\n```\n:::\n\n\n\nO código abaixo faz a manipulação de dados necessária. Seleciona-se os países manualmente e cria-se uma variável binária que indica se o país encontra-se em expansão ou recessão em cada ano.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlatam_countries <- c(\n  \"ARG\", \"BOL\", \"BRA\", \"CHL\", \"COL\", \"CUB\", \"DOM\", \"ECU\", \"GTM\", \"HND\", \"HTI\",\n  \"MEX\", \"PER\", \"VEN\")\n\nlatam <- mad |> \n  # Filtra apenas as linhas dos países selecionados\n  filter(\n    countrycode %in% latam_countries,\n    year >= 1900\n    ) |> \n  # Agrupa por país\n  group_by(country) |> \n  mutate(\n    # Calcula a variação do PIB per capita de cada país\n    d_gdppc = gdppc / lag(gdppc) - 1,\n    # Cria uma variável binária para indicar se houve crescimento \n    growth = factor(if_else(d_gdppc > 0, 1L, 0L)),\n    # Remove parêntesis e o texto dentro dele\n    country = str_remove(country, \" \\\\(.+\\\\)\"),\n    # Abrevia o nome da República Dominicana\n    country = str_replace(country, \"Dominican Republic\", \"Dominican Rep.\"),\n    country = factor(country),\n    country = fct_rev(country)\n  ) |> \n  ungroup()\n```\n:::\n\n\n\n### Replicando o gráfico\n\n### Básico\n\nA visualização é, essencialmente, um gráfico de calor de clusters, isto é, são vários quadrados coloridos adjacentes. Para desenhar este gráfico utilizo o `geom_tile`. Note que também duplico o eixo-x e coloco linhas verticais tracejadas no gráfico. Para conhecer mais sobre este tipo de gráfico veja meu tutorial sobre [mapas de calor](https://restateinsight.com/posts/ggplot2-tutorial/11-grafico-calor).\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(latam, aes(year, country)) +\n    geom_tile(aes(fill = growth), height = .85, width = 1) +\n    geom_vline(\n      xintercept = c(1900, 1925, 1950, 1975, 2000, 2016),      \n      linetype = 2,                                           \n      colour = \"gray65\"\n      ) +                                      \n    scale_x_continuous(\n      breaks = c(1900, 1925, 1950, 1975, 2000, 2016),\n      expand = c(0,0),\n      sec.axis = dup_axis()\n      )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-20-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\n### Completo\n\nO gráfico completo faz algumas modificações na legenda de cores e diversas alterações temáticas no gráfico. O portal Nexo utiliza a fonte [Gotham Rounded](https://fontsgeek.com/gotham-rounded-font) em algumas variantes. Para usar esta fonte é preciso tê-la instalada. Para evitar problemas, o código abaixo verifica se as fontes necessárias estão instaladas; caso contrário, usa-se a fonte Montserrat, do Google Fonts.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Verifica a fonte do texto\n\ndbfonts <- font_files()\nnexo_fonts <- c(\"Gotham Rounded Bold\", \"Gotham Rounded Light\")\ncond <- str_glue(\"({nexo_fonts[1]})|({nexo_fonts[2]})\")\ncheck_fonts <- all(str_detect(dbfonts$family, cond))\n\nfont <- ifelse(check_fonts, \"Gotham Rounded Bold\", \"Montserrat\")\nfont_axis <- ifelse(check_fonts, \"Gotham Rounded Light\", \"Montserrat\")\nfont_title <- \"Crimson Text\"\n\nif (check_fonts) {\n  # Adiciona as fonts Gotham Rounded Bold e Light\n  font_add(\"Gotham Rounded Bold\", \"Gotham Rounded Bold.otf\")\n  font_add(\"Gotham Rounded Light\", \"Gotham Rounded Light.otf\")\n  } else {\n  # Adiciona Montserrat caso as fontes Gotham nao estejam disponiveis\n  font_add_google(\"Montserrat\", \"Montserrat\")\n  }\n\nfont_add_google(\"Crimson Pro\", \"Crimson Text\")\n\nshowtext_auto()\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(latam, aes(year, country)) +\n  geom_tile(aes(fill = growth), height = .85, width = 1) +\n  geom_vline(\n    xintercept = c(1900, 1925, 1950, 1975, 2000, 2016),      \n    linetype = 2,                                           \n    colour = \"gray65\"\n    ) +                                      \n  scale_x_continuous(\n    breaks = c(1900, 1925, 1950, 1975, 2000, 2016),\n    expand = c(0,0),\n    sec.axis = dup_axis()\n    ) +                         \n  scale_fill_discrete(\n    breaks = c(0,1),\n    name = \"VARIAÇÃO DO PIB NO MUNDO\\nPor ano\",\n    labels = c(\"PIB EM QUEDA\", \"PIB EM CRESCIMENTO\"), \n    na.value = \"gray90\"\n    ) +\n  labs(title = \"América Latina\", x = NULL, y = NULL) +\n  theme(\n    # Fundo do gráfico\n    panel.grid = element_blank(),\n    # Define as margens do gráfico\n    plot.margin = unit(c(1, 1, .5, 1), \"cm\"),\n    # Eixos\n    axis.text.y = element_text(vjust = .4),\n    axis.ticks = element_line(size = .4),\n    axis.text = element_text(family  = font_axis, size = 8),\n    # Legenda\n    legend.position = \"top\",\n    legend.text = element_text(\n      size = 8,\n      colour = \"gray20\",\n      family = font\n      ),\n    legend.title = element_text(\n      size = 12,\n      colour = \"gray20\",\n      family = font\n      ),\n    # Título\n    plot.title = element_text(family = font_title, size = 18)\n    )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\n## Gráfico 2\n\nO gráfico mostra o percentual de carteiras de habilitação por faixa etária e por sexo, no Brasio, em janeiro de 2024. Os dados são do Renach (Registro Nacional de Condutores habilitados). [Link para a matéria original](https://www.nexojornal.com.br/grafico/2024/03/28/cnh-perfil-motorista-brasil).\n\n### Gráfico Original\n\n![](images/Screenshot%202024-04-04%20at%2011.48.40.png){fig-align=\"center\"}\n\n### Dados\n\nJá que nosso foco é somente em replicar a visualização, vamos copiar os dados diretamente da tabela. Haverá um pequeno erro de precisão no processo.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Copia os dados do gráfico\ntabela <- tribble(\n  ~age_label, ~masc, ~femi,\n  \"18 a 30\", 0.627, 0.373,\n  \"31 a 40\", 0.622, 0.378,\n  \"41 a 50\", 0.641, 0.359,\n  \"51 a 60\", 0.674, 0.326,\n  \"61 a 70\", 0.709, 0.291,\n  \"71 ou +\", 0.774, 0.291\n)\n\n# Formata os dados\ndados <- tabela |> \n  pivot_longer(cols = -\"age_label\", names_to = \"sex\", values_to = \"share\") |> \n  mutate(\n    # Converte as variáveis categóricas para factor\n    sex = factor(sex,\n                 levels = c(\"femi\", \"masc\"),\n                 labels = c(\"Feminino\", \"Masculino\")\n                 ),\n    age_min = as.numeric(str_sub(age_label, 1, 2)),\n    age_label = factor(age_label),\n    age_label = fct_reorder(age_label, -age_min),\n    # Cria o label de percentual para facilitar\n    share_label = paste0(format(share * 100, decimal.mark = \",\"), \"%\")\n  )\n```\n:::\n\n\n\n### Replicando o Gráfico\n\n### Básico\n\nEssencialmente, a visualização do Nexo é um gráfico de colunas deitado; o valor percentual de cada coluna é impresso nos cantos do gráfico e as cores representam os diferentes sexos. O código abaixo captura o essencial do gráfico.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(dados, aes(age_label, share, fill = sex)) +\n  geom_col(position = \"fill\") +\n  geom_hline(yintercept = 0, lwd = 1) +\n  geom_hline(yintercept = 1, lwd = 1) +\n  geom_hline(yintercept = 0.5, linetype = 2, lwd = 0.25) +\n  geom_text(\n    data = filter(dados, sex == \"Masculino\"),\n    aes(age_label, 0.075, label = share_label),\n    color = \"white\"\n  ) +\n  geom_text(\n    data = filter(dados, sex == \"Feminino\"),\n    aes(age_label, 0.925, label = share_label),\n    color = \"white\"\n  ) +\n  coord_flip() +\n  scale_fill_manual(values = c(\"#40c2cf\", \"#22678c\")) +\n  guides(fill = \"none\") +\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.grid.minor = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\n### Completo\n\nO gráfico completo faz diversas alterações temáticas no gráfico. O portal Nexo utiliza a fonte [Gotham Rounded](https://fontsgeek.com/gotham-rounded-font) em algumas variantes. Para usar esta fonte é preciso tê-la instalada. Para evitar problemas, o código abaixo verifica se as fontes necessárias estão instaladas; caso contrário, usa-se a fonte Montserrat, do Google Fonts.\n\nO código abaixo replica o gráfico sem a legenda de cores e sem ajustar o alinhamento do título.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(dados, aes(age_label, share, fill = sex)) +\n  geom_col(position = \"fill\") +\n  geom_hline(yintercept = 0, lwd = 1) +\n  geom_hline(yintercept = 1, lwd = 1) +\n  geom_hline(yintercept = 0.5, linetype = 2, lwd = 0.25) +\n  geom_text(\n    data = filter(dados, sex == \"Masculino\"),\n    aes(age_label, 0.1, label = share_label),\n    color = \"white\",\n    family = \"Gotham Rounded Bold\",\n    size = 5\n  ) +\n  geom_text(\n    data = filter(dados, sex == \"Feminino\"),\n    aes(age_label, 0.9, label = share_label),\n    color = \"white\",\n    family = \"Gotham Rounded Bold\",\n    size = 5\n  ) +\n  scale_y_continuous(\n    breaks = c(0, 0.5, 1),\n    labels = c(\"0%\", \"50%\", \"100%\"),\n    position = \"right\"\n    ) +\n  coord_flip() +\n  scale_fill_manual(values = c(\"#40c2cf\", \"#22678c\")) +\n  guides(fill = \"none\") +\n  labs(\n    title = \"Percentual de carteiras de habilitação\",\n    subtitle = \"POR FAIXA ETÁRIA, EM JANEIRO DE 2024\",\n    x = NULL,\n    y = NULL\n  ) +\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.grid.minor = element_blank(),\n    axis.text.y = element_text(\n      size = 14,\n      color = \"#000000\",\n      family = \"Gotham Rounded Bold\"\n      ),\n    axis.text.x = element_text(\n      size = 14,\n      color = \"#747474\",\n      family = \"Gotham Rounded Light\"\n    ),\n    plot.title = element_text(\n      family = \"Crimson Text\",\n      size = 20,\n      face = \"bold\",\n      hjust = -0.25),\n    plot.subtitle = element_text(\n      family = \"Gotham Rounded Medium\",\n      size = 10,\n      hjust = -0.2\n    )\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\nHá várias maneiras de replicar a legenda do gráfico original. Talvez a mais simples seja usar algum software de edição de imagem. Uma solução usando apenas ggplot2 é criar um gráfico auxiliar, que contém a legenda e então compor os gráficos usando `patchwork`.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\n# Gráfico com a legenda --------------------------------------------\n\n# data.frame auxiliar para montar a legenda\ndf_aux <- tibble(\n  x = 1,\n  y = c(0.5, 0.5),\n  ypos = c(0.25, 0.75),\n  label = c(\"Masculino\", \"Feminino\")\n)\n\n# Gráfico com a legenda de cores\np_legend <- ggplot(df_aux, aes(x, y, fill = label)) +\n  geom_col() +\n  geom_text(\n    aes(y = ypos, label = label),\n    color = \"white\",\n    family = \"Gotham Rounded Bold\",\n    size = 3) +\n  scale_fill_manual(values = c(\"#40c2cf\", \"#22678c\")) +\n  guides(fill = 'none') +\n  coord_flip() +\n  theme_void()\n\n# Gráfico principal --------------------------------------------\n\n# Gráfico principal (sem título e sem subtítulo)\np_main <- ggplot(dados, aes(age_label, share, fill = sex)) +\n  geom_col(position = \"fill\") +\n  geom_hline(yintercept = 0, lwd = 1) +\n  geom_hline(yintercept = 1, lwd = 1) +\n  geom_hline(yintercept = 0.5, linetype = 2, lwd = 0.25) +\n  geom_text(\n    data = filter(dados, sex == \"Masculino\"),\n    aes(age_label, 0.075, label = share_label),\n    color = \"white\",\n    family = \"Gotham Rounded Bold\",\n    size = 5\n  ) +\n  geom_text(\n    data = filter(dados, sex == \"Feminino\"),\n    aes(age_label, 0.925, label = share_label),\n    color = \"white\",\n    family = \"Gotham Rounded Bold\",\n    size = 5\n  ) +\n  scale_y_continuous(\n    breaks = c(0, 0.5, 1),\n    labels = c(\"0%\", \"50%\", \"100%\"),\n    position = \"right\"\n  ) +\n  coord_flip() +\n  scale_fill_manual(values = c(\"#40c2cf\", \"#22678c\")) +\n  guides(fill = \"none\") +\n  labs(x = NULL,y = NULL) +\n  theme_minimal() +\n  theme(\n    panel.grid = element_blank(),\n    panel.grid.minor = element_blank(),\n    axis.text.y = element_text(\n      size = 14,\n      color = \"#000000\",\n      family = \"Gotham Rounded Bold\"\n    ),\n    axis.text.x = element_text(\n      size = 14,\n      color = \"#747474\",\n      family = \"Gotham Rounded Light\"\n    )\n  )\n\n# Compor os gráficos -----------------------------------------------\n\n# Coloca um espaço vazio acima do gráfico principal\npanel <- plot_spacer() / p_main + plot_layout(heights = c(0.1, 0.9))\n\n# Gráfico final\npanel +\n  # Insere a legenda no espaço vazio acima do gráfico principal\n  inset_element(p_legend, left = -0.125, bottom = 1.1, right = 0.5, top = 1.2) +\n  # Adiciona título e subtítulo\n  plot_annotation(\n    title = \"Percentual de carteiras de habilitação\",\n    subtitle = \"POR FAIXA ETÁRIA, EM JANEIRO DE 2024\",\n  ) &\n  # Ajusta fonte, tamanho e posição\n  theme(\n    plot.title = element_text(\n      family = \"Crimson Text\",\n      size = 20,\n      face = \"bold\",\n      hjust = 0.05),\n    plot.subtitle = element_text(\n      family = \"Gotham Rounded Medium\",\n      size = 10,\n      hjust = 0.040\n    )\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-26-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\n# The Economist\n\n## Gráfico 1\n\nEsta visualização da The Economist mostra um ranking da riqueza entre países. O [artigo original](https://www.economist.com/graphic-detail/2023/12/15/the-worlds-richest-countries-in-2023) discute diferentes maneiras de mensurar e de comparar a riqueza entre países. Vamos nos focar apenas no gráfico abaixo. Este gráfico mostra um ranking dos países mais ricos do mundo segundo três métricas.\n\nNa primeira \"coluna\", temos o PIB per capita a preços correntes convencional. Esta é a medida mais crua de riqueza disponível. Na segunda coluna temos o PIB per capita em [paridade de poder de compra (PPC)](https://pt.wikipedia.org/wiki/Paridade_do_poder_de_compra), que ajusta a medida do PIB per capita pelo \"custo de vida\" de cada país. Por fim, a última coluna ajusta o PIB per capita em PPC pela número médio de horas trabalhado em cada país. Note como esta medida eleva consideravelmente a posição de países europeus como Bélgica, Alemanha, Áustria e Dinamarca, enquanto derruba alguns países como EUA e Singapura.\n\nNum post anterior, eu [descrevi em maiores detalhes este tipo de gráfico](https://restateinsight.com/posts/general-posts/2023-12-bump-plots/).\n\n![](/static/images/economist_bump_plot.jpeg){fig-align=\"center\" width=\"400\"}\n\n### Dados\n\nOs dados originais estão disponíveis on [GitHub da The Economist](https://github.com/TheEconomist) mas eu não consegui encontrar o código que gera o gráfico acima. Como resultado, vou tentar adivinhar quais colunas, de fato, são utilizadas no gráfico. Além disso, como a fonte da The Economist é proprietária vou utilizar a Lato, da Google Fonts.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\ndat <- readr::read_csv(\"/Users/viniciusoike/Documents/GitHub/restateinsight/static/data/gdp_over_hours_worked_with_estimated_hours_worked.csv\")\n\ncountries_sel <- c(\"Norway\", \"Belgium\", \"Austria\", \"United States\", \"Germany\")\n\nmeasures <- c(\"gdp_over_pop\", \"gdp_ppp_over_pop\", \"gdp_ppp_over_k_hours_worked\")\n\nsub <- dat |> \n  select(country, year, all_of(measures)) |> \n  na.omit()\n\nranking <- sub |> \n  filter(year == max(year)) |> \n  pivot_longer(cols = -c(country, year), names_to = \"measure\") |> \n  mutate(rank = rank(-value), .by = \"measure\")\n\nranking <- ranking |> \n  mutate(\n    highlight = if_else(country %in% countries_sel, country, \"\"),\n    highlight = factor(highlight, levels = c(countries_sel, \"\")),\n    is_highlight = factor(if_else(country %in% countries_sel, 1L, 0L)),\n    rank_labels = if_else(rank %in% c(1, 5, 10, 15, 20), rank, NA),\n    rank_labels = stringr::str_replace(rank_labels, \"^1$\", \"1st\"),\n    measure = factor(measure, levels = measures)\n    )\n\ncores <- c(\"#101010\", \"#f7443e\", \"#8db0cc\", \"#fa9494\", \"#225d9f\", \"#c7c7c7\")\n\ndf_gdp <- tibble(\n  measure = measures,\n  measure_label = c(\n    \"GDP per person at market rates\",\n    \"Adjusted for cost differences*\",\n    \"Adjusted for costs and hours worked\"\n  ),\n  position = -1.5\n)\n\ndf_gdp <- df_gdp |> \n  mutate(\n    measure = factor(measure, levels = measures),\n    measure_label = stringr::str_wrap(measure_label, width = 12),\n    measure_label = paste0(\"  \", measure_label)\n    )\n```\n:::\n\n\n\n### Replicando o gráfico\n\n### Básico\n\nA versão simplificada do gráfico está resumida no código abaixo. Vale notar o uso da coord_cartesian para \"cortar o gráfico\" sem perder informação. Não é muito usual utilizar `linewidth` como um elemento estético dentro de `aes` mas pode-se ver como isto é bastante simples e como isto economiza algumas linhas de código, quando comparado com o gráfico anterior.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggbump)\n\nggplot(ranking, aes(measure, rank, group = country)) +\n  geom_bump(aes(color = highlight, linewidth = is_highlight)) +\n  geom_point(shape = 21, color = \"white\", aes(fill = highlight), size = 3) +\n  geom_text(\n    data = filter(ranking, measure == measures[[3]]),\n    aes(x = measure, y = rank, label = country),\n    nudge_x = 0.05,\n    hjust = 0,\n    family = \"Lato\"\n  ) +\n  coord_cartesian(ylim = c(21, -2)) +\n  scale_color_manual(values = cores) +\n  scale_fill_manual(values = cores) +\n  scale_linewidth_manual(values = c(0.5, 1.2))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-28-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\n### Completo\n\nO objetivo deste post é de sempre fazer o máximo possível usando `ggplot2` mas, na prática, as caixas de texto acima do gráfico podem ser feitas num software externo. Não é muito fácil usar caracteres especiais (neste caso, flechas) e a própria fonte (Lato) não inclui flechas em unicode. Pode-se melhorar a ordem da sobreposição das linhas usando `geom_bump` duas vezes como fizemos no gráfico dos imóveis, mas isto exigiria várias linhas adicionais de código.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nfont_add_google(\"Lato\", \"Lato\")\nshowtext_opts(dpi = 300)\nshowtext_auto()\n\nggplot(ranking, aes(measure, rank, group = country)) +\n  geom_bump(aes(color = highlight, linewidth = is_highlight)) +\n  geom_point(shape = 21, color = \"white\", aes(fill = highlight), size = 3) +\n  geom_text(\n    data = filter(ranking, measure == measures[[3]], is_highlight != 1L),\n    aes(x = measure, y = rank, label = country),\n    nudge_x = 0.05,\n    hjust = 0,\n    family = \"Lato\",\n    size = 3\n  ) +\n  geom_text(\n    data = filter(ranking, measure == measures[[3]], is_highlight == 1L),\n    aes(x = measure, y = rank, label = country),\n    nudge_x = 0.05,\n    hjust = 0,\n    family = \"Lato\",\n    fontface = \"bold\",\n    size = 3\n  ) +\n  geom_text(\n    data = filter(ranking, measure == measures[[1]]),\n    aes(x = measure, y = rank, label = rank_labels),\n    nudge_x = -0.15,\n    hjust = 0,\n    family = \"Lato\",\n    size = 3\n  ) +\n  geom_text(\n    data = df_gdp,\n    aes(x = measure, y = position, label = measure_label),\n    inherit.aes = FALSE,\n    hjust = 0,\n    family = \"Lato\",\n    fontface = \"bold\",\n    size = 3\n  ) +\n  annotate(\"text\", x = 1, y = -2.5, label = expression(\"\\u2193\")) +\n  annotate(\"text\", x = 2, y = -2.5, label = expression(\"\\u2193\")) +\n  annotate(\"text\", x = 3, y = -2.5, label = expression(\"\\u2193\")) +\n  coord_cartesian(ylim = c(21, -2)) +\n  scale_color_manual(values = cores) +\n  scale_fill_manual(values = cores) +\n  scale_linewidth_manual(values = c(0.5, 1.2)) +\n  labs(x = NULL, y = NULL) +\n  theme_minimal() +\n  theme(\n    panel.background = element_rect(fill = \"#ffffff\", color = NA),\n    plot.background = element_rect(fill = \"#ffffff\", color = NA),\n    panel.grid = element_blank(),\n    legend.position = \"none\",\n    axis.text = element_blank()\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-29-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\n## Gráfico 2\n\nUma recente edição da revista inglesa [The Economist](https://www.economist.com/) exibe uma [série de listras coloridas em sua capa](https://pbs.twimg.com/media/EE0hWYAXUAATHvv?format=jpg&name=4096x4096). Elas formam um degradê que vai de um azul escuro até um vermelho intenso. Cada listra representa a temperatura de um ano e a linha do tempo vai desde o 1850 até o presente. A mensagem é bastante clara: o planeta esta cada ano mais quente e é nos anos recentes que estão concentradas as maiores altas de temperatura. Esta imagem é creditada a [Ed Hawkings](http://www.met.reading.ac.uk/~ed/home/index.php), editor do [Climate Lab Book](https://www.climate-lab-book.ac.uk/2018/warming-stripes/).\n\n![](images/20190921_cna400.jpg.avif){fig-align=\"center\"}\n\n### Dados\n\nPara ser preciso, a imagem não plota a temperatura de cada ano, mas sim o quanto cada ano se desvia da temperatura média do período 1971-2000. Isto é, anos acima dessa média têm um valor positivo, valores abaixo dessa média, valores negativos.\n\nExiste uma base `gtemp_both` do pacote `astsa` que mede estas anomalias climáticas no período 1850-2023. Contudo, esta série usa o período 1991-2020 como referência. Assim, os valores são um pouco diferentes. Ainda assim, acho que vale a pena usar esta base pela sua conveniência.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(astsa)\n\n# Converte o objeto para data.frame\ntemperature <- tibble(\n  year = as.numeric(time(gtemp_both)),\n  temp = as.numeric(gtemp_both)\n)\n```\n:::\n\n\n\n### Replicando o gráfico\n\n### Básico\n\nÉ possível reproduzir o essencial deste gráfico com poucas linhas de código. Aqui, utilizo `geom_tile` para fazer as listras e `scale_fill_gradient2` para construir uma paleta de cores divergente.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Monta o gráfico\nggplot(temperature, aes(x = year, y = 0, fill = temp)) +\n  geom_tile() +\n  scale_fill_gradient2(low = \"#104e8b\", high = \"#ff0000\") +\n  guides(fill = \"none\") +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-31-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\n### Completo\n\nO gráfico original usa a paleta de cores do ColorBrewer: especificamente, ela combina as cores mais saturadas das paletas \"Blues\" e \"Reds\". A fonte do texto é Georgia. Eu adapto um pouco os anos já que os dados estão mais atualizados.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nfont_add(\"Georgia\", \"Georgia.ttf\")\nshowtext_auto()\n\n# Paleta de cores\nblues <- RColorBrewer::brewer.pal(9, \"Blues\")[2:9]\nreds <- RColorBrewer::brewer.pal(9, \"Reds\")[2:9]\n\npalette <- c(rev(blues), reds)\n\n# Data.frames auxiliares para plotar as anotações de texto\ndf_aux_title <- tibble(x = 1940, y = 0, label = \"The Climate Issue\")\ndf_aux_anos <- tibble(\n  label = seq(1860, 2020, 40),\n  x = c(1865, 1900, 1940, 1980, 2010)\n)\n\nggplot() +\n  geom_tile(data = temperature, aes(x = year, y = 0, fill = temp)) +\n  geom_text(\n    data = df_aux_anos,\n    aes(x = x, y = 0, label = label),\n    vjust = 1.5,\n    colour = \"white\",\n    size = 6,\n    family = \"Georgia\") +\n  geom_text(\n    data = df_aux_title,\n    aes(x = x, y = 0.05, label = label),\n    family = \"Georgia\",\n    size = 11,\n    colour = \"white\") +\n  geom_hline(yintercept = 0, colour = \"white\", size = 1) +\n  scale_fill_gradientn(colors = palette) +\n  guides(fill = \"none\") +\n  labs(x = NULL, y = NULL) +\n  theme(\n    axis.title = element_blank(),\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    panel.background = element_rect(fill = NA),\n    plot.margin = margin(c(0, 0, 0, 0))\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-32-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\nO resultado acima é bastante satisfatório, mesmo quando consideramos que a base de dados é um pouco diferente e que a série inclui dados mais atuais. Vale notar que a visualização abaixo não é a mais precisa, pois alguns valores positivos estão sendo mapeados em tons de azul-claro.\n\nPara chegar numa visualização mais precisa é preciso ajustar a paleta de cores.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nblues <- RColorBrewer::brewer.pal(9, \"Blues\")[3:6]\nreds <- RColorBrewer::brewer.pal(9, \"Reds\")[2:9]\npalette <- c(rev(blues), reds)\n\nggplot(temperature) +\n  geom_tile(aes(x = year, y = 0, fill = temp), height = 3) +\n  geom_line(aes(year, temp)) +\n  geom_point(aes(year, temp)) +\n  labs(x = NULL, y = NULL) +\n  coord_cartesian(ylim = c(-1, NA)) +\n  scale_fill_stepsn(\n    name = \"\",\n    colors = palette,\n    breaks = round(seq(-0.6, 1.2, 0.2), 1)\n    ) +\n  theme_minimal() +\n  theme(\n    legend.position = \"bottom\",\n    legend.key.size = unit(1.5, \"cm\")\n    )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-33-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\nO resultado final (atualizado) fica assim.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot() +\n  geom_tile(data = temperature, aes(x = year, y = 0, fill = temp)) +\n  geom_text(\n    data = df_aux_anos,\n    aes(x = x, y = 0, label = label),\n    vjust = 1.5,\n    colour = \"white\",\n    size = 5,\n    family = \"Georgia\") +\n  geom_text(\n    data = df_aux_title,\n    aes(x = x, y = 0.05, label = label),\n    family = \"Georgia\",\n    size = 10,\n    colour = \"white\") +\n  geom_hline(yintercept = 0, colour = \"white\", size = 1) +\n  scale_fill_stepsn(colors = palette, breaks = round(seq(-0.6, 1.2, 0.2), 1)) +\n  guides(fill = \"none\") +\n  labs(x = NULL, y = NULL) +\n  theme(\n    axis.title = element_blank(),\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    panel.background = element_rect(fill = NA),\n    plot.margin = margin(c(0, 0, 0, 0))\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-34-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n# OWID\n\nA visualização abaixo é do site OurWorldInData (OWID) e mostra a relação entre satisfação pessoal (\"felicidade\") e PIB per capita. O índice de felicidade varia de 0 a 10, enquanto o PIB per capita é mensurado em dólares (PPP) numa escala log. A fonte original do gráfico está no [link](https://ourworldindata.org/happiness-and-life-satisfaction#the-link-between-happiness-and-income). Já discuti sobre este gráfico em maiores detalhes [no meu outro post](https://restateinsight.com/posts/general-posts/2023-09-happiness/).\n\n![](/static/images/owid_happiness.png)\n\n## Gráfico\n\n### Dados\n\nOs dados podem ser baixados diretamente do site da [OWID](https://ourworldindata.org/happiness-and-life-satisfaction#the-link-between-happiness-and-income) ou do meu [GitHub](https://github.com/viniciusoike/restateinsight/raw/main/static/data/gdp-vs-happiness.csv).\n\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nowid <- readr::read_csv(\n  \"https://github.com/viniciusoike/restateinsight/raw/main/static/data/gdp-vs-happiness.csv\"\n  )\n```\n:::\n\n\n\nÉ preciso fazer apenas alguns ajustes nos dados. Em particular precisamos filtrar o ano e juntar a tabela de países com a de continentes.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\ndat <- owid |> \n  janitor::clean_names() |> \n  rename(\n    life_satisfaction = cantril_ladder_score,\n    gdppc = gdp_per_capita_ppp_constant_2017_international,\n    pop = population_historical_estimates\n  ) |>\n  filter(!is.na(gdppc), !is.na(life_satisfaction)) |> \n  mutate(gdppc = log10(gdppc)) |> \n  group_by(entity) |> \n  filter(year == max(year)) |> \n  ungroup() |> \n  select(entity, pop, gdppc, life_satisfaction)\n\ndim_continent <- owid |> \n  select(entity, continent) |> \n  filter(!is.na(continent), !is.na(entity)) |> \n  distinct()\n\ndat <- left_join(dat, dim_continent, by = \"entity\")\n```\n:::\n\n\n\n### Replicando o gráfico\n\n### Básico\n\nA visualização, fundamentalmente, é um gráfico de dispersão em que as cores representam o continente de cada país e em que o tamanho do círculo é proporcional à população de cada país. É tipo de gráfico também é conhecido como \"bubble plot\".\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(dat, aes(x = gdppc, y = life_satisfaction)) +\n  geom_point(\n    aes(fill = continent, size = pop),\n    color = \"#A5A9A9\",\n    alpha = 0.8,\n    shape = 21\n    )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-38-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\n### Completo\n\nA versão finalizada do gráfico exige bastante trabalho manual, já que é necessário destacar o nome dos países. Fora isso, é preciso ajustar o tamanho dos círculos, trocar a paleta de cores, inserir as informações textuais e ajustar a legenda de cores. Para este gráfico uso as fontes [Lato](https://fonts.google.com/specimen/Lato?query=lato) e [Playfair Display](https://fonts.google.com/specimen/Playfair+Display). Assim como no gráfico do G1, é preciso usar `override.aes` para modificar a legenda de cores.\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nfont_add_google(\"Lato\", \"Lato\")\nfont_add_google(\"Playfair Display\", \"Playfair Display\")\nshowtext_opts(dpi = 300)\nshowtext_auto()\n\n# Tema do gráfico\ntheme_owid <- theme_minimal() +\n  theme(\n    # Linhas de grade\n    panel.grid.minor = element_blank(),\n    panel.grid.major = element_line(linetype = 3, color = \"#DDDDDD\"),\n    \n    # Título, subtítulo e nota de rodapé\n    text = element_text(family = \"Lato\"),\n    title = element_text(family = \"Lato\"),\n    \n    plot.caption = element_text(color = \"#777777\", hjust = 0, size = 8),\n    plot.title = element_text(\n      color = \"#444444\",\n      family = \"Playfair Display\",\n      size = 18),\n    plot.subtitle = element_text(color = \"#666666\", size = 11),\n    # Textos nos eixos\n    axis.title = element_text(color = \"#000000\", size = 9),\n    axis.text = element_text(color = \"#666666\", size = 12),\n    # Legenda de cores\n    legend.key.size = unit(5, \"pt\"),\n    legend.position = \"right\",\n    legend.text = element_text(size = 10),\n    # Margens do gráfico\n    plot.margin = margin(rep(10, 4))\n  )\n\n#> Countries to highlight\nsel_countries <- c(\n  \"Ireland\", \"Qatar\", \"Hong Kong\", \"Switzerland\", \"United States\", \"France\",\n  \"Japan\", \"Costa Rica\", \"Russia\", \"Turkey\", \"China\", \"Brazil\", \"Indonesia\",\n  \"Iran\", \"Egypt\", \"Botswana\", \"Lebanon\", \"Philippines\", \"Bolivia\", \"Pakistan\",\n  \"Bangladesh\", \"Nepal\", \"Senegal\", \"Burkina Faso\", \"Ethiopia\", \"Tanzania\",\n  \"Democratic Republic of Congo\", \"Mozambique\", \" Somalia\", \"Chad\", \"Malawi\",\n  \"Burundi\", \"India\")\n\n#> Caption\ncaption <- \"Source: World Happiness Report (2023), Data compiled from multiple sources by World Bank\\nNote: GDP per capita is expressed in international-$ at 2017 prices.\\nOurWorldInData.org/happiness-and-life-satisfacation/\"\n#> Subtitle\nsubtitle <- \"Self-reported life satisfaction is measured on a scale ranging from 0-10, where 10 is the highest possible life\\nsatisfaction. GDP per capita is adjusted for inflation and differences in the cost of living between countries.\"\n\ndftext <- dat |> \n  mutate(highlight = if_else(entity %in% sel_countries, entity, NA))\n\n#> x-axis labels\nxbreaks <- c(3, 3.3, 3.7, 4, 4.3, 5)\nxlabels <- c(1000, 2000, 5000, 10000, 20000, 100000)\nxlabels <- paste0(\"$\", format(xlabels, big.mark = \",\", scientific = FALSE))\n\n#> Colors\ncolors <- c(\"#A2559C\", \"#00847E\", \"#4C6A9C\", \"#E56E5A\", \"#9A5129\", \"#883039\")\n\n# Gráfico final\nggplot(dat, aes(x = gdppc, y = life_satisfaction)) +\n  geom_point(\n    aes(fill = continent, size = pop),\n    color = \"#A5A9A9\",\n    alpha = 0.8,\n    shape = 21\n    ) +\n  ggrepel::geom_label_repel(\n    data = dftext,\n    aes(x = gdppc, y = life_satisfaction, label = highlight, color = continent),\n    size = 3,\n    force = 5,\n    family = \"Lato\",\n    label.padding = unit(0.05, \"lines\"),\n    label.size = NA\n    ) +\n  scale_x_continuous(breaks = xbreaks, labels = xlabels) +\n  scale_y_continuous(breaks = 3:7) +\n  scale_size_continuous(range = c(1, 15)) +\n  scale_fill_manual(name = \"\", values = colors) +\n  scale_color_manual(name = \"\", values = colors) +\n  guides(\n    color = \"none\",\n    size = \"none\",\n    fill = guide_legend(override.aes = list(shape = 22, alpha = 1))\n    ) +\n  labs(\n    title = \"Self-reported life satisfaction vs. GDP per capita, 2022\",\n    subtitle = subtitle,\n    x = \"GDP per capita\",\n    y = \"Life satisfaction (country average; 0-10)\",\n    caption = caption\n    ) +\n  theme_owid\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-39-1.png){fig-align='center' width=100%}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}