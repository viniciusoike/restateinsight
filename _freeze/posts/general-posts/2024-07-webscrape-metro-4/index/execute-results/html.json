{
  "hash": "83588825458d77d75154c7baf17bdd4d",
  "result": {
    "markdown": "---\ntitle: \"\"\ndate: \"2024-07-10\"\ncategories: [\"data-science\", \"finding\", \"sao-paulo\", \"subway\", \"web-scraping\", \"tutorial-R\"]\ndescription: \"\"\ndraft: true\nexecute: \n  eval: false\n---\n\n\n# Subway data in São Paulo\n\nFinding data on the subway lines in São Paulo is not easy. There are currently 5 subway lines in São Paulo, identified by number and color:\n\n-   Line-1 (Blue)\n\n-   Line-2 (Green)\n\n-   Line-3 (Red)\n\n-   Line-4 (Yellow)\n\n-   Line-5 (Lilac)\n\nThe first three lines are state-owned by the public company METRO. Line-4 is a PPP an privately operated by Via Quatro Mobilidade. Line-5 is also privately operated by ViaMobilidade.\n\nGathering information\n\n# Downloading\n\nPassenger flow information is stored in a very unfriendly\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(readr)\nlibrary(pdftools)\n\nimport::from(xml2, read_html)\nimport::from(here, here)\nimport::from(glue, glue)\nimport::from(pdftools, pdf_text)\nimport::from(purrr, map2, map_lgl)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://www.viaquatro.com.br/linha-4-amarela/passageiros-transportados\"\n\npage <- read_html(url)\n\npdf_links <- page %>%\n  html_elements(xpath = \"//article/ul/li/a\") %>%\n  html_attr(\"href\")\n\npdf_names <- page %>%\n  html_elements(xpath = \"//article/ul/li/a\") %>%\n  html_attr(\"title\")\n\npdf_links <- pdf_links[str_detect(pdf_links, \"\\\\.pdf$\")]\n\nparams <- tibble(\n  link = pdf_links,\n  name = pdf_names\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nparams <- params |> \n  mutate(\n    # Find variable name\n    variable = str_extract(name, \".+(?= - [A-Z0-9])\"),\n    # Remove excess whitespace\n    variable = str_replace_all(variable, \"  \", \" \"),\n    # Get the date (either in 20xx or %B%Y format)\n    x1 = str_trim(str_extract(name, \"(?<= - )[A-Z0-9].+\")),\n    # Extract year number\n    year = as.numeric(str_extract(x1, \"[0-9]{4}\")),\n    # Extract month label (in portuguese)\n    month_label = str_extract(x1, \"[[:alpha:]]+\"),\n    # Convert to date\n    ts_date = if_else(\n      is.na(month_label),\n      as.Date(str_c(year, \"/01/01\")),\n      parse_date(paste(year, month_label, \"01\", sep = \"/\"), format = \"%Y/%B/%d\", locale = locale(\"pt\"))\n    )\n  )\n\nparams <- params |> \n  arrange(ts_date) |> \n  arrange(variable)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#> Baixar todos os pdfs do site\n\n#> Define a pasta onde os arquivos serão baixados\nfld <- here::here(\"static/data/raw/metro_sp/linha_4/\")\n#> A 'base' da url do site\nbaseurl <- \"https://www.viaquatro.com.br\"\n#> Define uma barra de progresso para acompanhar o resultado\npb <- txtProgressBar(max = nrow(params), style = 3)\n\n#> Loop nas linhas da tabela 'params'\nfor (i in 1:nrow(params)) {\n  \n  #> Pega a coluna 'name' da coluna atual e transforma o nome idiomático\n  name_file <- janitor::make_clean_names(params[[\"name\"]][i])\n  #> Adiciona extensão .pdf\n  name_file <- paste0(name_file, \".pdf\")\n  #> Define o path para baixar o arquivo\n  destfile <- here(fld, name_file)\n  \n  #> Verifica se o arquivo já existe na pasta de destino. Caso contrário baixa o pdf.\n  if (file.exists(destfile)) {\n    message(glue(\"File {name_file} already exists.\"))\n    i <- i + 1\n  } else {\n    message(glue(\"Downloading file {name_file}.\"))\n    #> Url para baixar o pdf\n    url <- paste0(baseurl, params[[\"link\"]][i])\n    #> Faz o dowload do arquivo\n    download.file(url = url, destfile = destfile, mode = \"wb\", quiet = TRUE)\n    #> Por precaução define um breve timeout aleatório (1 seg + random)\n    Sys.sleep(1 + runif(1))\n  }\n\n  #> Atualiza a barra de progresso\n  setTxtProgressBar(pb, i)\n  \n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\nlibrary(xml2)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(purrr)\nlibrary(readr)\nlibrary(here)\nlibrary(pdftools)\n\nurl <- \"https://www.viaquatro.com.br/linha-4-amarela/passageiros-transportados\"\n\npage <- read_html(url)\n\npdf_links <- page %>%\n  html_elements(xpath = \"//article/ul/li/a\") %>%\n  html_attr(\"href\")\n\npdf_names <- page %>%\n  html_elements(xpath = \"//article/ul/li/a\") %>%\n  html_attr(\"title\")\n\npdf_links <- pdf_links[str_detect(pdf_links, \"\\\\.pdf$\")]\n\nparams <- tibble(\n  link = pdf_links,\n  name = pdf_names\n)\n\nmes <- lubridate::month(1:12, label = TRUE, abbr = FALSE, locale = \"pt_BR\")\n\nparams <- params %>%\n  mutate(\n    # Find variable name\n    variable = str_extract(name, \".+(?= - [A-Z0-9])\"),\n    # Remove excess whitespace\n    variable = str_replace_all(variable, \"  \", \" \"),\n    # Get the date (either in 20xx or %B%Y format)\n    x1 = str_trim(str_extract(name, \"(?<= - )[A-Z0-9].+\")),\n    # Extract year number\n    year = as.numeric(str_extract(x1, \"[0-9]{4}\")),\n    # Extract month label (in portuguese)\n    month_label = str_extract(x1, \"[[:alpha:]]+\"),\n    # Convert to date\n    ts_date = if_else(\n      is.na(month_label),\n      as.Date(str_c(year, \"/01/01\")),\n      parse_date(paste(year, month_label, \"01\", sep = \"/\"), format = \"%Y/%B/%d\", locale = locale(\"pt\"))\n    )\n  )\n\nparams <- params |> \n  arrange(ts_date) |> \n  arrange(variable)\n\n#> Baixar todos os pdfs do site\n\n#> Define a pasta onde os arquivos serão baixados\nfld <- here(\"static/data/raw/metro_sp/linha_4/\")\n#> A 'base' da url do site\nbaseurl <- \"https://www.viaquatro.com.br\"\n#> Define uma barra de progresso para acompanhar o resultado\npb <- txtProgressBar(max = nrow(params), style = 3)\n\n#> Loop nas linhas da tabela 'params'\nfor (i in 1:nrow(params)) {\n  \n  #> Pega a coluna 'name' da coluna atual e transforma o nome idiomático\n  name_file <- janitor::make_clean_names(params[[\"name\"]][i])\n  #> Adiciona extensão .pdf\n  name_file <- paste0(name_file, \".pdf\")\n  #> Define o path para baixar o arquivo\n  destfile <- here(fld, name_file)\n  \n  #> Verifica se o arquivo já existe na pasta de destino. Caso contrário baixa o pdf.\n  if (file.exists(destfile)) {\n    message(glue(\"File {name_file} already exists.\"))\n    i <- i + 1\n  } else {\n    message(glue(\"Downloading file {name_file}.\"))\n    #> Url para baixar o pdf\n    url <- paste0(baseurl, params[[\"link\"]][i])\n    #> Faz o dowload do arquivo\n    download.file(url = url, destfile = destfile, mode = \"wb\", quiet = TRUE)\n    #> Por precaução define um breve timeout aleatório (1 seg + random)\n    Sys.sleep(1 + runif(1))\n  }\n\n  #> Atualiza a barra de progresso\n  setTxtProgressBar(pb, i)\n  \n}\n```\n:::\n\n\n# Cleaning\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read pdf using pdf tools and convert to tibble\nread_pdf <- function(path) {\n  \n  tbl <- pdftools::pdf_text(path)\n  tbl <- stringr::str_split(tbl, \"\\n\")\n  # Get only the first result\n  # Assumes each pdf contains only a single table\n  tbl <- tibble::tibble(text = tbl[[1]])\n  \n  if (all(tbl == \"\")) {\n    warning(\"No text elements found!\")\n  }\n  \n  return(tbl)\n  \n}\n\n# Helper function to extract numbers from text\n# Numbers use , as decimal mark and . as thousand mark\nget_numbers <- Vectorize(function(text) {\n  \n  num <- stringr::str_extract(text, \"([0-9].+)|([0-9])\")\n  num <- stringr::str_remove(num, \"\\\\.\")\n  num <- as.numeric(stringr::str_replace(num, \",\", \".\"))\n  return(num)\n  \n})\n\nclean_pdf_passenger <- function(dat) {\n  \n  mes <- lubridate::month(1:12, label = TRUE, abbr = FALSE, locale = \"pt_BR\")\n  \n  cat <- c(\n    \"Total\", \"Média dos Dias Úteis\", \"Média dos Sábados\", \"Média dos Domingos\",\n    \"Máxima Diária\"\n  )\n  \n  pat <- paste(str_glue(\"({cat})\"), collapse = \"|\")\n  \n  tbl <- dat |> \n    mutate(\n      variable = str_remove_all(text, \"\\\\d\"),\n      variable = str_trim(variable),\n      variable = str_replace_all(variable, \"  \", \"\"),\n      month = str_extract(text, paste(mes, collapse = \"|\")),\n      metric = str_extract(text, pat),\n      value = get_numbers(text)\n    )\n  \n  tbl_date <- tbl |> \n    filter(!is.na(month)) |> \n    mutate(\n      date = str_glue(\"{value}-{month}-01\"),\n      date = parse_date(date, format = \"%Y-%B-%d\", locale = locale(\"pt\"))\n    ) |> \n    select(date, year = value)\n  \n  tbl_value <- tbl |> \n    filter(!is.na(value), !is.na(metric)) |> \n    select(metric, value) |> \n    mutate(value = as.numeric(value))\n  \n  tbl <- cbind(tbl_date, tbl_value)\n  \n  return(tbl)\n  \n}\n\nclean_pdf_station <- function(dat) {\n\n  name_stations <- c(\n    'Vila Sônia', 'São Paulo - Morumbi', \"Butantã\", \"Pinheiros\", \"Faria Lima\",\n    \"Fradique Coutinho\", \"Oscar Freire\", \"Paulista\", \"Higienópolis - Mackenzie\",\n    \"República\", \"Luz\")\n  \n  pat <- paste(str_glue(\"({name_stations})\"), collapse = \"|\")\n  \n  tbl <- dat |> \n    mutate(\n      month = str_extract(text, paste(mes, collapse = \"|\")),\n      name_station = str_extract(text, pat),\n      value = get_numbers(text)\n    )\n  \n  tbl_date <- tbl |> \n    filter(!is.na(month)) |> \n    mutate(\n      date = str_glue(\"{value}-{month}-01\"),\n      date = parse_date(date, format = \"%Y-%B-%d\", locale = locale(\"pt\"))\n    ) |> \n    select(date, year = value)\n  \n  tbl_value <- tbl |> \n    filter(!is.na(value), !is.na(name_station)) |> \n    select(name_station, value) |> \n    mutate(value = as.numeric(value))\n  \n  tbl <- cbind(tbl_date, tbl_value)\n  \n  return(tbl)\n  \n}\n\nimport_pdf <- function(path, type) {\n  \n  stopifnot(any(type %in% c(\"station\", \"passenger_entrance\", \"passenger_transported\")))\n  \n  file <- read_pdf(path)\n  \n  if (nrow(file) == 1) {\n    return(NA)\n  }\n  \n  if (nrow(file) > 11) {\n    clean_file <- clean_pdf_station(file)\n  } else {\n    clean_file <- clean_pdf_passenger(file)\n  }\n  \n  return(clean_file)\n  \n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#> Define a pasta onde os arquivos serão baixados\nfld <- here::here(\"static/data/raw/metro_sp/linha_4\")\n\npath_pdfs <- list.files(fld, \"\\\\.pdf$\", full.names = TRUE)\n\nparams <- tibble(\n  path = path_pdfs\n)\n\nparams <- params |> \n  mutate(\n    name_file = basename(path),\n    type = case_when(\n      str_detect(name_file, \"^entrada_de_passageiros_pelas\") ~ \"passenger_entrance\",\n      str_detect(name_file, \"estac\") ~ \"station\",\n      str_detect(name_file, \"transportados\") ~ \"passenger_transported\",\n      TRUE ~ \"station\"\n    )\n  )\n\npdfs <- params |> \n  mutate(file = map2(path, type, import_pdf))\n\nvalid_files <- pdfs |> \n  filter(map_lgl(file, is.data.frame))\n\ntbl_station <- valid_files |> \n  filter(type == \"station\") |> \n  reframe(bind_rows(file)) |> \n  arrange(date)\n\ntbl_passengers <- valid_files |> \n  filter(type == \"passenger_transported\") |> \n  reframe(bind_rows(file)) |> \n  arrange(date) |> \n  mutate(name_station = \"Total\")\n\ntbl_onboarding <- valid_files |> \n  filter(type == \"passenger_entrance\") |> \n  reframe(bind_rows(file)) |> \n  arrange(date)\n\ntbl_onboarding_station <- tbl_onboarding |> \n  filter(!is.na(name_station)) |> \n  mutate(metric = \"Média dos Dias Úteis\")\n\ntbl_onboarding <- tbl_onboarding |> \n  filter(is.na(name_station)) |> \n  mutate(name_station = \"Total\")\n\ntbl1 <- bind_rows(\n  list(\n    passenger_transported = tbl_passengers,\n    passenger_entrance = tbl_onboarding\n    ),\n  .id = \"variable\")\n```\n:::\n\n\n# Visualizing\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntbl1 |> \n  filter(variable == \"passenger_transported\", metric == \"Total\") |> \n  ggplot(aes(date, value)) +\n  geom_line() +\n  geom_point()\n\ntbl1 |> \n  filter(variable == \"passenger_entrance\", name_station != \"Total\")\n\ntbl_station |> \n  filter(date >= as.Date(\"2019-01-01\")) |> \n  mutate(name_station = factor(name_station, levels = unique(tbl_station$name_station))) |> \n  ggplot(aes(x = date, y = value)) +\n  geom_line() +\n  facet_wrap(vars(name_station), scales = \"free_y\")\n\ntbl_station |> \n  filter(\n    date >= as.Date(\"2018-01-01\"),\n    !name_station %in% c(\"São Paulo - Morumbi\", \"Vila Sônia\")\n    ) |> \n  summarise()\n\n\n\ntbl_station |> \n  filter(date >= as.Date(\"2019-01-01\")) |> \n  mutate(name_station = factor(name_station, levels = unique(tbl_station$name_station))) |> \n  ggplot(aes(x = date, y = value)) +\n  geom_line() +\n  facet_wrap(vars(name_station), scales = \"free_y\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}