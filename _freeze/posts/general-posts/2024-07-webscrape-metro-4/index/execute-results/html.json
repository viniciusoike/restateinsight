{
  "hash": "b342dea55a793e075a31cb5480142b3d",
  "result": {
    "markdown": "---\ntitle: \"Line-4 Metro\"\ndate: \"2024-07-10\"\ncategories: [\"data-science\", \"finding\", \"sao-paulo\", \"subway\", \"web-scraping\", \"tutorial-R\"]\ndescription: \"In this post I show how to webscrape all publicly available information on passenger flow from the Line-4 Metro in São Paulo. This post is part of a larger series where I gather all data on the subway lines in São Paulo.\"\nexecute: \n  eval: false\n---\n\n\n# Line-4 Metro Subway\n\nIn this post I show how to webscrape all publicly available information on passenger flow from the Line-4 Metro in São Paulo. This post is part of a larger series where I gather all data on the subway lines in São Paulo.\n\n## Subway data in São Paulo\n\nFinding data on the subway lines in São Paulo is not easy. There are currently 5 subway lines in São Paulo, identified by number and color:\n\n-   Line-1 (Blue)\n\n-   Line-2 (Green)\n\n-   Line-3 (Red)\n\n-   Line-4 (Yellow)\n\n-   Line-5 (Lilac)\n\nThe first three lines are state-owned by the public company METRO. Line-4 is a PPP an privately operated by Via Quatro Mobilidade. Line-5 is also privately operated by ViaMobilidade.\n\n# The Data\n\n[Passenger flow information](https://www.viaquatro.com.br/linha-4-amarela/passageiros-transportados) is stored in a very unfriendly manner. Monthly passenger flow data is stored in excel tables that are stored in individual pdf files.\n\n![](/static/images/spo_metro/webscrape/pdf_screen.png){fig-align=\"center\"}\n\nInside each pdf file there is a simple Excel-like table such as the one in the image below.\n\n![](/static/images/spo_metro/webscrape/pdf_example_easy.png){fig-align=\"center\"}\n\nTo extract this data we need to proceed in the following steps:\n\n1.  Webscrape the page to find all download links for each individual pdf.\n2.  Download all pdfs.\n3.  Import each pdf table, interpret the text and clean the data.\n4.  Compile datasets into meaningful tables.\n\n## Downloading\n\nWe can use the `rvest` package to easily find and download all the pdf files.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Libraries\nlibrary(rvest)\nlibrary(stringr)\nlibrary(dplyr)\n\nimport::from(xml2, read_html)\nimport::from(here, here)\nimport::from(glue, glue)\nimport::from(pdftools, pdf_text)\nimport::from(purrr, map2, map_lgl)\n```\n:::\n\n\nThe chunk of code below finds the links to all pdf files.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Site url\nurl <- \"https://www.viaquatro.com.br/linha-4-amarela/passageiros-transportados\"\n\n# Parse the html\npage <- read_html(url)\n\n# Get download links\npdf_links <- page %>%\n  html_elements(xpath = \"//article/ul/li/a\") %>%\n  html_attr(\"href\")\n# Get the name of each pdf file\npdf_names <- page %>%\n  html_elements(xpath = \"//article/ul/li/a\") %>%\n  html_attr(\"title\")\n\npdf_links <- pdf_links[str_detect(pdf_links, \"\\\\.pdf$\")]\n\n# Store links and names in a tibble\nparams <- tibble(\n  link = pdf_links,\n  name = pdf_names\n)\n```\n:::\n\n\nI save the title of each file and the link in a tibble. I also extract some useful information using regex.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use regex to extract information from file name\nparams <- params |> \n  mutate(\n    # Find variable name\n    variable = str_extract(name, \".+(?= - [A-Z0-9])\"),\n    # Remove excess whitespace\n    variable = str_replace_all(variable, \"  \", \" \"),\n    # Get the date (either in 20xx or %B%Y format)\n    x1 = str_trim(str_extract(name, \"(?<= - )[A-Z0-9].+\")),\n    # Extract year number\n    year = as.numeric(str_extract(x1, \"[0-9]{4}\")),\n    # Extract month label (in portuguese)\n    month_label = str_extract(x1, \"[[:alpha:]]+\"),\n    # Convert to date\n    ts_date = if_else(\n      is.na(month_label),\n      as.Date(str_c(year, \"/01/01\")),\n      parse_date(paste(year, month_label, \"01\", sep = \"/\"),\n                 format = \"%Y/%B/%d\",\n                 locale = locale(\"pt\"))\n    )\n  )\n\nparams <- params |> \n  arrange(ts_date) |> \n  arrange(variable)\n```\n:::\n\n\nThe simple for-loop below downloads all pdf files locally. I include a progress bar, and a simple check to avoid downloading duplicate files. This check also comes in handy if something goes wrong internet-wise.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#> Download all pdf files\n\nfld <- here(\"static/data/raw/metro_sp/linha_4/\")\nbaseurl <- \"https://www.viaquatro.com.br\"\npb <- txtProgressBar(max = nrow(params), style = 3)\n\n# Loop across params\nfor (i in 1:nrow(params)) {\n  \n  # Define file name\n  name_file <- janitor::make_clean_names(params[[\"name\"]][i])\n  # Add pdf extension\n  name_file <- paste0(name_file, \".pdf\")\n  # Crate file path\n  destfile <- here(fld, name_file)\n  \n  # Simple check:\n  # If downloaded file already exists, skip it\n  # If not, download the file\n  if (file.exists(destfile)) {\n    message(glue(\"File {name_file} already exists.\"))\n    i <- i + 1\n  } else {\n    message(glue(\"Downloading file {name_file}.\"))\n    # Link to the pdf file\n    url <- paste0(baseurl, params[[\"link\"]][i])\n    # Download the file\n    download.file(url = url, destfile = destfile, mode = \"wb\", quiet = TRUE)\n    # For precaution defines a random time-interval between each download\n    Sys.sleep(1 + runif(1))\n  }\n\n  setTxtProgressBar(pb, i)\n  \n}\n```\n:::\n\n\n# Data Processing\n\nExtracting tables from pdf can be a challenging task. [In another post](https://restateinsight.com/posts/general-posts/2024-04-importando-pdf/) I showed how to import tables using the `pdftools` package. This package generally works very well but it fails if the table is saved as an image. In this case, the best approach is to use a deep-learning model or LLM that can recognize patterns in images.\n\nIn our case, the older pdf files are stored as images of tables while the newer files are stored as text tables. This means we can use `pdftools` only for the more recent files.\n\n## Functions\n\nTo facilitate the import and cleaning process I create several helper functions.\n\n### Importing pdfs\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read pdf using pdf tools and convert to tibble\nread_pdf <- function(path) {\n  \n  tbl <- pdftools::pdf_text(path)\n  tbl <- stringr::str_split(tbl, \"\\n\")\n  # Get only the first result\n  # Assumes each pdf contains only a single table\n  tbl <- tibble::tibble(text = tbl[[1]])\n  \n  if (all(tbl == \"\")) {\n    warning(\"No text elements found!\")\n  }\n  \n  return(tbl)\n  \n}\n```\n:::\n\n\n### Cleaning the tables\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Helper function to extract numbers from text\n# Numbers use , as decimal mark and . as thousand mark\nget_numbers <- Vectorize(function(text) {\n  \n  num <- stringr::str_extract(text, \"([0-9].+)|([0-9])\")\n  num <- stringr::str_remove(num, \"\\\\.\")\n  num <- as.numeric(stringr::str_replace(num, \",\", \".\"))\n  return(num)\n  \n})\n\nclean_pdf_passenger <- function(dat) {\n  \n  mes <- lubridate::month(1:12, label = TRUE, abbr = FALSE, locale = \"pt_BR\")\n  \n  cat <- c(\n    \"Total\", \"Média dos Dias Úteis\", \"Média dos Sábados\", \"Média dos Domingos\",\n    \"Máxima Diária\"\n  )\n  \n  pat <- paste(str_glue(\"({cat})\"), collapse = \"|\")\n  \n  tbl <- dat |> \n    mutate(\n      variable = str_remove_all(text, \"\\\\d\"),\n      variable = str_trim(variable),\n      variable = str_replace_all(variable, \"  \", \"\"),\n      month = str_extract(text, paste(mes, collapse = \"|\")),\n      metric = str_extract(text, pat),\n      value = get_numbers(text)\n    )\n  \n  tbl_date <- tbl |> \n    filter(!is.na(month)) |> \n    mutate(\n      date = str_glue(\"{value}-{month}-01\"),\n      date = parse_date(date, format = \"%Y-%B-%d\", locale = locale(\"pt\"))\n    ) |> \n    select(date, year = value)\n  \n  tbl_value <- tbl |> \n    filter(!is.na(value), !is.na(metric)) |> \n    select(metric, value) |> \n    mutate(value = as.numeric(value))\n  \n  tbl <- cbind(tbl_date, tbl_value)\n  \n  return(tbl)\n  \n}\n\nclean_pdf_station <- function(dat) {\n\n  name_stations <- c(\n    'Vila Sônia', 'São Paulo - Morumbi', \"Butantã\", \"Pinheiros\", \"Faria Lima\",\n    \"Fradique Coutinho\", \"Oscar Freire\", \"Paulista\", \"Higienópolis - Mackenzie\",\n    \"República\", \"Luz\")\n  \n  pat <- paste(str_glue(\"({name_stations})\"), collapse = \"|\")\n  \n  tbl <- dat |> \n    mutate(\n      month = str_extract(text, paste(mes, collapse = \"|\")),\n      name_station = str_extract(text, pat),\n      value = get_numbers(text)\n    )\n  \n  tbl_date <- tbl |> \n    filter(!is.na(month)) |> \n    mutate(\n      date = str_glue(\"{value}-{month}-01\"),\n      date = parse_date(date, format = \"%Y-%B-%d\", locale = locale(\"pt\"))\n    ) |> \n    select(date, year = value)\n  \n  tbl_value <- tbl |> \n    filter(!is.na(value), !is.na(name_station)) |> \n    select(name_station, value) |> \n    mutate(value = as.numeric(value))\n  \n  tbl <- cbind(tbl_date, tbl_value)\n  \n  return(tbl)\n  \n}\n```\n:::\n\n\n### Final function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimport_pdf <- function(path, type) {\n  \n  stopifnot(any(type %in% c(\"station\", \"passenger_entrance\", \"passenger_transported\")))\n  \n  file <- read_pdf(path)\n  \n  if (nrow(file) == 1) {\n    return(NA)\n  }\n  \n  if (nrow(file) > 11) {\n    clean_file <- clean_pdf_station(file)\n  } else {\n    clean_file <- clean_pdf_passenger(file)\n  }\n  \n  return(clean_file)\n  \n}\n```\n:::\n\n\n## Data Processing\n\nThe code below imports all pdf files and cleans the data. I consolidate the information into two tables:\n\n1. Passengers - show total passenger flow metrics by month.\n2. Stations - shows total montlhy passenger flow by station.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find path name to all downloaded pdfs\nfld <- here::here(\"static/data/raw/metro_sp/linha_4\")\npath_pdfs <- list.files(fld, \"\\\\.pdf$\", full.names = TRUE)\n\nparams <- tibble(\n  path = path_pdfs\n)\n\nparams <- params |> \n  mutate(\n    name_file = basename(path),\n    type = case_when(\n      str_detect(name_file, \"^entrada_de_passageiros_pelas\") ~ \"passenger_entrance\",\n      str_detect(name_file, \"estac\") ~ \"station\",\n      str_detect(name_file, \"transportados\") ~ \"passenger_transported\",\n      TRUE ~ \"station\"\n    )\n  )\n\npdfs <- params |> \n  mutate(file = map2(path, type, import_pdf))\n\nvalid_files <- pdfs |> \n  filter(map_lgl(file, is.data.frame))\n\ntbl_passengers <- valid_files |> \n  filter(type == \"passenger_transported\") |> \n  reframe(bind_rows(file)) |> \n  arrange(date) |> \n  mutate(name_station = \"Total\")\n\ntbl_onboarding <- valid_files |> \n  filter(type == \"passenger_entrance\") |> \n  reframe(bind_rows(file)) |> \n  arrange(date)\n\n# This pdf is wrong!\ntbl_onboarding_station <- tbl_onboarding |> \n  filter(!is.na(name_station)) |> \n  mutate(metric = \"Média dos Dias Úteis\")\n\ntbl_onboarding <- tbl_onboarding |> \n  filter(is.na(name_station)) |> \n  mutate(name_station = \"Total\")\n\ntbl_passengers <- bind_rows(\n  list(\n    passenger_transported = tbl_passengers,\n    passenger_entrance = tbl_onboarding\n  ),\n  .id = \"variable\")\n\ntbl_station <- valid_files |> \n  filter(type == \"station\") |>\n  reframe(bind_rows(file)) |> \n  arrange(date)\n```\n:::\n\n\n\n\nThe `passenger` table shows various passenger flow metrics by month.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslice_tail(passenger, n = 10) |> \n  gt() |> \n  opt_stylize(style = 6)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"dudgnmmzeg\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#dudgnmmzeg table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#dudgnmmzeg thead, #dudgnmmzeg tbody, #dudgnmmzeg tfoot, #dudgnmmzeg tr, #dudgnmmzeg td, #dudgnmmzeg th {\n  border-style: none;\n}\n\n#dudgnmmzeg p {\n  margin: 0;\n  padding: 0;\n}\n\n#dudgnmmzeg .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#dudgnmmzeg .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#dudgnmmzeg .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#dudgnmmzeg .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#dudgnmmzeg .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#dudgnmmzeg .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n}\n\n#dudgnmmzeg .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#dudgnmmzeg .gt_col_heading {\n  color: #FFFFFF;\n  background-color: #0076BA;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#dudgnmmzeg .gt_column_spanner_outer {\n  color: #FFFFFF;\n  background-color: #0076BA;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#dudgnmmzeg .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#dudgnmmzeg .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#dudgnmmzeg .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#dudgnmmzeg .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#dudgnmmzeg .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#dudgnmmzeg .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  vertical-align: middle;\n}\n\n#dudgnmmzeg .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#dudgnmmzeg .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#dudgnmmzeg .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: none;\n  border-top-width: 1px;\n  border-top-color: #D5D5D5;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D5D5D5;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D5D5D5;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#dudgnmmzeg .gt_stub {\n  color: #333333;\n  background-color: #89D3FE;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D5D5D5;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#dudgnmmzeg .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#dudgnmmzeg .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#dudgnmmzeg .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#dudgnmmzeg .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#dudgnmmzeg .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #5F5F5F;\n}\n\n#dudgnmmzeg .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#dudgnmmzeg .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n}\n\n#dudgnmmzeg .gt_grand_summary_row {\n  color: #333333;\n  background-color: #D5D5D5;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#dudgnmmzeg .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #5F5F5F;\n}\n\n#dudgnmmzeg .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #5F5F5F;\n}\n\n#dudgnmmzeg .gt_striped {\n  background-color: #EDF7FC;\n}\n\n#dudgnmmzeg .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n}\n\n#dudgnmmzeg .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#dudgnmmzeg .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#dudgnmmzeg .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#dudgnmmzeg .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#dudgnmmzeg .gt_left {\n  text-align: left;\n}\n\n#dudgnmmzeg .gt_center {\n  text-align: center;\n}\n\n#dudgnmmzeg .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#dudgnmmzeg .gt_font_normal {\n  font-weight: normal;\n}\n\n#dudgnmmzeg .gt_font_bold {\n  font-weight: bold;\n}\n\n#dudgnmmzeg .gt_font_italic {\n  font-style: italic;\n}\n\n#dudgnmmzeg .gt_super {\n  font-size: 65%;\n}\n\n#dudgnmmzeg .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#dudgnmmzeg .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#dudgnmmzeg .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#dudgnmmzeg .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#dudgnmmzeg .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#dudgnmmzeg .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#dudgnmmzeg .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"variable\">variable</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"date\">date</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"year\">year</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"metric\">metric</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"value\">value</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"name_station\">name_station</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"variable\" class=\"gt_row gt_left\">passenger_entrance</td>\n<td headers=\"date\" class=\"gt_row gt_right\">2024-06-01</td>\n<td headers=\"year\" class=\"gt_row gt_right\">2024</td>\n<td headers=\"metric\" class=\"gt_row gt_left\">Total</td>\n<td headers=\"value\" class=\"gt_row gt_right\">6135.54</td>\n<td headers=\"name_station\" class=\"gt_row gt_left\">Total</td></tr>\n    <tr><td headers=\"variable\" class=\"gt_row gt_left gt_striped\">passenger_entrance</td>\n<td headers=\"date\" class=\"gt_row gt_right gt_striped\">2024-06-01</td>\n<td headers=\"year\" class=\"gt_row gt_right gt_striped\">2024</td>\n<td headers=\"metric\" class=\"gt_row gt_left gt_striped\">Média dos Dias Úteis</td>\n<td headers=\"value\" class=\"gt_row gt_right gt_striped\">204.52</td>\n<td headers=\"name_station\" class=\"gt_row gt_left gt_striped\">Total</td></tr>\n    <tr><td headers=\"variable\" class=\"gt_row gt_left\">passenger_entrance</td>\n<td headers=\"date\" class=\"gt_row gt_right\">2024-06-01</td>\n<td headers=\"year\" class=\"gt_row gt_right\">2024</td>\n<td headers=\"metric\" class=\"gt_row gt_left\">Média dos Sábados</td>\n<td headers=\"value\" class=\"gt_row gt_right\">106.84</td>\n<td headers=\"name_station\" class=\"gt_row gt_left\">Total</td></tr>\n    <tr><td headers=\"variable\" class=\"gt_row gt_left gt_striped\">passenger_entrance</td>\n<td headers=\"date\" class=\"gt_row gt_right gt_striped\">2024-06-01</td>\n<td headers=\"year\" class=\"gt_row gt_right gt_striped\">2024</td>\n<td headers=\"metric\" class=\"gt_row gt_left gt_striped\">Média dos Domingos</td>\n<td headers=\"value\" class=\"gt_row gt_right gt_striped\">66.72</td>\n<td headers=\"name_station\" class=\"gt_row gt_left gt_striped\">Total</td></tr>\n    <tr><td headers=\"variable\" class=\"gt_row gt_left\">passenger_entrance</td>\n<td headers=\"date\" class=\"gt_row gt_right\">2024-06-01</td>\n<td headers=\"year\" class=\"gt_row gt_right\">2024</td>\n<td headers=\"metric\" class=\"gt_row gt_left\">Máxima Diária</td>\n<td headers=\"value\" class=\"gt_row gt_right\">218.21</td>\n<td headers=\"name_station\" class=\"gt_row gt_left\">Total</td></tr>\n    <tr><td headers=\"variable\" class=\"gt_row gt_left gt_striped\">passenger_entrance</td>\n<td headers=\"date\" class=\"gt_row gt_right gt_striped\">2024-07-01</td>\n<td headers=\"year\" class=\"gt_row gt_right gt_striped\">2024</td>\n<td headers=\"metric\" class=\"gt_row gt_left gt_striped\">Total</td>\n<td headers=\"value\" class=\"gt_row gt_right gt_striped\">5908.16</td>\n<td headers=\"name_station\" class=\"gt_row gt_left gt_striped\">Total</td></tr>\n    <tr><td headers=\"variable\" class=\"gt_row gt_left\">passenger_entrance</td>\n<td headers=\"date\" class=\"gt_row gt_right\">2024-07-01</td>\n<td headers=\"year\" class=\"gt_row gt_right\">2024</td>\n<td headers=\"metric\" class=\"gt_row gt_left\">Média dos Dias Úteis</td>\n<td headers=\"value\" class=\"gt_row gt_right\">183.84</td>\n<td headers=\"name_station\" class=\"gt_row gt_left\">Total</td></tr>\n    <tr><td headers=\"variable\" class=\"gt_row gt_left gt_striped\">passenger_entrance</td>\n<td headers=\"date\" class=\"gt_row gt_right gt_striped\">2024-07-01</td>\n<td headers=\"year\" class=\"gt_row gt_right gt_striped\">2024</td>\n<td headers=\"metric\" class=\"gt_row gt_left gt_striped\">Média dos Sábados</td>\n<td headers=\"value\" class=\"gt_row gt_right gt_striped\">102.30</td>\n<td headers=\"name_station\" class=\"gt_row gt_left gt_striped\">Total</td></tr>\n    <tr><td headers=\"variable\" class=\"gt_row gt_left\">passenger_entrance</td>\n<td headers=\"date\" class=\"gt_row gt_right\">2024-07-01</td>\n<td headers=\"year\" class=\"gt_row gt_right\">2024</td>\n<td headers=\"metric\" class=\"gt_row gt_left\">Média dos Domingos</td>\n<td headers=\"value\" class=\"gt_row gt_right\">58.12</td>\n<td headers=\"name_station\" class=\"gt_row gt_left\">Total</td></tr>\n    <tr><td headers=\"variable\" class=\"gt_row gt_left gt_striped\">passenger_entrance</td>\n<td headers=\"date\" class=\"gt_row gt_right gt_striped\">2024-07-01</td>\n<td headers=\"year\" class=\"gt_row gt_right gt_striped\">2024</td>\n<td headers=\"metric\" class=\"gt_row gt_left gt_striped\">Máxima Diária</td>\n<td headers=\"value\" class=\"gt_row gt_right gt_striped\">207.26</td>\n<td headers=\"name_station\" class=\"gt_row gt_left gt_striped\">Total</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\nThe `station` table show total passenger flow by month (in thousands).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nslice_tail(station, n = 11) |> \n  gt() |> \n  opt_stylize(style = 6)\n```\n:::\n\n\n\n# Visualizing\n\nA good way to check our results is to visualize the data. A more detailed visualization [can be found in my other post](https://restateinsight.com/posts/general-posts/2024-07-viz-metro-4/).\n\n### Total monthly passnger flow\n\nThe plot below shows the total amount of monthly passengers transported by the Line-4 metro. Visually, the data seems coherent. The big drop in the series coincides with the restrictive measures imposed in the first semester of 2020 as a response to the Covid-19 pandemic.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npassenger |> \n  filter(variable == \"passenger_transported\", metric == \"Total\") |> \n  ggplot(aes(date, value)) +\n  geom_line() +\n  geom_point() +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-1-1.png){width=672}\n:::\n:::\n\n\n### Passenger flow by station\n\nThe plot below shows the total amount of monthly passengers transported by the Line-4 metro by station. Visually, the data seems coherent. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nstation |> \n  filter(date >= as.Date(\"2019-01-01\")) |> \n  mutate(name_station = factor(name_station, levels = unique(station$name_station))) |> \n  ggplot(aes(x = date, y = value)) +\n  geom_line() +\n  facet_wrap(vars(name_station), scales = \"free_y\") +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-2-1.png){width=672}\n:::\n:::\n\n\n# The data\n\nThe final tables can be downloaded in the links below:\n\n* [Passenger](https://github.com/viniciusoike/restateinsight/raw/main/static/data/metro_sp_line_4.csv)\n* [Station](https://github.com/viniciusoike/restateinsight/raw/main/static/data/metro_sp_line_4_stations.csv)",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}