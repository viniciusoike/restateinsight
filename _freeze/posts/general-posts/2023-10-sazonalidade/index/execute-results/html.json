{
  "hash": "7e6df49edab78841f8368d2eba4a2b93",
  "result": {
    "markdown": "---\ntitle: Sazonalidade\ndate: '2023-08-10'\ncategories: ['data-science', 'economia', 'tutorial-R', 'econometria']\ndescription: ''\ndraft: true\n---\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#> IPI - Construção Civil (sem ajuste sazonal)\nipicc <- rbcb::get_series(21868)\n#> Consumo mensal de energia elétrica - Residencial\ndf_energia <- rbcb::get_series(1403)\n#> Car accidents in São Paulo\naccidents <- read_csv(\"...\")\n#> Demanda mensal por gasolina\ngasolina <- read_csv(\"...\")\n#> Demanda mensal EMTU\nemtu <- read_csv(\"...\")\n```\n:::\n\n\n# Sazonalidade\n\n## Sazonalidade Clássica\n\nA forma \"clássica\" de se modelar sazonalidade numa série é decompondo ela em três componentes: tendência, sazonalidade, e ruído. Didaticamente, temos:\n\n$$\ny_{t} = T_{t} + S_{t} + u_{t}\n$$\n\nEm geral, a tendência $T_{t}$ é um polinômio, de primeiro ou segundo grau[^1], que depende do tempo ou uma média móvel simples. Já a sazonalidade, $S_{t}$ entra linearmente no modelo: coloca-se uma variável binária (*dummy*) para cada período sazonal. No caso de uma série com sazonalidade mensal, isto significa incluir onze variáveris binárias[^2]. O caso de uma tendência linear com sazonalidade \"determinística\"[^3] é expresso na equação abaixo.\n\n[^1]: Pode-se usar um polinômio de qualquer grau, mas polinômios de ordens muito elevadas costumam se ajustar \"perfeitamente\" aos dados e vão absorver toda a sazonalidade da série.\n\n[^2]: Sempre coloca-se uma variável binária a menos do que períodos sazonais pela questão do posto da matriz de regressores. Na prática, se houvesse uma dummy para cada período sazonal a matriz de regressão seria uma matriz identidade.\n\n[^3]: É comum ver esta expressão nos textos de séries de tempo; em geral o termo é utilizado em contraste com modelos SARIMA onde a sazonalidade é estocástica, mas o termo \"determinístico\" não tem implicação causal. Na prática, quer dizer que a sazonalidade não varia no tempo e é sempre a mesma o que pode gerar previsões ruins a depender do caso.\n\n$$\ny_{t} = \\alpha_{0} + \\alpha_{1}t + \\sum_{i = 1}^{11}\\beta_{i}\\delta_{i} + u_{t}\n$$\n\nNeste tipo de regressão o \"período-base\" fica incorporado no termo de constante. Isto é, imaginando que temos uma série mensal e que janeiro seja o mês-base, o efeito de janeiro ficaria estimado junto com \\alpha\\_{0} e os demais\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf_to_ts <- function(df, date_col = NULL, value_col = NULL, freq = \"M\") {\n  \n  if (is.null(date_col)) {date_col = colnames(df)[1]}\n  if (is.null(value_col)) {value_col = colnames(df)[2]}\n  \n  #> Select columns and remove missing values\n  df = na.omit(dplyr::select(df, c(date_col, value_col)))\n  #> Get dates and check class\n  dates = df[[date_col]]\n  \n  if (!inherits(dates, \"Date\")) {\n    stop(\"Invalid date column selected.\")\n  }\n  \n  #> Check frequency argument\n  stopifnot(any(freq %in% c(\"M\", \"T\", \"Q\")))\n  frequency = ifelse(freq == \"M\", 12, 4)\n  \n  #> Get the starting date\n  date_min = min(dates)\n  #> Convert into a numeric vector\n  mes = lubridate::month(date_min)\n  ano = lubridate::year(date_min)\n  start = c(ano, mes)\n  \n  #> Get the values of the series\n  values = as.numeric(df[[value_col]])\n  \n  #> Convert to ts\n  y = stats::ts(values, start = start, frequency = frequency)\n  \n  return(y)\n  \n}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nipi <- df_to_ts(ipicc)\n\nautoplot(ipi)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=90%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmodel_lm <- tslm(ipi ~ trend + season)\n\n\nbroom::tidy(summary(model_lm))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 13 × 5\n   term        estimate std.error statistic  p.value\n   <chr>          <dbl>     <dbl>     <dbl>    <dbl>\n 1 (Intercept)  123.       3.59     34.3    4.38e-66\n 2 trend         -0.292    0.0234  -12.5    8.01e-24\n 3 season2       -0.183    4.57     -0.0400 9.68e- 1\n 4 season3        9.55     4.57      2.09   3.86e- 2\n 5 season4        2.39     4.57      0.524  6.01e- 1\n 6 season5        8.11     4.57      1.77   7.83e- 2\n 7 season6        6.20     4.57      1.36   1.78e- 1\n 8 season7       13.0      4.57      2.85   5.10e- 3\n 9 season8       17.4      4.57      3.81   2.19e- 4\n10 season9       11.8      4.67      2.52   1.30e- 2\n11 season10      16.7      4.67      3.57   5.11e- 4\n12 season11       9.78     4.67      2.09   3.83e- 2\n13 season12      -5.67     4.67     -1.21   2.27e- 1\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nautoplot(ipi) +\n  autolayer(fitted(model_lm))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=90%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggseasonplot(ipi)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=90%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nma_trend <- stats::filter(ipi, filter = rep(1/5, 5), method = \"convolution\")\n\nautoplot(ipi) +\n  autolayer(ma_trend)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=90%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nipi_detrend <- ipi - ma_trend\n\nautoplot(ipi_detrend)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=90%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmodel_lm <- tslm(ipi_detrend ~ season)\n\nautoplot(ipi_detrend) +\n  autolayer(fitted(model_lm))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=90%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmodel_lm <- tslm(ipi ~ season)\nanova(model_lm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnalysis of Variance Table\n\nResponse: ipi\n           Df Sum Sq Mean Sq F value  Pr(>F)  \nseason     11   5996  545.12  1.9703 0.03649 *\nResiduals 128  35414  276.67                  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n\n```{.r .cell-code}\nforecast::ggtsdisplay(resid(model_lm))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n# X13-ARIMA\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(seasonal)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsipi = seas(ipi)\n\nsummary(sipi)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nseas(x = ipi)\n\nCoefficients:\n                   Estimate Std. Error z value Pr(>|z|)    \nLeap Year           0.68207    1.40191   0.487   0.6266    \nWeekday             0.38802    0.05294   7.330 2.31e-13 ***\nEaster[1]          -3.09824    0.78531  -3.945 7.97e-05 ***\nAO2013.Feb         -9.33591    2.13724  -4.368 1.25e-05 ***\nAO2014.Jun         -7.96364    2.02529  -3.932 8.42e-05 ***\nAO2018.May        -12.42723    2.02295  -6.143 8.09e-10 ***\nLS2020.Mar        -10.84406    2.73867  -3.960 7.51e-05 ***\nAO2020.Apr        -23.55872    2.23834 -10.525  < 2e-16 ***\nAO2020.May        -10.77430    2.24587  -4.797 1.61e-06 ***\nLS2020.Jul         12.52252    2.54897   4.913 8.98e-07 ***\nMA-Nonseasonal-01   0.21283    0.08391   2.536   0.0112 *  \nMA-Seasonal-12      0.73641    0.06351  11.595  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nSEATS adj.  ARIMA: (0 1 1)(0 1 1)  Obs.: 140  Transform: none\nAICc: 654.2, BIC:   688  QS (no seasonality in final):    0  \nBox-Ljung (no autocorr.): 29.29   Shapiro (normality): 0.9826 .\n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}