{
  "hash": "012de6b354eab912effa955b7e46fe2c",
  "result": {
    "markdown": "---\ntitle: Sazonalidade\ndate: '2023-08-10'\ncategories: ['data-science', 'economia', 'tutorial-R', 'econometria']\ndescription: ''\n---\n\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n#> IPI - Construção Civil (sem ajuste sazonal)\nipicc <- rbcb::get_series(21868)\n#> Consumo mensal de energia elétrica - Residencial\ndf_energia <- rbcb::get_series(1403)\n#> Car accidents in São Paulo\naccidents <- read_csv(\"...\")\n#> Demanda mensal por gasolina\ngasolina <- read_csv(\"...\")\n#> Demanda mensal EMTU\nemtu <- read_csv(\"...\")\n```\n:::\n\n\n# Sazonalidade\n\n## Sazonalidade Clássica\n\nA forma \"clássica\" de se modelar sazonalidade numa série é decompondo ela em três componentes: tendência, sazonalidade, e ruído. Didaticamente, temos:\n\n$$\ny_{t} = T_{t} + S_{t} + u_{t}\n$$\n\nEm geral, a tendência $T_{t}$ é um polinômio, de primeiro ou segundo grau[^1], que depende do tempo ou uma média móvel simples. Já a sazonalidade, $S_{t}$ entra linearmente no modelo: coloca-se uma variável binária (*dummy*) para cada período sazonal. No caso de uma série com sazonalidade mensal, isto significa incluir onze variáveris binárias[^2]. O caso de uma tendência linear com sazonalidade \"determinística\"[^3] é expresso na equação abaixo.\n\n[^1]: Pode-se usar um polinômio de qualquer grau, mas polinômios de ordens muito elevadas costumam se ajustar \"perfeitamente\" aos dados e vão absorver toda a sazonalidade da série.\n\n[^2]: Sempre coloca-se uma variável binária a menos do que períodos sazonais pela questão do posto da matriz de regressores. Na prática, se houvesse uma dummy para cada período sazonal a matriz de regressão seria uma matriz identidade.\n\n[^3]: É comum ver esta expressão nos textos de séries de tempo; em geral o termo é utilizado em contraste com modelos SARIMA onde a sazonalidade é estocástica, mas o termo \"determinístico\" não tem implicação causal. Na prática, quer dizer que a sazonalidade não varia no tempo e é sempre a mesma o que pode gerar previsões ruins a depender do caso.\n\n$$\ny_{t} = \\alpha_{0} + \\alpha_{1}t + \\sum_{i = 1}^{11}\\beta_{i}\\delta_{i} + u_{t}\n$$\n\nNeste tipo de regressão o \"período-base\" fica incorporado no termo de constante. Isto é, imaginando que temos uma série mensal e que janeiro seja o mês-base, o efeito de janeiro ficaria estimado junto com \\alpha\\_{0} e os demais\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf_to_ts <- function(df, date_col = NULL, value_col = NULL, freq = \"M\") {\n  \n  if (is.null(date_col)) {date_col = colnames(df)[1]}\n  if (is.null(value_col)) {value_col = colnames(df)[2]}\n  \n  #> Select columns and remove missing values\n  df = na.omit(dplyr::select(df, c(date_col, value_col)))\n  #> Get dates and check class\n  dates = df[[date_col]]\n  \n  if (!inherits(dates, \"Date\")) {\n    stop(\"Invalid date column selected.\")\n  }\n  \n  #> Check frequency argument\n  stopifnot(any(freq %in% c(\"M\", \"T\", \"Q\")))\n  frequency = ifelse(freq == \"M\", 12, 4)\n  \n  #> Get the starting date\n  date_min = min(dates)\n  #> Convert into a numeric vector\n  mes = lubridate::month(date_min)\n  ano = lubridate::year(date_min)\n  start = c(ano, mes)\n  \n  #> Get the values of the series\n  values = as.numeric(df[[value_col]])\n  \n  #> Convert to ts\n  y = stats::ts(values, start = start, frequency = frequency)\n  \n  return(y)\n  \n}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nipi <- df_to_ts(ipicc)\n\nautoplot(ipi)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=90%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmodel_lm <- tslm(ipi ~ trend + season)\n\n\nbroom::tidy(summary(model_lm))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 13 × 5\n   term        estimate std.error statistic  p.value\n   <chr>          <dbl>     <dbl>     <dbl>    <dbl>\n 1 (Intercept)  124.       3.61     34.2    2.53e-65\n 2 trend         -0.298    0.0240  -12.4    1.27e-23\n 3 season2       -0.210    4.58     -0.0459 9.63e- 1\n 4 season3        9.52     4.58      2.08   3.96e- 2\n 5 season4        2.40     4.58      0.525  6.01e- 1\n 6 season5        8.10     4.58      1.77   7.92e- 2\n 7 season6        6.16     4.58      1.34   1.81e- 1\n 8 season7       12.3      4.68      2.63   9.70e- 3\n 9 season8       16.7      4.68      3.56   5.20e- 4\n10 season9       11.8      4.68      2.52   1.31e- 2\n11 season10      16.7      4.68      3.56   5.19e- 4\n12 season11       9.81     4.68      2.09   3.82e- 2\n13 season12      -5.64     4.68     -1.20   2.31e- 1\n```\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nautoplot(ipi) +\n  autolayer(fitted(model_lm))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){fig-align='center' width=90%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggseasonplot(ipi)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=90%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nma_trend <- stats::filter(ipi, filter = rep(1/5, 5), method = \"convolution\")\n\nautoplot(ipi) +\n  autolayer(ma_trend)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=90%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nipi_detrend <- ipi - ma_trend\n\nautoplot(ipi_detrend)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=90%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmodel_lm <- tslm(ipi_detrend ~ season)\n\nautoplot(ipi_detrend) +\n  autolayer(fitted(model_lm))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){fig-align='center' width=90%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmodel_lm <- tslm(ipi ~ season)\nanova(model_lm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAnalysis of Variance Table\n\nResponse: ipi\n           Df Sum Sq Mean Sq F value  Pr(>F)  \nseason     11   6233  566.66  2.0295 0.03067 *\nResiduals 126  35180  279.21                  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n\n```{.r .cell-code}\nforecast::ggtsdisplay(resid(model_lm))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n# X13-ARIMA\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(seasonal)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsipi = seas(ipi)\n\nsummary(sipi)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\nseas(x = ipi)\n\nCoefficients:\n                   Estimate Std. Error z value Pr(>|z|)    \nLeap Year           0.70176    1.40841   0.498   0.6183    \nWeekday             0.39172    0.05366   7.300 2.87e-13 ***\nEaster[1]          -3.07685    0.78925  -3.898 9.68e-05 ***\nAO2013.Feb         -9.32322    2.14649  -4.343 1.40e-05 ***\nAO2014.Jun         -7.96583    2.03547  -3.914 9.10e-05 ***\nAO2018.May        -12.45936    2.03317  -6.128 8.90e-10 ***\nLS2020.Mar        -10.81237    2.75090  -3.930 8.48e-05 ***\nAO2020.Apr        -23.63610    2.24940 -10.508  < 2e-16 ***\nAO2020.May        -10.79168    2.25698  -4.781 1.74e-06 ***\nLS2020.Jul         12.60947    2.58399   4.880 1.06e-06 ***\nMA-Nonseasonal-01   0.21318    0.08445   2.524   0.0116 *  \nMA-Seasonal-12      0.73913    0.06387  11.573  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nSEATS adj.  ARIMA: (0 1 1)(0 1 1)  Obs.: 138  Transform: none\nAICc: 645.6, BIC: 679.1  QS (no seasonality in final):    0  \nBox-Ljung (no autocorr.):  29.7   Shapiro (normality): 0.9821 .\n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}