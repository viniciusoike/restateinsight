{
  "hash": "082ae935c94e65a99b218373b5e5849a",
  "result": {
    "markdown": "---\ntitle: \"Mapas Interativos com Leaflet e R\"\ndescription: \"\"\ncategories: ['mapas', 'data-visualization', 'tutorial-R', 'data-science']\nformat:\n  html:\n    code-tools: true\nexecute: \n  message: false\n  warning: false\n  eval: false\ndraft: true\n---\n\n\n# Mapas Interativos\n\nMapas interativos permitem\n\n# Leaflet\n\nLeaflet é uma biblioteca de JavaScript feita para produzir mapas interativos de qualidade. O pacote `leaflet`, do R, é uma interface que permite produzir estes mapas diretamente dentro do R.\n\nAs funções do `leaflet` somam elementos e camadas em um mapa inicial usando o operador pipe; o nome das funções segue o padrão camel case (i.e. `nomeDaFuncao`). A documentação das funções pode ser encontrada aqui.\n\nDe maneira geral, o `leaflet` é bastante flexível na construção de mapas, permitindo muitas opções de customização. Como de costume, esta flexibilidade vem com um custo: mesmo mapas relativamente simples exigem uma quantidade considerável de código. Neste sentido, pode-se considerar pacotes alternativos como `tmap` e `mapview`.\n\n## Básico\n\nCriar um mapa iterativo no `leaflet` é bastante simples. O código abaixo cria um mapa de São Paulo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(leaflet)\n\nm = leaflet() %>%\n  addTiles() %>%\n  setView(lng = -46.655837, lat = -23.561387, zoom = 12)\n\nm\n```\n:::\n\n\nPode-se trocar o basemap do mapa alterando o `provider`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm %>%\n  addProviderTiles(provider = \"CartoDB\")\n```\n:::\n\n\nPara adicionar \"shapes\" ao mapa usa-se as funções `add*` como `addMarkers`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npontos <- tibble(\n  lng = -46.655837, lat = -23.561387\n)\n\npontos = st_as_sf(pontos, coords = c(\"lng\", \"lat\"), crs = 4326)\n\nm %>%\n  addMarkers(data = pontos)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstarbucks <- qs::qread(\n  here::here(\"static/data/starbucks_locations_sp.qs\")\n)\n\nm %>%\n  addMarkers(data = starbucks, label = ~as.character(name)) %>%\n  addProviderTiles(provider = \"CartoDB\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidypod)\nlibrary(sf)\nlibrary(dplyr)\n\npod_income <- tidypod::import_pod_tables(tables = \"income\", geo = TRUE)\n\npod_income <- filter(pod_income, code_muni == 36)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nleaflet(pod_income) %>%\n  addTiles() %>%\n  addPolygons(weight = 1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Neighborhoods\nnb <- geobr::read_neighborhood(showProgress = FALSE)\nnb <- nb |> \n  filter(code_muni == 4106902)\n# Import population table from SIDRA\npop_nb <- sidrar::get_sidra(\n  x = 1378,\n  variable = 93,\n  classific = \"c2\",\n  geo = \"Neighborhood\",\n  geo.filter = list(\"City\" = code_cur)\n)\n\n# Clean table and make it wide\npop_nb <- pop_nb |> \n  as_tibble() |> \n  janitor::clean_names() |> \n  select(code_neighborhood = bairro_codigo, sex = sexo, count = valor) |> \n  mutate(\n    sex = str_replace(sex, \"Homens\", \"Male\"),\n    sex = str_replace(sex, \"Mulheres\", \"Female\")\n    ) |> \n  pivot_wider(\n    id_cols = \"code_neighborhood\",\n    names_from = \"sex\",\n    values_from = \"count\"\n    )\n\n# Make neighborhood codes compatible\npop_nb <- pop_nb |> \n  mutate(code_neighborhood = str_c(\n    str_sub(code_neighborhood, 1, 7), \"05\", str_sub(code_neighborhood, 8, 10))\n    )\n# Join census table with shapefile\ncur_nb <- left_join(nb, pop_nb, by = \"code_neighborhood\")\n\n# Calculate population density\ncur_nb <- cur_nb %>%\n  st_transform(crs = 32722) %>%\n  mutate(\n    area = st_area(.),\n    area = as.numeric(area) / 1e5,\n    pop_dens = Total / area,\n    pop_ntile = ntile(pop_dens, 5)\n    )\n# Convert back to 4326 for leaflet\ncur_nb <- st_transform(cur_nb, crs = 4326)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Color palette and bins\nbins <- quantile(cur_nb$pop_dens, probs = seq(0.2, 0.8, 0.2))\nbins <- c(0, bins, max(cur_nb$pop_dens))\npal <- colorBin(\n  palette = as.character(met.brewer(\"Hokusai2\", 5)),\n  domain = cur_nb$pop_dens,\n  bins = bins)\n\n# Labels\nlabels <- sprintf(\n  \"<strong>%s</strong><br/> %s people <br/> %g people / ha<sup>2</sup>\",\n  cur_nb$name_neighborhood,\n  format(cur_nb$Total, big.mark = \".\"),\n  round(cur_nb$pop_dens, 1)\n  )\n\nlabels <- lapply(labels, htmltools::HTML)\n\n# Center of the map for zoom\ncenter <- st_coordinates(st_centroid(border))\n\nleaflet(cur_nb) %>%\n  addTiles() %>%\n  addPolygons(\n    weight = 2,\n    color = \"white\",\n    fillColor = ~pal(pop_dens),\n    fillOpacity = 0.8,\n    highlightOptions = highlightOptions(\n      color = \"gray20\",\n      weight = 10,\n      fillOpacity = 0.8,\n      bringToFront = TRUE),\n    label = labels,\n    labelOptions = labelOptions(\n      style = list(\"font-weight\" = \"normal\", \"font-family\" = \"Fira Code\")\n    )\n  ) %>%\n  addLegend(\n    pal = pal,\n    values = ~pop_dens,\n    title = \"Densidade Pop.\",\n    position = \"bottomright\"\n  ) %>%\n  addProviderTiles(providers$CartoDB) %>%\n  setView(lng = center[1], lat = center[2], zoom = 11)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}