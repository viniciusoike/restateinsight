{
  "hash": "c6463614e861cff4d61f9ff5711c06d6",
  "result": {
    "markdown": "---\ntitle: \"Dados do Metrô\"\ndraft: true\nexecute: \n  eval: false\n---\n\n\n# Introdução\n\nRecentemente, eu decidi coletar todos os dados de mobilidade sobre os trens e metrôs de São Paulo, publicamente disponíveis. Esta tarefa se provou mais difícil do que eu antecipava. Tradicionalmente, há duas empresas que operam o transporte sobre trilhos na Região Metropolitana: a CPTM, que maneja os trens intermunicipais, e o Metrô, que administra o metrô de São Paulo. Atualmente há também operadores privados: a ViaQuatro, que opera a linha-4 amarela do metrô; e a ViaMobilidade que opera a linha 5-Lilás do metrô e as linhas 9-Esmeralda, 15-Prata.\n\nOs dados da mobilidade não apenas estão espalhados pela internet, como também estão em formatos diferentes. Para piorar, muitos dos arquivos estão armazenados como PFDs, mais especificamente, como imagens de tabelas salvas em arquivos PDF.\n\nOs dados abertos da linha 4-amarela, por exemplo, estão todas na página.\n\nCada tabela é salva num PDF diferente. Há três informações principais: entrada de passageiros por linha; número de passageiros transportados por linha; e a entrada de passageiros por estação. Cada PDF guarda um arquivo com a tabela mensal que registra estas informações. Exceto pelos dados anteriores a 2018. Os dados anteriores a 2018 estão salvos em PDFs \"anuais\", que contém todas as tabelas daquele ano. Assim o PDF de 2010 contém 12 tabelas, uma para cada mês do ano.\n\n# R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(readr)\nlibrary(tidyr)\nlibrary(purrr)\n```\n:::\n\n\n# Webscrape\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\nlibrary(xml2)\n```\n:::\n\n\n### Encontrando os links\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl <- \"https://www.viaquatro.com.br/linha-4-amarela/passageiros-transportados\"\n\npage <- read_html(url)\n\npdf_links <- page %>%\n  rvest::html_elements(xpath = \"//article/ul/li/a\") %>%\n  html_attr(\"href\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npdf_names <- page %>%\n  rvest::html_elements(xpath = \"//article/ul/li/a\") %>%\n  html_attr(\"title\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npdf_links <- pdf_links[str_detect(pdf_links, \"\\\\.pdf$\")]\n\nparams <- tibble(\n  link = pdf_links,\n  name = pdf_names\n)\n```\n:::\n\n\n### Organizando os links\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmes <- lubridate::month(1:12, label = TRUE, abbr = FALSE, locale = \"pt_BR\")\n\nparams <- params %>%\n  separate(name, into = c(\"variable\", \"x1\", \"x2\"), sep = \" - \", remove = FALSE) %>%\n  mutate(\n    year = case_when(\n      str_length(x1) == 4 ~ as.numeric(x1),\n      str_length(x2) == 4 ~ as.numeric(x2),\n      TRUE ~ NA\n    ),\n    date = case_when(\n      str_detect(x1, paste(mes, collapse = \"|\")) ~ x1,\n      str_detect(x2, paste(mes, collapse = \"|\")) ~ x2,\n      TRUE ~ NA\n    ),\n    date = str_trim(date),\n    date = str_remove(date, \" de\"),\n    ts_date = parse_date(paste(date, \"01\", sep = ' '), format = \"%B %Y %d\", locale = locale(\"pt\")),\n    year = if_else(is.na(year), lubridate::year(ts_date), year)\n  )\n\nparams <- params |> \n  arrange(ts_date) |> \n  arrange(variable)\n```\n:::\n\n\n### Download de todos os PDFs\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n#> Baixar todos os pdfs do site\n\n#> Define a pasta onde os arquivos serão baixados\nfld <- here::here(\"static/data/raw/metro_sp/linha_4/\")\n#> A 'base' da url do site\nbaseurl <- \"https://www.viaquatro.com.br\"\n#> Define uma barra de progresso para acompanhar o resultado\npb <- txtProgressBar(max = nrow(params), style = 3)\n\n#> Loop nas linhas da tabela 'params'\nfor (i in 1:nrow(params)) {\n  \n  #> Pega a coluna 'name' da coluna atual e transforma o nome idiomático\n  name_file <- janitor::make_clean_names(params[[\"name\"]][i])\n  #> Adiciona extensão .pdf\n  name_file <- paste0(name_file, \".pdf\")\n  #> Define o path para baixar o arquivo\n  destfile <- here::here(fld, name_file)\n  \n  #> Verifica se o arquivo já existe na pasta de destino. Caso contrário baixa o pdf.\n  if (file.exists(destfile)) {\n    message(glue::glue(\"File {name_file} already exists.\"))\n    i <- i + 1\n  } else {\n    #> Url para baixar o pdf\n    url <- paste0(baseurl, params[[\"link\"]][i])\n    #> Faz o dowload do arquivo\n    download.file(url = url, destfile = destfile, mode = \"wb\", quiet = TRUE)\n    #> Por precaução define um breve timeout aleatório (1 seg + random)\n    Sys.sleep(1 + runif(1))\n  }\n\n  #> Atualiza a barra de progresso\n  setTxtProgressBar(pb, i)\n  \n}\n```\n:::\n\n\n# Importando PDFs\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(pdftools)\n```\n:::\n\n\n![Exemplo do formato do PDF com dados de entrada de passageiros](/static/images/linha_4_passageiros.png){fig-align=\"center\"}\n\n![Exemplo do formato do PDF com dados de passageiros por estação](/static/images/linha_4_estacao.png){fig-align=\"center\"}\n\n![Exemplo do formato do PDF anterior a 2018](/static/images/linha_4_anual.png){fig-align=\"center\"}\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}