{
  "hash": "9b3d87da552046eedde4c32518ad2680",
  "result": {
    "markdown": "---\ntitle: \"The Greatest Films of All-time: another case of recency bias?\"\ndate: \"2024-04-17\"\ncategories: ['data-visualization', 'ggplot2', 'movies', 'bias']\ndescription: \"\"\nexecute: \n  message: false\n  warning: false\ndraft: true\n---\n\n\n# Recency Bias\n\nRecency bias is a well known cognitive bias, also known as memory bias. It describes the human tendency to attribute a greater importance to more recent events than to events that occurred further in time. This happens when travelers believe an airplane crash is more likely to occur after seeing news about an airplane accident; when investors believe the market will keep growing following a recent string of positive news; when swimmers believe that shark attacks will be more likely after watching a documentary about sharks.\n\nMore recently, *recency bias has become a pervasive feature of online culture*. In a never ending cycle of \"the new is always better\", social media influencers and the media more broadly are constantly claiming that this new thing is actually *the best thing of all time*. Public opinion is slowly but surely catching up to this in sports discussions, as GOAT (*greatest of all time*) discussion fatigue is increasing among fans.\n\n![](images/Screenshot%202024-05-01%20at%2013.41.49.png){fig-align=\"center\" width=\"500\"}\n\n> *It's really convenient that all of the GOATs, of all sports, just happen to play and perform at their best during the first 20 years of the most recent century: just in time for you to watch them.*\n\nFor several different reasons, human's tend to put a greater weight onto more recent events when evaluating pretty much anything. This is partly due to how our memory works but sometimes is due to availability. When something new happens, social media is quickly extracts all possible content from it and then moves on to the next thing.\n\n## Recency Bias in Movies?\n\n### The data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(showtext)\nfont_add_google(\"Raleway\", \"Raleway\")\nshowtext_auto()\n\nfilms <- qs::qread(here::here(\"static/data/greatest_movies.qs\"))\n\ndict <- tribble(\n  ~source, ~list_type,\n  \"afi\", \"critics\",\n  \"bfi\", \"critics\",\n  \"ebert\", \"critics\",\n  \"empire\", \"public\",\n  \"variety\", \"critics\",\n  \"timeout\", \"critics\",\n  \"bbc_american\", \"critics\",\n  \"bbc_women\", \"critics\",\n  \"bbc_foreign\", \"critics\",\n  \"bbc_21st\", \"critics\",\n  \"imdb\", \"public\",\n  \"rolling_stones_scifi\", \"critics\",\n  \"letterboxd\", \"public\",\n  \"criticker\", \"public\"\n)\n\nfilms <- left_join(films, dict, by = \"source\")\n```\n:::\n\n\n## Critics vs Public\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nimdb <- filter(films, source == \"imdb\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfilms <- films |> \n  mutate(decade = year - (year %% 10))\n\nimdb <- filter(films, source == \"imdb\")\n\nimdb_count <- count(imdb, decade)\n\np1 <- ggplot(imdb_count, aes(decade, n)) +\n  geom_col(fill = \"#deb522\") +\n  geom_text(aes(y = n - 3, label = n), family = \"Raleway\") +\n  geom_hline(yintercept = 0) +\n  scale_x_continuous(\n    breaks = seq(1910, 2020, 10),\n    labels = \\(x) paste0(substr(x, 3, 4), \"'s\"),\n    limits = c(1910, NA)) +\n  labs(\n    subtitle = \"IMDB Top 250 (voted by general online public)\",\n    x = NULL,\n    y = NULL\n  ) +\n  theme_minimal(base_family = \"Raleway\") +\n  theme(\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank()\n  )\n\nbfi <- filter(films, source == \"bfi\")\n\nbfi_count <- count(bfi, decade)\n\np2 <- ggplot(bfi_count, aes(decade, n)) +\n  geom_col(fill = \"#000000\") +\n  geom_text(aes(y = n - 3, label = n), family = \"Raleway\", color = \"white\") +\n  geom_hline(yintercept = 0) +\n  scale_x_continuous(\n    breaks = seq(1910, 2020, 10),\n    labels = \\(x) paste0(substr(x, 3, 4), \"'s\")) +\n  labs(\n    subtitle = \"BFI Greatest Films (voted by movie critics)\",\n    x = NULL,\n    y = NULL\n  ) +\n  theme_minimal(base_family = \"Raleway\") +\n  theme(\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank()\n  )\n\nlibrary(patchwork)\n\npanel <- p1 / p2\n\nfinal_plot <- panel + plot_annotation(\n  title = \"Are movie critics driven by nostalgia, while recency\\nbias shapes the public's perspective?\",\n  subtitle = \"Year of release of the 250 'greatest films of all time' by decade.\",\n  caption = \"Source: IMDB (IMDB Top 250, April 2024), BFI (The Greatest Films of All Time, 2022)\") &\n  theme(\n    plot.margin = margin(5, 10, 5, 10, \"pt\"),\n    plot.title = element_text(\n      size = 18,\n      family = \"Raleway\",\n      margin = margin(5.5, 0, 5.5, 10)),\n    plot.subtitle = element_text(\n      size = 12,\n      color = \"gray20\",\n      family = \"Raleway\",\n      margin = margin(2, 0, 5.5, 10)),\n    plot.caption = element_text(\n      family = \"Raleway\",\n      size = 10,\n      color = 'gray30'\n    ),\n    axis.text.x = element_text(size = 12)\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_plot\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntab <- inner_join(\n  select(bfi, name_film, rank_bfi = rank), \n  select(imdb, name_film, rank_imdb = rank),\n  by = \"name_film\"\n  )\n\ncomp <- tab |> \n  mutate(\n    diff = rank_bfi - rank_imdb,\n    abs_diff = abs(diff),\n    name_film = if_else(\n      stringr::str_detect(name_film, \"^Dr\\\\. Strangelove\"),\n      \"Dr. Strangelove\",\n      name_film,\n    ),\n    name_film = factor(name_film),\n    name_film = forcats::fct_reorder(name_film, -abs_diff),\n    is_critics = factor(if_else(diff < 0, 1L, 0L))) |> \n  arrange(desc(diff)) |> \n  filter(abs_diff > 100 | abs_diff < 50)\n\ncomp_long <- comp |> \n  tidyr::pivot_longer(cols = rank_bfi:rank_imdb)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntab1 <- comp |> \n  filter(abs_diff < 50) |> \n  mutate(name_film = forcats::fct_reorder(name_film, rank_bfi)) |> \n  arrange(name_film)\n\ntab1_long <- tab1 |> \n  tidyr::pivot_longer(cols = rank_bfi:rank_imdb) |> \n  mutate(\n    is_bfi = if_else(stringr::str_detect(name, \"rank_bfi\"), 1L, 0L),\n    is_bfi = factor(is_bfi)\n    )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncolors <- c(\"#deb522\", \"#2166ac\")\n\nggplot(tab1) +\n  geom_segment(\n    aes(x = name_film, xend = name_film, y = rank_bfi, yend = rank_imdb)\n    ) +\n  geom_point(\n    data = tab1_long,\n    aes(x = name_film, y = value, color = is_bfi),\n    size = 2\n  ) +\n  geom_point(\n    data = tab1,\n    aes(x = name_film, y = -10, shape = is_critics, color = is_critics),\n    size = 2\n  ) +\n  annotate(\n    \"label\",\n    x = \"Psycho\",\n    y = 80,\n    label = \"Psycho is acclaimed\\nby both audiences\\nand critics.\",\n    label.size = 0,\n    size = 2,\n    family = \"Raleway\"\n  ) +\n  annotate(\n    \"label\",\n    x = \"Metropolis\",\n    y = 150,\n    label = \"Metropolis is more\\ncritics-favored.\",\n    label.size = 0,\n    size = 2,\n    family = \"Raleway\"\n  ) +\n  annotate(\n    \"label\",\n    x = \"Raging Bull\",\n    y = 210,\n    label = \"Ran is more\\nfavored by the public.\",\n    label.size = 0,\n    size = 2,\n    family = \"Raleway\"\n  ) +\n  scale_x_discrete(labels = \\(x) stringr::str_wrap(x, 18)) +\n  scale_y_continuous(breaks = c(1, seq(50, 250, 50))) +\n  scale_color_manual(\n    name = \"\",\n    values = colors,\n    labels = c(\"IMDB\", \"BFI\")\n    ) +\n  scale_shape_manual(values = c(2, 6)) +\n  guides(shape = \"none\") +\n  coord_flip() +\n  labs(\n    title = \"\",\n    subtitle = \"Samples of movies ranked by BFI x IMDB\\n\\n\",\n    x = NULL,\n    y = \"Rank (less is higher)\"\n  ) +\n  theme_minimal(base_family = \"Raleway\", base_size = 10) +\n  theme(\n    legend.position = c(0.08, 1.05),\n    legend.direction = \"horizontal\",\n    axis.text.y = element_text(hjust = 1)\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntab2 <- comp |> \n  filter(abs_diff > 100) |> \n  mutate(name_film = forcats::fct_reorder(name_film, -rank_bfi)) |> \n  arrange(name_film)\n\ntab2_long <- tab2 |> \n  tidyr::pivot_longer(cols = rank_bfi:rank_imdb) |> \n  mutate(\n    is_bfi = if_else(stringr::str_detect(name, \"rank_bfi\"), 1L, 0L),\n    is_bfi = factor(is_bfi)\n    )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncolors <- c(\"#deb522\", \"#2166ac\")\n\nggplot(tab2) +\n  geom_segment(\n    aes(x = name_film, xend = name_film, y = rank_bfi, yend = rank_imdb)\n    ) +\n  geom_point(\n    data = tab2_long,\n    aes(x = name_film, y = value, color = is_bfi),\n    size = 2\n  ) +\n  geom_point(\n    data = tab2,\n    aes(x = name_film, y = -10, shape = is_critics, color = is_critics),\n    size = 2\n  ) +\n  annotate(\n    \"label\",\n    x = \"Citizen Kane\",\n    y = 170,\n    label = \"Tokyo Story is the most 'divisive' movie.\\nRanked 4th by the BFI and 211th by IMDB.\",\n    label.size = 0,\n    size = 2,\n    family = \"Raleway\"\n  ) +\n  scale_x_discrete(labels = \\(x) stringr::str_wrap(x, 18)) +\n  scale_y_continuous(breaks = c(1, seq(50, 250, 50))) +\n  scale_color_manual(\n    name = \"\",\n    values = colors,\n    labels = c(\"IMDB\", \"BFI\")\n    ) +\n  scale_shape_manual(values = c(2, 6)) +\n  guides(shape = \"none\") +\n  coord_flip() +\n  labs(\n    title = \"\",\n    subtitle = \"Samples of movies ranked by BFI x IMDB\\n\\n\",\n    x = NULL,\n    y = \"Rank (less is higher)\"\n  ) +\n  theme_minimal(base_family = \"Raleway\", base_size = 10) +\n  theme(\n    legend.position = c(0.08, 1.05),\n    legend.direction = \"horizontal\",\n    axis.text.y = element_text(hjust = 1)\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntab <- full_join(\n  select(bfi, name_film, rank_bfi = rank), \n  select(imdb, name_film, rank_imdb = rank),\n  by = \"name_film\"\n  )\n\ntab |> \n  filter(is.na(rank_imdb)) |> \n  slice_min(rank_bfi, n = 20) |> \n  select(name_film, rank = rank_bfi)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 2\n   name_film                                             rank\n   <chr>                                                <int>\n 1 Jeanne Dielman, 23, quai du commerce, 1080 Bruxelles     1\n 2 In the Mood for Love                                     5\n 3 Beau Travail                                             7\n 4 Mulholland Drive                                         8\n 5 Man with a Movie Camera                                  9\n 6 Sunrise                                                 11\n 7 The Rules of the Game                                   13\n 8 Cléo from 5 to 7                                        14\n 9 The Searchers                                           15\n10 Meshes of the Afternoon                                 16\n11 Close-Up                                                17\n12 Persona                                                 18\n13 Late Spring                                             22\n14 Playtime                                                23\n15 Do the Right Thing                                      24\n16 Au hasard Balthazar                                     25\n17 The Night of the Hunter                                 26\n18 Shoah                                                   27\n19 Daisies                                                 28\n20 Portrait of a Lady on Fire                              30\n```\n:::\n\n```{.r .cell-code}\ntab |> \n  filter(is.na(rank_bfi)) |> \n  slice_min(rank_imdb, n = 20) |> \n  select(name_film, rank = rank_imdb)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 2\n   name_film                                          rank\n   <chr>                                             <int>\n 1 The Shawshank Redemption                              1\n 2 The Dark Knight                                       3\n 3 12 Angry Men                                          5\n 4 Schindler's List                                      6\n 5 The Lord of the Rings: The Return of the King         7\n 6 The Lord of the Rings: The Fellowship of the Ring     9\n 7 Forrest Gump                                         11\n 8 The Lord of the Rings: The Two Towers                12\n 9 Fight Club                                           13\n10 Inception                                            14\n11 Star Wars: Episode V - The Empire Strikes Back       15\n12 One Flew Over the Cuckoo's Nest                      18\n13 Se7en                                                19\n14 Interstellar                                         20\n15 Dune: Part Two                                       21\n16 The Silence of the Lambs                             24\n17 Saving Private Ryan                                  25\n18 City of God                                          26\n19 Life Is Beautiful                                    27\n20 The Green Mile                                       28\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(comp) +\n  geom_segment(\n    aes(x = name_film, xend = name_film, y = rank_bfi, yend = rank_imdb)\n    ) +\n  geom_point(\n    data = comp_long,\n    aes(x = name_film, y = value, color = name),\n    size = 3\n  ) +\n  scale_x_discrete(labels = \\(x) stringr::str_wrap(x, 18)) +\n  coord_flip() +\n  theme_minimal(base_family = \"Raleway\", base_size = 10) +\n  theme(\n    axis.text.y = element_text(hjust = 1)\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# imdb_bfi |> \n#   bind_rows() |> \n#   left_join(dim_title, by = c(\"name_film\" = \"primaryTitle\", \"year\" = \"startYear\")) |> \n#   left_join(ratings, by = \"tconst\") |> \n#   filter(is.na(averageRating))\n# \n# clean_bfi |> \n#   mutate(decade = year - (year %% 10)) |> \n#   ggplot(aes(x = decade)) +\n#   geom_bar()\n# \n# clean_imdb |> \n#   mutate(decade = year - (year %% 10)) |> \n#   ggplot(aes(x = decade)) +\n#   geom_bar()\n# \n# ggplot(clean_empire, aes(x = year)) +\n#   geom_histogram(bins = 12)\n# \n# \n# ggplot(clean_bfi, aes(x = year)) +\n#   geom_histogram(bins = 12, color = \"white\")\n# \n# ggplot(clean_imdb, aes(x = year)) +\n#   geom_histogram(bins = 15)\n# \n# ggplot(clean_variety, aes(x = year)) +\n#   geom_histogram(bins = 11, color = \"white\") +\n#   geom_hline(yintercept = 0) +\n#   theme_minimal() +\n#   theme(\n#     panel.grid.minor = element_blank()\n#   )\n# \n# hist(clean_variety$year, breaks = \"fd\")\n# \n# ggplot(clean_afi, aes(x = year)) +\n#   geom_histogram(bins = 15)\n# \n# ggplot(clean_empire, aes(x = year)) +\n#   geom_histogram(bins = 15)\n# \n# ggplot(clean_ebert, aes(x = year)) +\n#   geom_histogram(bins = 15)\n# \n# \n# \n# ggplot(clean_abracine, aes(x = year)) +\n#   geom_histogram(bins = 15)\n# \n# clean_empire |> \n#   mutate(\n#     decade = year - (year %% 10)\n#   ) |> \n#   ggplot(aes(x = decade, y = averageRating, group = decade)) +\n#   geom_violin()\n# \n# \n# clean_empire |> \n#   mutate(\n#     decade = year - (year %% 10)\n#   ) |> \n#   ggplot(aes(x = decade, y = averageRating, group = decade)) +\n#   geom_count()\n# \n# clean_empire |> \n#   filter(averageRating < 7) |> \n#   arrange(averageRating)\n\n\n# Colors\n# imdb = \"#deb522\"\n# variety = \"#1a282f\", \"#546464\"\n# bfi = \"#000000\"\n# empire = \"#ff0000\"\n# \n# imdb_afi <- imdb_afi[[1]]\n# \n# imdb_bfi <- bind_rows(imdb_bfi)\n# \n# dat <- list(imdb = clean_imdb, empire = imdb_empire, afi = imdb_afi, bfi = imdb_bfi, variety = imdb_variety, timeout = imdb_timeout)\n# \n# dat <- bind_rows(dat, .id = \"source\")\n# \n# dat <- dat |> \n#   mutate(\n#     source = factor(\n#       source,\n#       levels = c(\"afi\", \"bfi\", \"timeout\", \"variety\", \"empire\", \"imdb\"),\n#       labels = c(\"AFI\", \"BFI\", \"TimeOut\", \"Variety\", \"Empire\", \"IMDB\"))\n#   )\n# \n# highlight_low = dat |> \n#   group_by(source) |> \n#   slice_min(rating, n = 3)\n# \n# ggplot(dat, aes(source, rating, color = source)) +\n#   geom_jitter(width = 0.4, alpha = 0.75) +\n#   ggrepel::geom_text_repel(data = highlight_low, aes(label = name_film), size = 2) +\n#   guides(color = \"none\") +\n#   theme_minimal()\n# \n# \n# \n# library(ggridges)\n# \n# ggplot(dat, aes(year, source, fill = source)) +\n#   geom_density_ridges(alpha = 0.5) +\n#   scale_x_continuous(limits = c(1900, 2024)) +\n#   guides(fill = \"none\") +\n#   theme_minimal()\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}