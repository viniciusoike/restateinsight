{
  "hash": "7a151e90e8c1612756101120542f149f",
  "result": {
    "markdown": "---\ntitle: \"Punchcard plots in R\"\ndate: \"2024-12-04\"\ncategories: ['data-visualization', 'ggplot2', 'tutorial-R']\ndescription: \"Punchcard plots are an alternative way to visualize data distributed across two categorical dimensions, such as days of the week and hours of the day. In this tutorial, you'll learn how to create a punchcard plot using R and ggplot2. I show some of the basics of this plot and also how to create more sophisticated plots.\"\nexecute:\n  warning: false\n---\n\n\n\n\n# Punchcard plot\n\nA \"punchcard\" plot shows the occurrence/frequency of a pair of discrete variables. Each discrete variable is plotted onto the X-Y axis and the intensity of the frequency is represented by the size or color of point. The use of colors can also help visualize a third discrete variable.\n\nThere are several possible applications of a \"punchcard\" plot. They might include:\n\n-   the number of visitors received by a chain of stores in each state (x) and each day of the week (y);\n\n-   the aggregated rating of products (y) based on their category (x)\n\n-   the number of students attending each class (x) based on their major (y); and many other examples.\n\nI haven't found much formal documentation on \"punchcard plots\" and have myself only found out about this term while looking for a name for the plot below. This visualization shows the IMDB ratings for the top 250 films by decade. The size of each bubble shows how many films appear in each rating bin in each decade.\n\n![](/static/images/replications/nexo_imdb.png){fig-align=\"center\"}\n\nThere are some other posts discussing this type of plot ([here](https://towardsdatascience.com/make-a-punchcard-plot-with-seaborn-ee8097bee4e1), and [here](https://docs.splunk.com/Documentation/Splunk/9.3.2/DashStudio/chartsPunch)) but overall this is definitely not a well-established term.\n\n## ggplot2\n\n### The basics\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\n```\n:::\n\n\nThe simplest way to make a punchcard plot is to use the `geom_count` function. This will count the ocurrences of the x-y pair variables selected. The example below uses the `diamonds` data.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(diamonds, aes(cut, color)) +\n  geom_count()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n##  \n\nThis function is a simple wrapper around `geom_point(aes(size = n))`. The code below makes the same plot, but first we count the number of occurrences of each of the `cut` and `color` variables.\n\nIt's important to note that there's nothing special about `n`. It's simply the default column name that results from using the `count` function.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntab <- diamonds |> \n  count(cut, color)\n\nggplot(tab, aes(cut, color)) +\n  geom_point(aes(size = n))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nIf our data is already aggregated we might desire to show the sum of some pair of variables. In the `txhousing` data we have the total number of house sales in each month and year by city. To aggregate the total number of sales, across all cities, we can use `weight = sales`.\n\nNote that both `year` and `month` are continuous variables but we can treat them as if they were discrete. To actually force `R` to treat them as categorical variables they must be converted to `factor`. Also note the use `na.omit` since there are missing values in the `sales` column.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntxhousing <- na.omit(txhousing)\n\nggplot(txhousing, aes(month, year)) +\n  geom_count(aes(weight = sales))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nAgain, the same result can be achieved using `count` and `geom_point` but more code is necessary.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntxhousing |> \n  na.omit() |> \n  count(year, month, wt = sales) |> \n  ggplot(aes(month, year)) +\n  geom_point(aes(size = n))\n```\n:::\n\n\n### Modifying the plot\n\nThere isn't much customization available for punchcard plots. To change the size of each bubble we use `scale_size_*`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(txhousing, aes(month, year)) +\n  geom_count(aes(weight = sales)) +\n  scale_size_continuous(breaks = c(15000, 20000, 25000, 30000))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nSince `geom_count` is essentially the same as `geom_point` we can alter its shape.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(txhousing, aes(month, year)) +\n  geom_count(aes(weight = sales), shape = 22) +\n  scale_size_continuous(breaks = c(15000, 20000, 25000, 30000))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nFinally, we can use `geom_color_*` and `geom_fill_` to map variables as a color on the plot. In the plot below I highlight the top-selling month in each year. It becomes clear the June and July are the most active months for the housing market.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nagghousing <- txhousing |> \n  count(month, year, wt = sales) |> \n  mutate(\n    year = as.factor(year),\n    month = as.factor(month),\n    highlight = factor(if_else(n == max(n), 1L, 0L)),\n    .by = \"year\"\n    )\n\nggplot(agghousing, aes(month, year)) +\n  geom_point(aes(size = n, color = highlight)) +\n  scale_size_continuous(breaks = c(15000, 20000, 25000, 30000))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Countries in recession\n\nFor a more interesting example we can calculate the share of countries facing an economic recession by region. We use the `maddison` database from the homonyms package.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nimport::from(maddison, maddison)\n\ndat <- maddison |> \n  filter(year >= 1999) |> \n  mutate(\n    growth = rgdpnapc / lag(rgdpnapc) - 1,\n    is_growth = if_else(growth >= 0, 1L, 0L),\n    .by = \"iso3c\"\n  )\n\nrecession_region <- dat |> \n  filter(year >= 2000) |> \n  summarise(\n    growth = sum(is_growth, na.rm = TRUE),\n    total = n(),\n    .by = c(\"region\", \"year\")\n  ) |> \n  mutate(\n    share = (1 - growth / total) * 100,\n    highlight = factor(if_else(share > 20, 1, 0)),\n    region = as.factor(region),\n    region = forcats::fct_rev(region)\n    )\n```\n:::\n\n\nThe plot shows the share of countries in each region that are facing an economic recession in a given year in the 2000-2016 period. For simplicity, I define an economic recession simply as country facing negative GDP per capita growth (year on year). I highlight the years when over 20% of the countries were facing a recession.\n\nNote that this visualization is mostly illustrative and a better categorization of each region would likely be required. Even so, we can see how some regions such as Western Africa faced several recessions. We can also see the impact of the Great Financial Recession in 2008-09.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(recession_region, aes(year, region)) + \n  geom_count(aes(size = share, color = highlight)) +\n  scale_size_continuous(\n    name = \"Share of countries\\nin recession (%)\",\n    breaks = c(0, 20, 40, 60, 80, 100)\n  ) +\n  scale_y_discrete(labels = \\(x) stringr::str_wrap(x, width = 17)) +\n  scale_color_manual(values = RColorBrewer::brewer.pal(3, \"RdBu\")[c(3, 1)]) +\n  guides(color = \"none\", size = guide_legend(label.position = \"bottom\", nrow = 1)) +\n  labs(\n    title = \"Economic Recessions across regions\",\n    subtitle = \"Red circles show that over 20% of countries in the region are in recession.\",\n    x = NULL,\n    y = NULL,\n    caption = \"Source: Maddisson Project (2018)\") +\n  theme_minimal() +\n  theme(legend.position = \"top\", legend.direction = \"horizontal\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n## Replicating the Nexo plot\n\nFully replicating the Nexo plot shown in the beginning of this post requires a substantial amount of effort. For the purposes of this tutorial, I'll show how to replicate the most prevalent aspects of the visualization, ignoring the annotations, arrows, and fonts.\n\nFor a complete replication of the Nexo plot see my other post.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\nnexo_labels <- c(\"até\\n1950\", \"1960\", \"70\", \"80\", \"90\", \"00\", \"10\", \"20\", \"até\\nhoje\")\n\ncolors <- c(\"#328bff\", \"#88bce4\")\n\nggplot(imdb, aes(trunc_decade, trunc_rating)) +\n  geom_count(aes(color = is_top20)) +\n  geom_hline(yintercept = 7.9) +\n  scale_x_continuous(breaks = seq(1940, 2020, 10), labels = nexo_labels) +\n  scale_y_continuous(\n    limits = c(7.9, 9.45),\n    breaks = seq(7.9, 9.3, 0.1),\n    labels = scales::label_number(decimal.mark = \",\", accuracy = 0.1),\n    expand = c(0, 0)\n  ) +\n  scale_color_manual(values = rev(colors)) +\n  scale_size_area(name = \"\", breaks = c(4, 8, 12, 16)) +\n  guides(\n    color = \"none\",\n    size = guide_legend(\n      label.position = \"bottom\",\n      override.aes = list(color = \"gray80\"))\n  ) +\n  labs(x = NULL, y = NULL, subtitle = \"\\n\\n\") +\n  theme_minimal(base_size = 14) +\n  theme(\n    panel.grid.major.y = element_line(linetype = 3, color = \"#d9d9d9\", linewidth = 0.35),\n    panel.grid.major.x = element_line(color = \"#838484\", linewidth = 0.35),\n    panel.grid.minor = element_blank(),\n    legend.position = c(0.05, 1.1),\n    legend.direction = \"horizontal\",\n    legend.text = element_text(size = 10),\n    \n    axis.title.y = element_text(color = \"#767676\"),\n    axis.ticks.x = element_line(color = \"#000000\")\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){fig-align='center' width=70%}\n:::\n:::\n\n\n## Conclusion\n\nPunchcard plots are an excellent way to visualize data distributed across two categorical dimensions, such as days of the week and hours of the day. Whether you're analyzing time-based activity patterns, attendance trends, or any other data with two categorical dimensions, punchcard plots are a powerful and visually engaging tool.\n\nNow that you’ve mastered the basics, consider applying this technique to your own datasets—whether it’s analyzing call center activity, website traffic, or any other time-based data. Experiment with colors, sizes, and annotations to make your punchcard plots even more impactful. Happy plotting!\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}