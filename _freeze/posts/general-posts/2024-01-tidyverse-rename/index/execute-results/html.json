{
  "hash": "5d2aa6337b7e1a2a232b9a94f45e8316",
  "result": {
    "markdown": "---\ntitle: \"O novo tidyverse: rename\"\ndate: \"2024-01-08\"\ncategories: ['data-science', 'tutorial-R', 'tidyverse']\ndescription: \"Neste post ensino abordagens diferentes para renomear colunas de maneira eficiente. Apresento também algumas das inovações que o pacote `dplyr` lançou nos últimos anos como as funções auxiliares `all_of` e `any_of`.\"\nimage: \"/static/images/dplyr_logo.png\" \nimage-alt: \"/static/images/dplyr_logo.png\" \n---\n\n\n\n\n# Tidyverse\n\nO tidyverse é uma coleção poderosa de pacotes, voltados para a manipulação e limpeza de dados. Num outro post, discuti alguns [aspectos gerais da filosofia](https://restateinsight.com/posts/general-posts/2023-09-tidyverse/) destes pacotes que incluem a sua consistência sintática e o uso de [pipes](https://restateinsight.com/posts/general-posts/2023-09-pipes-in-r/). O tidyverse está em constante expansão, novas funcionalidades são criadas para melhorar a performance e capabilidade de suas funções. Assim, é importante atualizar nosso conhecimento destes pacotes periodicamente. Nesta série de posts vou focar nas funções principais dos pacotes `dplyr` e `tidyr`, voltados para a limpeza de dados.\n\n# Alguns verbos\n\nEssencialmente, o `dplyr` gira em torno de quatro grandes funções: `filter`, `select`, `mutate` e `summarise`. Estas funções fazem o grosso do trabalho de limpeza de dados: filtram linhas, selecionam colunas e transformam os dados. A tabela abaixo resume as principais funções do pacote.\n\n| Nome da Função | Tradução          | O que faz                                                         |\n|---------------|---------------|-------------------------------------------|\n| `rename`       | Renomear          | Modifica o nome das colunas.                                      |\n| `select`       | Selecionar        | Seleciona as colunas.                                             |\n| `filter`       | Filtrar           | Filtra/seleciona as linhas segundo alguma condição.               |\n| `arrange`      | Arranjar/ordenar  | Ordena as linhas (crescente/decrescente) segundo alguma variável. |\n| `mutate`       | Mutar/transformar | Cria uma nova coluna a partir de outras colunas ou dados.         |\n| `summarise`    | Sumarizar/resumir | Aplica alguma função sobre as linhas. Cria uma tabela \"resumo\".   |\n| `group_by`     | Agrupar           | Agrupa as linhas segundo alguma variável.                         |\n\n# Rename\n\n## O básico\n\nOs pacotes utilizados neste tutorial são listados abaixo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(stringi)\nlibrary(janitor)\nlibrary(sidrar)\n```\n:::\n\n\nAntes de mais nada, vamos importar uma base de dados qualquer do IBGE usando o pacote `sidrar`. A base importada mostra o custo médio m² de construção no Brasil da pesquisa SINAPI.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat <- sidrar::get_sidra(2296, period = \"202201-202301\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div id=\"iozzgsaxed\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#iozzgsaxed table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#iozzgsaxed thead, #iozzgsaxed tbody, #iozzgsaxed tfoot, #iozzgsaxed tr, #iozzgsaxed td, #iozzgsaxed th {\n  border-style: none;\n}\n\n#iozzgsaxed p {\n  margin: 0;\n  padding: 0;\n}\n\n#iozzgsaxed .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#iozzgsaxed .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#iozzgsaxed .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#iozzgsaxed .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#iozzgsaxed .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#iozzgsaxed .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n}\n\n#iozzgsaxed .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#iozzgsaxed .gt_col_heading {\n  color: #FFFFFF;\n  background-color: #038901;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#iozzgsaxed .gt_column_spanner_outer {\n  color: #FFFFFF;\n  background-color: #038901;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#iozzgsaxed .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#iozzgsaxed .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#iozzgsaxed .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#iozzgsaxed .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#iozzgsaxed .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#iozzgsaxed .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  vertical-align: middle;\n}\n\n#iozzgsaxed .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#iozzgsaxed .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#iozzgsaxed .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: none;\n  border-top-width: 1px;\n  border-top-color: #D5D5D5;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D5D5D5;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D5D5D5;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#iozzgsaxed .gt_stub {\n  color: #333333;\n  background-color: #CAFFAF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D5D5D5;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#iozzgsaxed .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#iozzgsaxed .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#iozzgsaxed .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#iozzgsaxed .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#iozzgsaxed .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #5F5F5F;\n}\n\n#iozzgsaxed .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#iozzgsaxed .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n}\n\n#iozzgsaxed .gt_grand_summary_row {\n  color: #333333;\n  background-color: #D5D5D5;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#iozzgsaxed .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #5F5F5F;\n}\n\n#iozzgsaxed .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #5F5F5F;\n}\n\n#iozzgsaxed .gt_striped {\n  background-color: #EDF6E8;\n}\n\n#iozzgsaxed .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n}\n\n#iozzgsaxed .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#iozzgsaxed .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#iozzgsaxed .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#iozzgsaxed .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#iozzgsaxed .gt_left {\n  text-align: left;\n}\n\n#iozzgsaxed .gt_center {\n  text-align: center;\n}\n\n#iozzgsaxed .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#iozzgsaxed .gt_font_normal {\n  font-weight: normal;\n}\n\n#iozzgsaxed .gt_font_bold {\n  font-weight: bold;\n}\n\n#iozzgsaxed .gt_font_italic {\n  font-style: italic;\n}\n\n#iozzgsaxed .gt_super {\n  font-size: 65%;\n}\n\n#iozzgsaxed .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#iozzgsaxed .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#iozzgsaxed .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#iozzgsaxed .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#iozzgsaxed .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#iozzgsaxed .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#iozzgsaxed .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Nível Territorial (Código)\">Nível Territorial (Código)</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Nível Territorial\">Nível Territorial</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Unidade de Medida (Código)\">Unidade de Medida (Código)</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Unidade de Medida\">Unidade de Medida</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Valor\">Valor</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"Nível Territorial (Código)\" class=\"gt_row gt_right\">1</td>\n<td headers=\"Nível Territorial\" class=\"gt_row gt_left\">Brasil</td>\n<td headers=\"Unidade de Medida (Código)\" class=\"gt_row gt_right\">38</td>\n<td headers=\"Unidade de Medida\" class=\"gt_row gt_left\">Reais</td>\n<td headers=\"Valor\" class=\"gt_row gt_right\">1525.48</td></tr>\n    <tr><td headers=\"Nível Territorial (Código)\" class=\"gt_row gt_right gt_striped\">1</td>\n<td headers=\"Nível Territorial\" class=\"gt_row gt_left gt_striped\">Brasil</td>\n<td headers=\"Unidade de Medida (Código)\" class=\"gt_row gt_right gt_striped\">38</td>\n<td headers=\"Unidade de Medida\" class=\"gt_row gt_left gt_striped\">Reais</td>\n<td headers=\"Valor\" class=\"gt_row gt_right gt_striped\">915.79</td></tr>\n    <tr><td headers=\"Nível Territorial (Código)\" class=\"gt_row gt_right\">1</td>\n<td headers=\"Nível Territorial\" class=\"gt_row gt_left\">Brasil</td>\n<td headers=\"Unidade de Medida (Código)\" class=\"gt_row gt_right\">38</td>\n<td headers=\"Unidade de Medida\" class=\"gt_row gt_left\">Reais</td>\n<td headers=\"Valor\" class=\"gt_row gt_right\">609.69</td></tr>\n    <tr><td headers=\"Nível Territorial (Código)\" class=\"gt_row gt_right gt_striped\">1</td>\n<td headers=\"Nível Territorial\" class=\"gt_row gt_left gt_striped\">Brasil</td>\n<td headers=\"Unidade de Medida (Código)\" class=\"gt_row gt_right gt_striped\">30</td>\n<td headers=\"Unidade de Medida\" class=\"gt_row gt_left gt_striped\">Número-índice</td>\n<td headers=\"Valor\" class=\"gt_row gt_right gt_striped\">763.46</td></tr>\n    <tr><td headers=\"Nível Territorial (Código)\" class=\"gt_row gt_right\">1</td>\n<td headers=\"Nível Territorial\" class=\"gt_row gt_left\">Brasil</td>\n<td headers=\"Unidade de Medida (Código)\" class=\"gt_row gt_right\">30</td>\n<td headers=\"Unidade de Medida\" class=\"gt_row gt_left\">Número-índice</td>\n<td headers=\"Valor\" class=\"gt_row gt_right\">693.71</td></tr>\n    <tr><td headers=\"Nível Territorial (Código)\" class=\"gt_row gt_right gt_striped\">1</td>\n<td headers=\"Nível Territorial\" class=\"gt_row gt_left gt_striped\">Brasil</td>\n<td headers=\"Unidade de Medida (Código)\" class=\"gt_row gt_right gt_striped\">30</td>\n<td headers=\"Unidade de Medida\" class=\"gt_row gt_left gt_striped\">Número-índice</td>\n<td headers=\"Valor\" class=\"gt_row gt_right gt_striped\">962.09</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\nA função `rename` serve para trocar o nome de uma coluna seguindo a sintaxe:\n\n-   `rename(nome_novo = nome_velho)`\n\nA forma mais imediata de utilizar a função é simplesmente:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_renamed <- rename(dat, valor = Valor)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div id=\"layxvkljtw\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#layxvkljtw table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#layxvkljtw thead, #layxvkljtw tbody, #layxvkljtw tfoot, #layxvkljtw tr, #layxvkljtw td, #layxvkljtw th {\n  border-style: none;\n}\n\n#layxvkljtw p {\n  margin: 0;\n  padding: 0;\n}\n\n#layxvkljtw .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#layxvkljtw .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#layxvkljtw .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#layxvkljtw .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#layxvkljtw .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#layxvkljtw .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n}\n\n#layxvkljtw .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#layxvkljtw .gt_col_heading {\n  color: #FFFFFF;\n  background-color: #038901;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#layxvkljtw .gt_column_spanner_outer {\n  color: #FFFFFF;\n  background-color: #038901;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#layxvkljtw .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#layxvkljtw .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#layxvkljtw .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#layxvkljtw .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#layxvkljtw .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#layxvkljtw .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  vertical-align: middle;\n}\n\n#layxvkljtw .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#layxvkljtw .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#layxvkljtw .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: none;\n  border-top-width: 1px;\n  border-top-color: #D5D5D5;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D5D5D5;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D5D5D5;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#layxvkljtw .gt_stub {\n  color: #333333;\n  background-color: #CAFFAF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D5D5D5;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#layxvkljtw .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#layxvkljtw .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#layxvkljtw .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#layxvkljtw .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#layxvkljtw .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #5F5F5F;\n}\n\n#layxvkljtw .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#layxvkljtw .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n}\n\n#layxvkljtw .gt_grand_summary_row {\n  color: #333333;\n  background-color: #D5D5D5;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#layxvkljtw .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #5F5F5F;\n}\n\n#layxvkljtw .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #5F5F5F;\n}\n\n#layxvkljtw .gt_striped {\n  background-color: #EDF6E8;\n}\n\n#layxvkljtw .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n}\n\n#layxvkljtw .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#layxvkljtw .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#layxvkljtw .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#layxvkljtw .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#layxvkljtw .gt_left {\n  text-align: left;\n}\n\n#layxvkljtw .gt_center {\n  text-align: center;\n}\n\n#layxvkljtw .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#layxvkljtw .gt_font_normal {\n  font-weight: normal;\n}\n\n#layxvkljtw .gt_font_bold {\n  font-weight: bold;\n}\n\n#layxvkljtw .gt_font_italic {\n  font-style: italic;\n}\n\n#layxvkljtw .gt_super {\n  font-size: 65%;\n}\n\n#layxvkljtw .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#layxvkljtw .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#layxvkljtw .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#layxvkljtw .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#layxvkljtw .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#layxvkljtw .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#layxvkljtw .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Nível Territorial (Código)\">Nível Territorial (Código)</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Nível Territorial\">Nível Territorial</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Unidade de Medida (Código)\">Unidade de Medida (Código)</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Unidade de Medida\">Unidade de Medida</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"valor\">valor</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"Nível Territorial (Código)\" class=\"gt_row gt_right\">1</td>\n<td headers=\"Nível Territorial\" class=\"gt_row gt_left\">Brasil</td>\n<td headers=\"Unidade de Medida (Código)\" class=\"gt_row gt_right\">38</td>\n<td headers=\"Unidade de Medida\" class=\"gt_row gt_left\">Reais</td>\n<td headers=\"valor\" class=\"gt_row gt_right\">1525.48</td></tr>\n    <tr><td headers=\"Nível Territorial (Código)\" class=\"gt_row gt_right gt_striped\">1</td>\n<td headers=\"Nível Territorial\" class=\"gt_row gt_left gt_striped\">Brasil</td>\n<td headers=\"Unidade de Medida (Código)\" class=\"gt_row gt_right gt_striped\">38</td>\n<td headers=\"Unidade de Medida\" class=\"gt_row gt_left gt_striped\">Reais</td>\n<td headers=\"valor\" class=\"gt_row gt_right gt_striped\">915.79</td></tr>\n    <tr><td headers=\"Nível Territorial (Código)\" class=\"gt_row gt_right\">1</td>\n<td headers=\"Nível Territorial\" class=\"gt_row gt_left\">Brasil</td>\n<td headers=\"Unidade de Medida (Código)\" class=\"gt_row gt_right\">38</td>\n<td headers=\"Unidade de Medida\" class=\"gt_row gt_left\">Reais</td>\n<td headers=\"valor\" class=\"gt_row gt_right\">609.69</td></tr>\n    <tr><td headers=\"Nível Territorial (Código)\" class=\"gt_row gt_right gt_striped\">1</td>\n<td headers=\"Nível Territorial\" class=\"gt_row gt_left gt_striped\">Brasil</td>\n<td headers=\"Unidade de Medida (Código)\" class=\"gt_row gt_right gt_striped\">30</td>\n<td headers=\"Unidade de Medida\" class=\"gt_row gt_left gt_striped\">Número-índice</td>\n<td headers=\"valor\" class=\"gt_row gt_right gt_striped\">763.46</td></tr>\n    <tr><td headers=\"Nível Territorial (Código)\" class=\"gt_row gt_right\">1</td>\n<td headers=\"Nível Territorial\" class=\"gt_row gt_left\">Brasil</td>\n<td headers=\"Unidade de Medida (Código)\" class=\"gt_row gt_right\">30</td>\n<td headers=\"Unidade de Medida\" class=\"gt_row gt_left\">Número-índice</td>\n<td headers=\"valor\" class=\"gt_row gt_right\">693.71</td></tr>\n    <tr><td headers=\"Nível Territorial (Código)\" class=\"gt_row gt_right gt_striped\">1</td>\n<td headers=\"Nível Territorial\" class=\"gt_row gt_left gt_striped\">Brasil</td>\n<td headers=\"Unidade de Medida (Código)\" class=\"gt_row gt_right gt_striped\">30</td>\n<td headers=\"Unidade de Medida\" class=\"gt_row gt_left gt_striped\">Número-índice</td>\n<td headers=\"valor\" class=\"gt_row gt_right gt_striped\">962.09</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\nPara renomear múliplas colunas, segue-se uma lógica similar, separando os argumentos adicionais por vírgulas. Note que somos forçados a utilizar o sinal ``` `` ``` pois o nome de algumas colunas contêm acentos.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_renamed <- rename(\n  dat,\n  valor = Valor,\n  nivel_territorial = `Nível Territorial`,\n  code_unit = `Unidade de Medida (Código)`\n  )\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div id=\"kduqhthctx\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#kduqhthctx table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#kduqhthctx thead, #kduqhthctx tbody, #kduqhthctx tfoot, #kduqhthctx tr, #kduqhthctx td, #kduqhthctx th {\n  border-style: none;\n}\n\n#kduqhthctx p {\n  margin: 0;\n  padding: 0;\n}\n\n#kduqhthctx .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#kduqhthctx .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#kduqhthctx .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#kduqhthctx .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#kduqhthctx .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#kduqhthctx .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n}\n\n#kduqhthctx .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#kduqhthctx .gt_col_heading {\n  color: #FFFFFF;\n  background-color: #038901;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#kduqhthctx .gt_column_spanner_outer {\n  color: #FFFFFF;\n  background-color: #038901;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#kduqhthctx .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#kduqhthctx .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#kduqhthctx .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#kduqhthctx .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#kduqhthctx .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#kduqhthctx .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n  vertical-align: middle;\n}\n\n#kduqhthctx .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#kduqhthctx .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#kduqhthctx .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: none;\n  border-top-width: 1px;\n  border-top-color: #D5D5D5;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D5D5D5;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D5D5D5;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#kduqhthctx .gt_stub {\n  color: #333333;\n  background-color: #CAFFAF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D5D5D5;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#kduqhthctx .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#kduqhthctx .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#kduqhthctx .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#kduqhthctx .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#kduqhthctx .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #5F5F5F;\n}\n\n#kduqhthctx .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#kduqhthctx .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n}\n\n#kduqhthctx .gt_grand_summary_row {\n  color: #333333;\n  background-color: #D5D5D5;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#kduqhthctx .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #5F5F5F;\n}\n\n#kduqhthctx .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #5F5F5F;\n}\n\n#kduqhthctx .gt_striped {\n  background-color: #EDF6E8;\n}\n\n#kduqhthctx .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #5F5F5F;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #5F5F5F;\n}\n\n#kduqhthctx .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#kduqhthctx .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#kduqhthctx .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#kduqhthctx .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#kduqhthctx .gt_left {\n  text-align: left;\n}\n\n#kduqhthctx .gt_center {\n  text-align: center;\n}\n\n#kduqhthctx .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#kduqhthctx .gt_font_normal {\n  font-weight: normal;\n}\n\n#kduqhthctx .gt_font_bold {\n  font-weight: bold;\n}\n\n#kduqhthctx .gt_font_italic {\n  font-style: italic;\n}\n\n#kduqhthctx .gt_super {\n  font-size: 65%;\n}\n\n#kduqhthctx .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#kduqhthctx .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#kduqhthctx .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#kduqhthctx .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#kduqhthctx .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#kduqhthctx .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#kduqhthctx .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Nível Territorial (Código)\">Nível Territorial (Código)</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"nivel_territorial\">nivel_territorial</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"code_unit\">code_unit</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Unidade de Medida\">Unidade de Medida</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"valor\">valor</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"Nível Territorial (Código)\" class=\"gt_row gt_right\">1</td>\n<td headers=\"nivel_territorial\" class=\"gt_row gt_left\">Brasil</td>\n<td headers=\"code_unit\" class=\"gt_row gt_right\">38</td>\n<td headers=\"Unidade de Medida\" class=\"gt_row gt_left\">Reais</td>\n<td headers=\"valor\" class=\"gt_row gt_right\">1525.48</td></tr>\n    <tr><td headers=\"Nível Territorial (Código)\" class=\"gt_row gt_right gt_striped\">1</td>\n<td headers=\"nivel_territorial\" class=\"gt_row gt_left gt_striped\">Brasil</td>\n<td headers=\"code_unit\" class=\"gt_row gt_right gt_striped\">38</td>\n<td headers=\"Unidade de Medida\" class=\"gt_row gt_left gt_striped\">Reais</td>\n<td headers=\"valor\" class=\"gt_row gt_right gt_striped\">915.79</td></tr>\n    <tr><td headers=\"Nível Territorial (Código)\" class=\"gt_row gt_right\">1</td>\n<td headers=\"nivel_territorial\" class=\"gt_row gt_left\">Brasil</td>\n<td headers=\"code_unit\" class=\"gt_row gt_right\">38</td>\n<td headers=\"Unidade de Medida\" class=\"gt_row gt_left\">Reais</td>\n<td headers=\"valor\" class=\"gt_row gt_right\">609.69</td></tr>\n    <tr><td headers=\"Nível Territorial (Código)\" class=\"gt_row gt_right gt_striped\">1</td>\n<td headers=\"nivel_territorial\" class=\"gt_row gt_left gt_striped\">Brasil</td>\n<td headers=\"code_unit\" class=\"gt_row gt_right gt_striped\">30</td>\n<td headers=\"Unidade de Medida\" class=\"gt_row gt_left gt_striped\">Número-índice</td>\n<td headers=\"valor\" class=\"gt_row gt_right gt_striped\">763.46</td></tr>\n    <tr><td headers=\"Nível Territorial (Código)\" class=\"gt_row gt_right\">1</td>\n<td headers=\"nivel_territorial\" class=\"gt_row gt_left\">Brasil</td>\n<td headers=\"code_unit\" class=\"gt_row gt_right\">30</td>\n<td headers=\"Unidade de Medida\" class=\"gt_row gt_left\">Número-índice</td>\n<td headers=\"valor\" class=\"gt_row gt_right\">693.71</td></tr>\n    <tr><td headers=\"Nível Territorial (Código)\" class=\"gt_row gt_right gt_striped\">1</td>\n<td headers=\"nivel_territorial\" class=\"gt_row gt_left gt_striped\">Brasil</td>\n<td headers=\"code_unit\" class=\"gt_row gt_right gt_striped\">30</td>\n<td headers=\"Unidade de Medida\" class=\"gt_row gt_left gt_striped\">Número-índice</td>\n<td headers=\"valor\" class=\"gt_row gt_right gt_striped\">962.09</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\nAlternativamente, pode-se escrever os nomes usando aspas como no código abaixo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_renamed <- rename(\n  dat,\n  valor = \"Valor\",\n  nivel_territorial = \"Nível Territorial\",\n  code_unit = \"Unidade de Medida (Código)\"\n  )\n```\n:::\n\n\nLiteralmente reescrever o nome das colunas pode ser bastante enfadonho. Há duas maneiras mais interessantes de renomear colunas: (1) **utilizando uma função**; e (2) **utilizando um vetor de \"swap\"**. A primeira abordagem, em geral, é mais simples e pode-se aproveitar funções úteis pré-existentes para manipulação de strings como as do pacote `stringr`. A segunda abordagem exige mais esforço manual e é recomendada quando não existem regras simples para renomear as colunas.\n\n### Boas práticas\n\nOs nomes das colunas de um `data.frame` devem:\n\n1.  Ser únicos (não-duplicados) e evitar caracteres maiúsculos.\n2.  Não devem incluir caracteres especiais (e.g. !\\*&\\@%), nem começar com um número ou caractere especial. Também é recomendável evitar o uso de acentos (é, ç, à, etc.).\n3.  Evitar espaços em branco, que devem ser substituídos por `_` ou omitidos (e.g. `PIB Agro` deve ser reescrito como `pibAgro` ou `pib_agro`.\n4.  Evitar nomes \"reservados\" como `for`, `in`, `TRUE`, `if`, etc. Estas palavras tem tratamento especial dentro do R e não se deve utilizá-las como nome de coluna[^1].\n\n[^1]: Para verificar a lista completa de palavras reservadas consulte `?Reserved`. Vale notar que não se deve criar objetos com estes nomes também, i.e., não se deve fazer `TRUE <- c(1, 2, 3)`.\n\nExiste uma lógica bastante simples para seguir estas convenções: nomes sintaticamente válidos facilitam (e, em alguns casos, possibilitam) a seleção de colunas. É muito mais simples escrever `dat$pib_agro` do que `` dat$`PIB Agrícola (R$)` ``. Abaixo listo alguns exemplos de nomes e sugestões de como melhorá-los.\n\n``` r\n# Ruim\nnomes <- c(\"PIB Agrícola\", \"INFLAÇÃO %\", \"Dia do mês\", \"!Nome D@ Coluna#\", \"If Buyer\")\n\n# Correto\nn1 <- c(\"pib_agricola\", \"pib_agro\")\nn2 <- c(\"inflacao_percent\", \"inflacao_pct\", \"inflacaoPct\")\nn3 <- c(\"dia_do_mes\", \"DiaDoMes\")\nn4 <- c(\"nome_da_coluna\", \"NomeDaColuna\")\nn5 <- c(\"is_buyer\", \"IsBuyer\")\n```\n\n## Usando funções\n\nA maneira mais simples de entender o uso de funções para renomear colunas é através de exemplos. Para tornar os exemplos mais sucintos vamos focar apenas no nome das colunas através da função `names`. Esta abordagem torna mais claro o fato de que os nomes das colunas de um `data.frame` são, essencialmente, um vetor de texto.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(dat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Nível Territorial (Código)\" \"Nível Territorial\"         \n [3] \"Unidade de Medida (Código)\" \"Unidade de Medida\"         \n [5] \"Valor\"                      \"Brasil (Código)\"           \n [7] \"Brasil\"                     \"Mês (Código)\"              \n [9] \"Mês\"                        \"Variável (Código)\"         \n[11] \"Variável\"                  \n```\n:::\n:::\n\n\nPara aplicar uma função sobre o nome de todas as colunas da base de dados `dat` usa-se `rename_with`, uma variação da função `rename`. A sintaxe da função é simples: `rename_with(dados, fn)`. No caso abaixo converte-se o nome de todas as colunas para maiúculo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_renamed <- rename_with(dat, toupper)\nnames(dat_renamed)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"NÍVEL TERRITORIAL (CÓDIGO)\" \"NÍVEL TERRITORIAL\"         \n [3] \"UNIDADE DE MEDIDA (CÓDIGO)\" \"UNIDADE DE MEDIDA\"         \n [5] \"VALOR\"                      \"BRASIL (CÓDIGO)\"           \n [7] \"BRASIL\"                     \"MÊS (CÓDIGO)\"              \n [9] \"MÊS\"                        \"VARIÁVEL (CÓDIGO)\"         \n[11] \"VARIÁVEL\"                  \n```\n:::\n:::\n\n\nAbaixo mostro algumas funções úteis para renomear colunas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#> Converte para minúsculo\nrename_with(dat, tolower) |> names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"nível territorial (código)\" \"nível territorial\"         \n [3] \"unidade de medida (código)\" \"unidade de medida\"         \n [5] \"valor\"                      \"brasil (código)\"           \n [7] \"brasil\"                     \"mês (código)\"              \n [9] \"mês\"                        \"variável (código)\"         \n[11] \"variável\"                  \n```\n:::\n\n```{.r .cell-code}\n#> Converte texto para um formato de 'título'\nrename_with(dat, stringr::str_to_title) |> names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Nível Territorial (Código)\" \"Nível Territorial\"         \n [3] \"Unidade De Medida (Código)\" \"Unidade De Medida\"         \n [5] \"Valor\"                      \"Brasil (Código)\"           \n [7] \"Brasil\"                     \"Mês (Código)\"              \n [9] \"Mês\"                        \"Variável (Código)\"         \n[11] \"Variável\"                  \n```\n:::\n\n```{.r .cell-code}\n#> Remove acentos\nrename_with(dat, ~stringi::stri_trans_general(.x, id =\"latin-ascii\")) |> names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Nivel Territorial (Codigo)\" \"Nivel Territorial\"         \n [3] \"Unidade de Medida (Codigo)\" \"Unidade de Medida\"         \n [5] \"Valor\"                      \"Brasil (Codigo)\"           \n [7] \"Brasil\"                     \"Mes (Codigo)\"              \n [9] \"Mes\"                        \"Variavel (Codigo)\"         \n[11] \"Variavel\"                  \n```\n:::\n:::\n\n\nPode-se criar uma função customizada mais completa para renomear colunas. A função abaixo costuma funcionar bem para colunas problemáticas escritas em português.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnice_col_names <- function(x) {\n  \n  #> Remove acentos em geral\n  x <- stringi::stri_trans_general(x, id = \"latin-ascii\")\n  #> Remove pontuação e caracteres especiais (%$#& etc.)\n  x <- stringr::str_replace_all(x, \"[[:punct:]]\", \"\")\n  #> Remove espaços em branco antes e/ou depois do texto\n  x <- stringr::str_trim(x, side = \"both\")\n  #> Substitui espaços em branco por _\n  x <- stringr::str_replace_all(x, \" \", \"_\")\n  #> Converte tudo para minúsculo\n  x <- stringr::str_to_lower(x)\n  \n  #> Avisa se houver nomes duplicados\n  check_dups <- x[duplicated(x)]\n  \n  if (length(check_dups) > 0) {\n    warning(\"Duplicated names!\")\n  }\n  \n  return(x)\n  \n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndat |> \n  rename_with(nice_col_names) |> \n  names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"nivel_territorial_codigo\" \"nivel_territorial\"       \n [3] \"unidade_de_medida_codigo\" \"unidade_de_medida\"       \n [5] \"valor\"                    \"brasil_codigo\"           \n [7] \"brasil\"                   \"mes_codigo\"              \n [9] \"mes\"                      \"variavel_codigo\"         \n[11] \"variavel\"                \n```\n:::\n:::\n\n\nAs funções base `make.names` e `make.unique` também podem ser úteis para ajudar a criar nomes de colunas válidos sem causar grandes alterações.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat |> \n  rename_with(make.names) |> \n  names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Nível.Territorial..Código.\" \"Nível.Territorial\"         \n [3] \"Unidade.de.Medida..Código.\" \"Unidade.de.Medida\"         \n [5] \"Valor\"                      \"Brasil..Código.\"           \n [7] \"Brasil\"                     \"Mês..Código.\"              \n [9] \"Mês\"                        \"Variável..Código.\"         \n[11] \"Variável\"                  \n```\n:::\n:::\n\n\nPor fim, vale notar que a função `jantior::make_clean_names()` é bastante eficiente em \"limpar\" o nome de colunas\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat |> \n  rename_with(janitor::make_clean_names) |> \n  names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"nivel_territorial_codigo\" \"nivel_territorial\"       \n [3] \"unidade_de_medida_codigo\" \"unidade_de_medida\"       \n [5] \"valor\"                    \"brasil_codigo\"           \n [7] \"brasil\"                   \"mes_codigo\"              \n [9] \"mes\"                      \"variavel_codigo\"         \n[11] \"variavel\"                \n```\n:::\n:::\n\n\n### Renomeando apenas algumas colunas\n\nEventualmente, pode ser interessante renomear apenas algumas colunas. A função rename_with tem um terceiro argumento opcional que perimite selecionar um subconjunto de colunas que deve ser renomeada utilizando a função definida. A maneira mais simples de selecionar estas colunas é pela sua posição.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat_renamed <- rename_with(dat, janitor::make_clean_names)\n\ndat_prefix <- rename_with(\n  dat_renamed,\n  ~paste0(\"abs_\", .x),\n  c(1, 2, 3)\n)\n\nnames(dat_prefix)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"abs_nivel_territorial_codigo\" \"abs_nivel_territorial\"       \n [3] \"abs_unidade_de_medida_codigo\" \"unidade_de_medida\"           \n [5] \"valor\"                        \"brasil_codigo\"               \n [7] \"brasil\"                       \"mes_codigo\"                  \n [9] \"mes\"                          \"variavel_codigo\"             \n[11] \"variavel\"                    \n```\n:::\n:::\n\n\nComo de praxe, pode-se usar as funções `tidyselect` para facilitar a vida:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#> Adiciona um prefixo nas colunas numéricas\nrename_with(\n  dat_renamed,\n  ~paste0(\"num_\", .x),\n  where(is.numeric)\n)\n\n#> Adiciona um sufixo nas colunas numéricas\nrename_with(\n  dat_renamed,\n  ~paste0(.x, \"_num\"),\n  where(is.numeric)\n)\n\n#> Converte para maiúsculo as colunas que contem 'codigo' no nome\nrename_with(\n  dat_renamed,\n  stringr::str_to_upper,\n  contains(\"codigo\")\n)\n```\n:::\n\n\n## Usando vetores\n\nUm dos elementos básicos do `R` são os vetores. Um vetor, em linhas gerais, é uma coleção de elementos básicos do mesmo tipo. Uma sequência de números é um exemplo de vetor numérico, como `c(2, 4, 6, 8)`. Um vetor de texto, similarmente, tem a forma `c(\"abacaxi\", \"abacate\", \"tomate\")`.\n\nUm tipo especial de vetor é um named vector, um vetor com nomes. Um named vector é um vetor onde cada elemento tem um nome, como `c(\"a\" = 2, \"b\" = 4, \"c\" = 6, \"d\" = 8)`. Tipicamente, seleciona-se um elemento específico de um vetor através da sua posição, como em `x[2]` ou `y[5:10]`. No caso de um named vector, é possível especificar um elemento através do seu nome.\n\nNote que a sintaxe `c(\"A\" = \"abacaxi\", \"B = \"banana\")` é muito similar à sintaxe da função `rename`. De fato, pode-se usar um vetor deste tipo para renomear as colunas usando um \"swap\" vector. Este tipo de vetor funciona como `c(\"nome_novo\" = \"Nome Velho\")`. Antigamente, podia-se simplesmente inserir o vetor dentro da função rename.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nswap <- c(\"valor\" = \"Valor\", \"geo_level\" = \"Nível Territorial\")\ndat_renamed <- rename(dat, swap)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %>% select(swap)\n\n  # Now:\n  data %>% select(all_of(swap))\n\nSee <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.\n```\n:::\n:::\n\n\nComo deixa claro o aviso, desde a versão `1.1.0` do `tidyselect` este tipo de sintaxe foi descontinuada e agora é preciso usar mais uma função.\n\n### `all_of` e `any_of`\n\nAtualmente, é preciso colocar o vetor `swap` em uma de duas funções auxiliares: `any_of` e `all_of`. A primeira função é a mais branda e substitui o nome de todas as colunas que for possível. A segunda função é mais exigente: se qualquer umas das variáveis estiver ausente retorna-se um erro.\n\nPara tornar a distinção mais clara, vale criar um novo vetor com o nome de coluna que não consta na nossa base. Note como a função `any_of` retorna o mesmo output, ignorando a coluna inexistente `Ano`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nswap <- c(\"valor\" = \"Valor\", \"geo_level\" = \"Nível Territorial\", \"ano\" = \"Ano\")\n\ndat |> \n  rename(any_of(swap)) |> \n  names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Nível Territorial (Código)\" \"geo_level\"                 \n [3] \"Unidade de Medida (Código)\" \"Unidade de Medida\"         \n [5] \"valor\"                      \"Brasil (Código)\"           \n [7] \"Brasil\"                     \"Mês (Código)\"              \n [9] \"Mês\"                        \"Variável (Código)\"         \n[11] \"Variável\"                  \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndat |> \n  rename(all_of(swap)) |> \n  names()\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `all_of()`:\n! Can't rename columns that don't exist.\n✖ Column `Ano` doesn't exist.\n```\n:::\n:::\n\n\nNo caso em que se quer renomear *exatamente* todas as colunas, usa-se a função auxiliar `all_of` da seguinte maneira.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_names <- c(\n  \"geo_code\" = \"Nível Territorial (Código)\",\n  \"geo_level\" = \"Nível Territorial\",\n  \"unit_code\" = \"Unidade de Medida (Código)\",\n  \"unit\" = \"Unidade de Medida\",\n  \"value\" = \"Valor\",\n  \"geo_name_code\" = \"Brasil (Código)\",\n  \"geo_name\" = \"Brasil\",\n  \"month_code\" = \"Mês (Código)\",\n  \"month\" = \"Mês\",\n  \"variable_code\" = \"Variável (Código)\",\n  \"variable\" = \"Variável\"\n)\n\ndat |> \n  rename(all_of(new_names)) |> \n  names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"geo_code\"      \"geo_level\"     \"unit_code\"     \"unit\"         \n [5] \"value\"         \"geo_name_code\" \"geo_name\"      \"month_code\"   \n [9] \"month\"         \"variable_code\" \"variable\"     \n```\n:::\n:::\n\n\nUma maneira mais sucinta de escrever o código acima é aproveitar os nomes pré-existentes da base.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_names <- c(\n  \"geo_code\", \"geo_level\", \"unit_code\", \"unit\", \"value\", \"geo_name_code\", \n  \"geo_name\", \"month_code\", \"month\", \"variable_code\", \"variable\"\n)\n\nswap_names <- names(dat)\nnames(swap_names) <- new_names\n\ndat |> \n  rename(all_of(swap_names)) |> \n  names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"geo_code\"      \"geo_level\"     \"unit_code\"     \"unit\"         \n [5] \"value\"         \"geo_name_code\" \"geo_name\"      \"month_code\"   \n [9] \"month\"         \"variable_code\" \"variable\"     \n```\n:::\n:::\n\n\nNa maior parte das aplicações, pode-se usar a função `any_of` sem grandes preocupações. Apenas em casos quando maior controle sobre o output for necessário deve-se considerar usar a função `all_of`.\n\nPor fim, vale notar que um swap vector pode ter algumas \"redundâncias\". Imagine, por exemplo, que temos várias bases de dados com pequenas inconsistências de ortografia. Em alguns casos temos \"Nível Territorial (Código)\", mas em outras temos \"nível territorial (Código)\" e em outras \"Nível Territorial (código)\", etc. etc. Pode-se construir um vetor que corrige isto sem grandes dificuldades, pois o nome do named vector não precisa ser único. Isto é muito conveniente quando se cria uma função genérica que limpa uma base de dados.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_names <- c(\n  \"geo_code\" = \"Nível Territorial (Código)\",\n  \"geo_code\" = \"Nível Territorial (código)\",\n  \"geo_code\" = \"nível territorial (Código)\"\n)\n\ndat |> \n  rename(any_of(new_names)) |> \n  names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"geo_code\"                   \"Nível Territorial\"         \n [3] \"Unidade de Medida (Código)\" \"Unidade de Medida\"         \n [5] \"Valor\"                      \"Brasil (Código)\"           \n [7] \"Brasil\"                     \"Mês (Código)\"              \n [9] \"Mês\"                        \"Variável (Código)\"         \n[11] \"Variável\"                  \n```\n:::\n:::\n\n\n## Usando funções e vetores\n\nTambém é possível fazer um mix de vetores e funções. Aqui, infelizmente, a lógica da ordem do vetor se inverte, o que pode causar grande confusão. No exemplo abaixo, monto uma função que \"traduz\" alguns termos do português para o inglês. A mágica é feita usando a função `stringr::str_replace_all` que troca um termo por outro seguindo a ordem `nome_velho = nome_novo`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntranslate_pt <- function(x) {\n  \n  trans <- c(\n    \"Código\" = \"code\",\n    \"Valor\" = \"value\",\n    \"Nível\" = \"level\",\n    \"Mês\" = \"month\"\n  )\n  \n  stringr::str_replace_all(x, trans)\n  \n}\n\ndat |> \n  rename_with(translate_pt) |> \n  names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"level Territorial (code)\" \"level Territorial\"       \n [3] \"Unidade de Medida (code)\" \"Unidade de Medida\"       \n [5] \"value\"                    \"Brasil (code)\"           \n [7] \"Brasil\"                   \"month (code)\"            \n [9] \"month\"                    \"Variável (code)\"         \n[11] \"Variável\"                \n```\n:::\n:::\n\n\n# Outros posts da série\n\n-   [select](https://restateinsight.com/posts/general-posts/2024-01-tidyverse-select/)\n-   [mutate](https://restateinsight.com/posts/general-posts/2024-01-tidyverse-mutate/)\n-   [rename](https://restateinsight.com/posts/general-posts/2024-01-tidyverse-rename/)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}