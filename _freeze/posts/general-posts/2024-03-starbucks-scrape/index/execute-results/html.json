{
  "hash": "f3ddd33d39832246b3ad0db380bf410c",
  "result": {
    "markdown": "---\ntitle: \"Encontrando todos os Starbucks do Brasil\"\ndate: \"2024-03-23\"\ncategories: ['starbucks', 'web-scrapping', 'data-science', 'brasil', 'tutorial-R']\ndescription: \"Neste post mostro como encontrar todos os Starbucks do Brasil usando webscrapping dentro do R\"\nexecute: \n  message: false\n  warning: false\n---\n\n\n# Starbucks\n\n## Web scraping\n\nO processo de web scraping consiste em extrair informação de uma página na internet. A dificuldade ou facilidade em extrair esta informação depende da qualidade de construção da página. Em alguns casos mais complexos, a informação pode estar atrás de um captcha ou num painel interativo que depende de outros comandos do usuário.\n\nNeste exemplo simples vou mostrar como conseguir encontrar a localização de todas as unidades da Starbucks no Brasil. A lista completa das lojas em atividade da Starbucks pode ser encontrada no site do [Starbucks Brasil](https://starbucks.com.br/lojas). Como de praxe, vamos utilizar o `tidyverse` em conjunto com os pacotes `rvest` e `xml2`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rvest)\nlibrary(xml2)\nlibrary(tidyverse)\n```\n:::\n\n\n### O site\n\nA lista completa das lojas em atividade da Starbucks pode ser encontrada no site do [Starbucks Brasil](https://starbucks.com.br/lojas). Para ler a página usa-se `read_html`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl = \"https://starbucks.com.br/lojas\"\n\npage = xml2::read_html(url)\n```\n:::\n\n\nO \"xpath\" mostra o caminho até um determinado elemento na página. Para encontrar o logo do Starbucks, no canto superior-esquerdo da página, por exemplo podemos usar o código abaixo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npage %>%\n  html_element(xpath = \"/html/body/div[1]/div[1]/header/nav/div/div[1]/a/img\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{html_node}\n<img alt=\"Starbucks Logo\" src=\"/public/img/icons/starbucks-nav-logo.svg\">\n```\n:::\n:::\n\n\nPara ver mais sobre xpaths consulte [este cheatsheet](https://devhints.io/xpath).\n\nEm geral, em páginas bem construídas, o nome dos elementos será bastante auto-explicativo. No caso acima, o atributo \"alt\" já indica que é objeto é o logo da starbucks e o \"src\" direciona para um arquivo em formato `svg` (imagem) chamado `starbucks-nav-logo`. Infelizmente, isto nem sempre será o caso. Em algumas páginas os elementos podem ser bastante confusos.\n\nPara puxar um atributo específico usamos a função `html_attr`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npage %>%\n  html_element(\n    xpath = \"/html/body/div[1]/div[1]/header/nav/div/div[1]/a/img\"\n    ) %>%\n  html_attr(\"src\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"/public/img/icons/starbucks-nav-logo.svg\"\n```\n:::\n:::\n\n\nSe você combinar este último link a \"www.starbucks.com.br\" você deve chegar numa imagem com o logo da empresa[^1].\n\n[^1]: <https://starbucks.com.br/public/img/icons/starbucks-nav-logo.svg>\n\n![](https://starbucks.com.br/public/img/icons/starbucks-nav-logo.svg){width=\"30%\" fig-align=\"center\"}\n\nPara encontrar a grande lista de lojas no painel da esquerda vamos aproveitar o fato de que o `div` que guarda esta lista tem uma classe única chamada \"place-list\". É fácil verificar isto no próprio navegador. Se você usar o Chrome, por exemplo, basta clicar com o botão direito sobre o painel e clicar em Inspect.\n\n![](images/Screenshot%202024-03-23%20at%2015.20.37.png){fig-align=\"center\"}\n\n![](images/Screenshot%202024-03-23%20at%2015.20.47.png){fig-align=\"center\"}\n\nComo comentei acima, nem sempre as coisas estarão bem organizadas. Note que como queremos puxar múltiplos elementos e múltiplos (todos) os atributos usamamos as variantes: `html_elements` e `html_attrs`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_attr <- page %>%\n  html_elements(xpath = '//div[@class=\"place-list\"]/div') %>%\n  html_attrs()\n```\n:::\n\n\nO objeto extraído é uma lista onde cada elemento é um vetor de texto que contém as seguintes informações. Temos o nome da loja, a latitude/longitude, e o endereço.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npluck(list_attr, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                  class           data-latitude          data-longitude \n\"place-item r-place-15\"           \"-23.5658059\"           \"-46.6508012\" \n              data-name             data-street              data-index \n  \"Shopping Top Center\" \"Avenida Paulista, 854\"                     \"0\" \n```\n:::\n:::\n\n\nA esta altura, o processo de webscrapping já terminou. Novamente, o processo foi fácil, pois os dados estão muito bem estruturados na página da Starbucks. Agora, precisamos apenas limpar os dados.\n\n## Limpeza de dados\n\nNão vou me alongar muito nos detalhes. Basicamente precisamos converter cada elemento da lista em um `data.frame`, empilhar os resultados e aí converter os tipos de cada coluna.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert os elementos em data.frame\ndat <- map(list_attr, \\(x) as.data.frame(t(x)))\n# Empilha os resultados\ndat <- bind_rows(dat)\n\nclean_dat <- dat %>%\n  as_tibble() %>%\n  # Renomeia as colunas\n  rename_with(~str_remove(.x, \"data-\")) %>%\n  rename(lat = latitude, lng = longitude) %>%\n  # Seleciona as colunas de interesse\n  select(index, name, street, lat, lng) %>%\n  # Convert lat/lng para numérico\n  mutate(\n    lat = as.numeric(lat),\n    lng = as.numeric(lng),\n    index = as.numeric(index),\n    name = str_trim(name)\n    )\n\nclean_dat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 142 × 5\n   index name                            \n   <dbl> <chr>                           \n 1     0 Shopping Top Center             \n 2     1 Shopping Cidade São Paulo       \n 3     2 Paulista Trianon                \n 4     3 Paulista 500                    \n 5     4 Jardim Pamplona Shopping        \n 6     5 Shopping Patio Paulista         \n 7     6 Shopping Center 3               \n 8     7 Hospital Beneficência Portuguesa\n 9     8 Eliseu Guilherme                \n10     9 Haddock Lobo                    \n   street                                    lat   lng\n   <chr>                                   <dbl> <dbl>\n 1 Avenida Paulista, 854                   -23.6 -46.7\n 2 Avenida Paulista, 1154                  -23.6 -46.7\n 3 Avenida Paulista, 1499                  -23.6 -46.7\n 4 Avenida Paulista, 500                   -23.6 -46.6\n 5 Rua Pamplona, 1704                      -23.6 -46.7\n 6 Rua Treze de Maio, 1933                 -23.6 -46.6\n 7 Avenida Paulista, 2064                  -23.6 -46.7\n 8 Rua Maestro Cardim, 769                 -23.6 -46.6\n 9 Rua Desembargador Eliseu Guilherme, 200 -23.6 -46.6\n10 Rua Haddock Lobo, 608                   -23.6 -46.7\n# ℹ 132 more rows\n```\n:::\n:::\n\n\n## Mapa\n\nA tabela acima já está em um formato bastante satisfatório. Podemos verificar os dados construindo um mapa simples.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(leaflet)\n\nstarbucks <- st_as_sf(clean_dat, coords = c(\"lng\", \"lat\"), crs = 4326, remove = FALSE)\n\nleaflet(starbucks) %>%\n  addTiles() %>%\n  addMarkers(label = ~name) %>%\n  addProviderTiles(\"CartoDB\") %>%\n  setView(lng = -46.65590, lat = -23.561197, zoom = 12)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"leaflet html-widget html-fill-item\" id=\"htmlwidget-f8825291f2bfc5dd5938\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-f8825291f2bfc5dd5938\">{\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org/copyright/\\\">OpenStreetMap<\\/a>,  <a href=\\\"https://opendatacommons.org/licenses/odbl/\\\">ODbL<\\/a>\"}]},{\"method\":\"addMarkers\",\"args\":[[-23.5658059,-23.5631043,-23.5622624,-23.5678355,-23.5703948,-23.5704519,-23.5578455,-23.5669863,-23.5735072,-23.5578647,-23.554083,-23.557714,-23.5462691,-23.5422471,-23.5990249,-23.6025808,-23.5725778,-23.5916617,-23.590703,-23.5949773,-23.5264048,-23.6037897,-23.6012749,-23.5797475,-23.6085754,-23.5075493,-23.6198179,-23.5155249,-23.6291469,-23.5509289,-23.6000175,-23.6000175,-23.5943227,-23.6210905,-23.6232391,-23.622013,-23.5417077,-23.5065898,-23.5614014,-23.6259357,-23.6318236,-23.6764565,-23.5357892,-23.6785695,-23.4881295,-23.5656417,-23.5656417,-23.648587,-23.6677966,-23.5043417,-23.5380357,-23.7232218,-23.5045434,-23.4397236,-23.4397236,-23.4397236,-23.4397236,-23.4397236,-23.4397236,-23.4397236,-23.4397236,-23.1996761,-23.516497,-23.1692949,-23.1893053,-23.9968234,-23.1506704,-23.9765819,-23.029075,-23.0935538,-23.1085718,-23.008205,-23.008205,-23.5419932,-22.8925231,-22.8985604,-23.2166646,-23.200734,-22.8481958,-22.8481958,-22.5709662,-22.7039888,-22.9086762,-22.333694,-21.2256572,-21.2119833,-21.2119833,-22.9274502,-25.429149,-25.42339,-25.536314,-25.4381052,-25.4348889,-25.4409909,-22.761785,-25.4430439,-25.4351398,-25.477753,-22.9976583,-22.9976583,-22.9990216,-22.8778049,-22.814578,-22.814578,-22.9572295,-22.9115509,-22.9044152,-22.9108627,-22.8963793,-26.2544231,-26.3034935,-20.8664455,-26.8636948,-26.9208063,-27.2005951,-19.9625902,-27.5897538,-19.954683,-27.5848478,-27.6151933,-27.6633178,-27.6633178,-27.6633178,-19.8907155,-19.9206819,-19.632283,-19.632283,-18.9100794,-29.9151684,-29.9911,-29.9900775,-16.1183523,-30.0297716,-30.0846697,-15.8697369,-15.8697369,-15.8697369,-15.8414099,-15.7961869,-15.791281,-13.0073567,-12.9817061],[-46.6508012,-46.6543825,-46.6558034,-46.6480931,-46.6611742,-46.6436174,-46.6589521,-46.6421106,-46.6438625,-46.6619304,-46.6526427,-46.6367091,-46.6511418,-46.6576357,-46.6371985,-46.6646968,-46.6956962,-46.6879693,-46.690087,-46.6891929,-46.6807842,-46.6918693,-46.6980412,-46.5943652,-46.6945653,-46.6485458,-46.6268084,-46.6183765,-46.6664283,-46.7219327,-46.71519,-46.71519,-46.7211188,-46.6992423,-46.6987281,-46.7011737,-46.5766182,-46.71854,-46.560424,-46.5795569,-46.7368627,-46.6765647,-46.7711861,-46.6985962,-46.5491937,-46.5049037,-46.5049037,-46.531976,-46.5335636,-46.834366,-46.4563422,-46.543195,-46.8484465,-46.4943769,-46.4943769,-46.4943769,-46.4943769,-46.4943769,-46.4943769,-46.4943769,-46.4943769,-46.889651,-46.179363,-46.8917403,-46.9305805,-46.4090328,-46.9609439,-46.3101659,-46.748908,-46.9713498,-47.0084435,-47.1375685,-47.1375685,-47.4665576,-47.0274271,-47.0528094,-45.8920388,-45.8807905,-47.0631872,-47.0631872,-47.4084298,-47.6498665,-45.3164313,-49.056318,-47.8350124,-47.815878,-47.815878,-43.5748104,-49.2142792,-49.270162,-49.173249,-49.2665602,-49.2818261,-49.2774894,-43.46548,-49.2908478,-49.3167883,-49.2909558,-43.3581268,-43.3581268,-43.3511517,-43.2714867,-43.2435286,-43.2435286,-43.1766264,-43.1758324,-43.1755798,-43.1682727,-43.1212427,-48.8520551,-48.8488585,-49.4144148,-49.0926064,-49.0703179,-48.6149523,-44.1598636,-48.5152812,-44.017025,-48.5451431,-48.6450436,-48.5347161,-48.5347161,-48.5347161,-43.9678135,-43.9201173,-43.961765,-43.961765,-48.2607052,-51.1647481,-51.174939,-51.1770782,-48.3991489,-51.2272536,-51.2458384,-47.9172348,-47.9172348,-47.9172348,-48.0439961,-47.891071,-47.883178,-38.5247216,-38.4646255],null,null,null,{\"interactive\":true,\"draggable\":false,\"keyboard\":true,\"title\":\"\",\"alt\":\"\",\"zIndexOffset\":0,\"opacity\":1,\"riseOnHover\":false,\"riseOffset\":250},null,null,null,null,[\"Shopping Top Center\",\"Shopping Cidade São Paulo\",\"Paulista Trianon\",\"Paulista 500\",\"Jardim Pamplona Shopping\",\"Shopping Patio Paulista\",\"Shopping Center 3\",\"Hospital Beneficência Portuguesa\",\"Eliseu Guilherme\",\"Haddock Lobo\",\"Shopping Frei Caneca\",\"Santander Liberdade\",\"Mackenzie\",\"Shopping Higienopolis\",\"Shopping Metrô Santa Cruz\",\"Lavandisca\",\"Shopping Eldorado\",\"SP Corporate Towers\",\"Shopping JK\",\"Gomes de Carvalho\",\"Bourbon Shopping\",\"Berrini\",\"Cidade Jardim Corporate\",\"Shopping Mooca\",\"Vivo Eco Berrini\",\"Bráz Leme\",\"Shopping Plaza Sul\",\"Shopping Center Norte - Portaria\",\"Aeroporto de Congonhas\",\"Shopping Villa Lobos\",\"Hospital Einstein - Consultórios\",\"Hospital Einstein - Maternidade\",\"João Saad\",\"Shopping Market Place\",\"Shopping Morumbi Térreo\",\"Rochaverá Corporate Towers\",\"Shopping Metrô Tatuapé\",\"Tiete Plaza Shopping\",\"Shopping Anália Franco\",\"Shopping São Caetano\",\"Shopping Morumbi Town\",\"Shopping Interlagos\",\"Super Shopping Osasco\",\"Shopping SP Market\",\"Shopping Internacional de Guarulhos\",\"Shopping Aricanduva\",\"Shopping Aricanduva Quiosque\",\"Grand Plaza Shopping\",\"Shopping ABC\",\"Shopping Tamboré\",\"Shopping Metro Itaquera\",\"Shopping São Bernardo Plaza\",\"Iguatemi Alphaville\",\"Aeroporto GRU -   Terminal 3 Internacional Área Restrita - Portão 306\",\"Aeroporto GRU - Terminal 2 Internacional Embarque Área Restrita - Portão 268\",\"Aeroporto GRU - Terminal 2 Nacional – Praça de Alimentação / Área Pública - ASA E\",\"Aeroporto GRU - Terminal 2 Nacional Oeste / Área Restrita  - Portão 220\",\"Aeroporto GRU - Terminal 3 Internacional  - Área Pública  Check-In H\",\"Aeroporto GRU - Terminal  2 Nacional Leste / Área Restrita  - Portão 258\",\"Aeroporto GRU - Terminal 2 Nacional Oeste / Área Pública  - ASA B\",\"Aeroporto GRU - Terminal 3 Internacional Desembarque - Área Pública\",\"Jundiaí Shopping\",\"Mogi Shopping\",\"Maxi Shopping Jundiaí\",\"Lago Azul km 58 (Sentido Interior)\",\"Litoral Plaza Shopping\",\"Lago Azul km 64\",\"Praia Mar Shopping\",\"Morro Azul\",\"Lago Azul Km 72 (Rodovia Anhanguera)\",\"Outlet Premium Itupeva\",\"Aeroporto Viracopos - Embarque\",\"Aeroporto Viracopos - Desembarque\",\"Iguatemi Esplanada Sorocaba\",\"Iguatemi Campinas\",\"Cambuí\",\"Shopping Vale Sul\",\"Center Vale Shopping\",\"Dom Pedro Flores\",\"Dom Pedro Shopping Livraria\",\"Pátio Limeira\",\"Shopping Piracicaba\",\"Roseira Posto Arco-Íris\",\"Bauru Shopping\",\"Iguatemi Ribeirão\",\"Ribeirão Shopping - Loja\",\"Ribeirão Shopping - Quiosque\",\"ParkShopping Campo Grande\",\"Shopping Jockey Plaza\",\"Shopping Mueller - Curitiba\",\"Aeroporto de Curitiba – Airside\",\"Estação Curitiba\",\"Spot Compact Mall Batel\",\"Shopping Curitiba\",\"Shopping Nova Iguaçu\",\"Pátio Batel\",\"Park Shopping Barigui\",\"Shopping Palladium\",\"Barra Shopping Quiosque\",\"Barra Shopping\",\"Shopping Village Mall\",\"Shopping Nova América\",\"Aeroporto Galeão - T2 Doméstico Embarque Restrito Portão 34\",\"Aeroporto Galeão - Mezanino Área Pública 1° Piso - Terminal 2\",\"Shopping Rio Sul\",\"Cinelândia\",\"Assembleia do Carmo\",\"Aeroporto Santos Dumont\",\"Shopping Plaza Níterói - Térreo\",\"Garten Shopping\",\"Shopping Mueller Joinville\",\"Shopping Iguatemi São José do Rio Preto\",\"Norte Shopping Blumenau\",\"Neumarkt Shopping\",\"Porto Belo Outlet\",\"Partage Betim Shopping\",\"Villa Romana Shopping\",\"Itaú Power\",\"Beiramar Shopping\",\"Continente Shopping\",\"Aeroporto de Florianópolis - Embarque Portão 8\",\"Aeroporto de Florianópolis -  Boulevard\",\"Aeroporto de Florianópolis - Check-In\",\"Del Rey\",\"Boulevard Shopping BH\",\"Piso 1, Check in - BH Aeroporto\",\"Área restrita, sala de embarque - BH Aeroporto\",\"Center Shopping Uberlândia\",\"ParkShopping Canoas\",\"POA Airport Desembarque- área externa 1° piso\",\"POA Airport Embarque Restrito - próximo ao Portão 115\",\"Outlet Premium Brasilia\",\"Galeria Chaves\",\"Barra Shopping Sul\",\"Aeroporto Brasília  - Embarque 1° piso\",\"Aeroporto de Brasília - Portão 10 (Pier Norte)\",\"Aeroporto Brasília  -  Desembarque Térreo\",\"Taguatinga Shopping\",\"Shopping Venâncio\",\"Conjunto Nacional\",\"Shopping Barra\",\"Shopping da Bahia\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addProviderTiles\",\"args\":[\"CartoDB\",null,null,{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false}]}],\"limits\":{\"lat\":[-30.0846697,-12.9817061],\"lng\":[-51.2458384,-38.4646255]},\"setView\":[[-23.561197,-46.6559],12,[]]},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nVale notar que dados extraídos a partir de webscraping quase sempre apresentam algum ruído. Neste caso, os dados parecem relativamente limpos após um pouco de limpeza. Os endereços nem sempre são muito instrutivos, como no caso \"Rodovia Hélio Smidt, S/N\", mas isto acontece porque muitas unidades estão dentro de hospitais, shoppings ou aeroportos.\n\nCom estes dados já podemos fazer análises interessantes. Podemos descobrir, por exemplo, que há 5 unidades da Starbucks apenas na Avenida Paulista.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarbucks %>%\n  filter(str_detect(street, \"Avenida Paulista\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 5 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -46.65895 ymin: -23.56784 xmax: -46.64809 ymax: -23.55785\nGeodetic CRS:  WGS 84\n# A tibble: 5 × 6\n  index name                      street                   lat   lng\n* <dbl> <chr>                     <chr>                  <dbl> <dbl>\n1     0 Shopping Top Center       Avenida Paulista, 854  -23.6 -46.7\n2     1 Shopping Cidade São Paulo Avenida Paulista, 1154 -23.6 -46.7\n3     2 Paulista Trianon          Avenida Paulista, 1499 -23.6 -46.7\n4     3 Paulista 500              Avenida Paulista, 500  -23.6 -46.6\n5     6 Shopping Center 3         Avenida Paulista, 2064 -23.6 -46.7\n               geometry\n*           <POINT [°]>\n1  (-46.6508 -23.56581)\n2  (-46.65438 -23.5631)\n3  (-46.6558 -23.56226)\n4 (-46.64809 -23.56784)\n5 (-46.65895 -23.55785)\n```\n:::\n:::\n\n\nPodemos também contar o número de unidades em cada um dos aeroportos. Aparentemente, há 8 unidades no aeroporto de Guarulhos, o que me parece um número muito alto.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarbucks %>%\n  st_drop_geometry() %>%\n  filter(str_detect(name, \"Aeroporto\")) %>%\n  mutate(\n    name_airport = str_remove(name, \"de \"),\n    name_airport = str_extract(name_airport, \"(?<=Aeroporto )\\\\w+\"),\n    name_airport = if_else(is.na(name_airport), \"Confins\", name_airport),\n    .before = \"name\"\n  ) %>%\n  count(name_airport, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9 × 2\n  name_airport      n\n  <chr>         <int>\n1 GRU               8\n2 Brasília          3\n3 Florianópolis     3\n4 Confins           2\n5 Galeão            2\n6 Viracopos         2\n7 Congonhas         1\n8 Curitiba          1\n9 Santos            1\n```\n:::\n:::\n\n\nPor fim, podemos notar que muitas das unidades do Starbucks se localizam dentro de shoppings. Uma conta simples mostra que cerca de 75 unidades estão localizadas dentro de shoppings, perto de 50% das unidades[^2].\n\n[^2]: Aqui, estamos assumindo que o a tag \"name\" sempre inclui a palavra shopping se a unidade estiver dentro de um shopping. Eventualmente, este número pode estar subestimado se houver unidades dentro de shoppings que não tem a palavra \"shopping\" no seu nome. A rigor, também não verificamos se, de fato, a tag shopping sempre está associada a um shopping em atividade.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarbucks %>%\n  st_drop_geometry() %>%\n  filter(str_detect(name, \"Shopping|shopping\")) %>%\n  nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 75\n```\n:::\n:::\n\n\n## Construindo\n\nA partir destes dados podemos acrescentar mais informação. A partir do `geobr` podemos identificar em quais cidades as unidades se encontram.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim_city = geobr::read_municipality(showProgress = FALSE)\ndim_city = st_transform(dim_city, crs = 4326)\nsf::sf_use_s2(FALSE)\n\nstarbucks = starbucks %>%\n  st_join(dim_city) %>%\n  relocate(c(name_muni, abbrev_state), .before = lat)\n```\n:::\n\n\nAgora podemos ver quais cidades tem mais Starbucks.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstarbucks %>%\n  st_drop_geometry() %>%\n  count(name_muni, abbrev_state, sort = TRUE) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 43 × 3\n   name_muni      abbrev_state     n\n   <chr>          <chr>        <int>\n 1 São Paulo      SP              45\n 2 Rio De Janeiro RJ              11\n 3 Guarulhos      SP               9\n 4 Curitiba       PR               8\n 5 Brasília       DF               6\n 6 Campinas       SP               6\n 7 Florianópolis  SC               5\n 8 Jundiaí        SP               4\n 9 Porto Alegre   RS               4\n10 Ribeirão Preto SP               3\n# ℹ 33 more rows\n```\n:::\n:::\n\n\nOu seja, há mais Starbucks somente na Paulista do que em quase todas as demais cidades do Brasil.\n\n# Conclusão\n\nO web scraping é uma técnica de extração de dados bastante popular que nos permite rapidamente construiur bases de dados interessantes. Neste caso, o processo foi bastante simples, mas como comentei, ele pode ser muito complexo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# include: false\nqs::qsave(starbucks, here::here(\"static/data/starbucks_webscrape.qs\"))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"../../../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../../../site_libs/leaflet-1.3.1/leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/leaflet-1.3.1/leaflet.js\"></script>\n<link href=\"../../../site_libs/leafletfix-1.0.0/leafletfix.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/proj4-2.6.2/proj4.min.js\"></script>\n<script src=\"../../../site_libs/Proj4Leaflet-1.0.1/proj4leaflet.js\"></script>\n<link href=\"../../../site_libs/rstudio_leaflet-1.3.1/rstudio_leaflet.css\" rel=\"stylesheet\" />\n<script src=\"../../../site_libs/leaflet-binding-2.2.1/leaflet.js\"></script>\n<script src=\"../../../site_libs/leaflet-providers-2.0.0/leaflet-providers_2.0.0.js\"></script>\n<script src=\"../../../site_libs/leaflet-providers-plugin-2.2.1/leaflet-providers-plugin.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}