{
  "hash": "caf7cd17037c7ed8d23efe61732e246a",
  "result": {
    "markdown": "---\ntitle: \"Usando fontes com showtext no R\"\ndate: '2023-05-10'\ncategories: ['tutorial-R']\nimage: \"/static/tipografia_r.png\"\nimage-alt: \"/static/tipografia_r.png\"\ndescription: \"A tipografia de um texto deve complementar a mensagem e o tom que se quer comunicar. Neste post ensino como importar fontes no R para criar visualizações mais refinadas e profissionais.\"\n---\n\n::: {.cell}\n\n:::\n\n\nCriar boas visualizações é parte importante de qualquer análise de dados.\n\nA tipografia de um texto deve complementar a mensagem e o tom que se quer comunicar e o mesmo vale para visualizações com dados. A fonte do texto ajuda a transmitir informação e pode comunicar, por exemplo, maior sobriedade, profissionalismo, etc.\n\nO pacote `showtext`, desenvolvido por [yixuan](https://github.com/yixuan/showtext), facilita a importação e o uso de fontes em gráficos no `R`. O pacote funciona com uma variedade de extensões de fontes, não sendo limitado como o `extrafont`, por exemplo, a arquivos `.ttf`.\n\n# R\n\nO primeiro passo necessário é instalar o pacote do CRAN usando `install.packages()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Instale o pacote se necessário\ninstall.packages(\"extrafont\")\n\n# Opcionalmente instale a versão em desenvolvimento\nremotes::install_github(\"yixuan/showtext\")\n\nlibrary(showtext)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\nImportar fontes é bastante simples. Como exemplo vamos importar algumas [fontes do Google](https://fonts.google.com) usando a função `font_add_google()`. Esta função, em geral, leva apenas dois arugmentos. O primeiro argumento deve ser o nome \"oficial\" da fonte; o segundo argumento é como será o nome desta fonte dentro do R.\n\nNo exemplo abaixo vamos importar três fontes: Montserrat, Roboto Condensed e Alice. No primeiro caso vamos manter o mesmo nome da fonte; já nos outros dois vamos usar nomes diferentes.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfont_add_google(\"Montserrat\", \"Montserrat\")\n# É possível simplificar o nome da fonte\nfont_add_google(\"Roboto Condensed\", \"RobCond\")\nfont_add_google(\"Alice\", \"alice\")\n```\n:::\n\n\nTambém é possível importar fontes que já estão instaladas no seu computador usando a função `font_add`. Agora a ordem dos arugmentos é invertida: o primeiro argumento define o nome da fonte dentro do `R` enquanto o segundo argumento é o nome do arquivo que pode ser `.ttf`, `.ttc` ou outros.\n\nEm geral, o `showtext` consegue encontrar corretamente as pastas onde estes arquivos estão armazenados. Caso você tenha problema com isso vai ter de especificar este caminho manualmente com a função `font_paths()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Importar a fonte Helvetica\nfont_add(\"HelveticaNeue\", \"HelveticaNeue.ttc\")\n\n# Importar a fonte Arial (junto com a versão em negrito, itálico, etc.)\nfont_add(\n  \"Arial\",\n  regular = \"Arial.ttf\",\n  bold = \"Arial Bold.ttf\",\n  italic = \"Arial Italic.ttf\",\n  bolditalic = \"Arial Bold Italic.ttf\")\n```\n:::\n\n\nPara informar ao R que o `showtext` deve ser utilizado para desenhar o texto dos gráficos é preciso usar a função `showtext_auto()`. Só é preciso fazer isto uma única vez por sessão. Se você *sempre* utiliza o `showtext` você pode considerar incluir esta função no seu `.Rprofile`, assim o pacote será carregado automaticamente sempre que você abrir uma nova sessão no `R`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Indica que o showtext deve ser utilizado para criar as imagens\n# Só precisa ser chamado uma única vez por sessão\nshowtext_auto()\n```\n:::\n\n\n## Base R\n\nPara modificar a fonte dos elementos textuais dos gráficos feitos com o `plot()` é preciso ajustar o argumento `family`. Usando as funções base do R, este argumento aparece dentro da função `par` (que configura vários parâmetros dos gráficos).\n\nO código abaixo mostra como trocar a fonte do gráfico.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Define a fonte padrão do gráfico\npar(family = \"alice\")\n# Monta um scatter plot de exemplo\nplot(mpg ~ wt, data = mtcars, ylab = \"Milhas por galão\", xlab = \"Peso (ton.)\")\ntitle(\"Peso x eficiência de carros\")\ntext(labels = \"exemplo de texto\", x = 3, y = 30)\nlegend(\"topright\", legend = \"exemplo de legenda\", pch = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.svg){fig-align='center' width=90%}\n:::\n:::\n\n\nNote que *todos* os objetos textuais (título, legenda, etc.) são convertidos para a mesma fonte. Caso se queira fontes diferentes para estes elementos é preciso especificá-los adequadamente. Por exemplo, para trocar somente a fonte do título\n\n`title(\"nome_do_titulo\", family = \"nome_fonte\")`\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot(mpg ~ wt, data = mtcars, ylab = \"Milhas por galão\", xlab = \"Peso (ton.)\")\ntitle(\"Peso x eficiência de carros\", family = \"RobCond\")\ntext(labels = \"exemplo de texto\", x = 3, y = 30, family = \"Montserrat\")\nlegend(\"topright\", legend = \"exemplo de legenda\", pch = 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.svg){fig-align='center' width=90%}\n:::\n:::\n\n\nVale notar que, uma vez definida a fonte usando a função `par`, todos os gráficos subsequentes vão usar esta fonte. Para trocar a fonte é preciso usar a função `par` novamente. Além da fonte também é possível trocar a ênfase (e.g. `face = c(\"bold\", \"italic\")`) e também o tamanho da letra (e.g. `cex.axis = 1.5`, `cex.main = 2`).\n\n## ggplot2\n\nTambém é possível trocar a fonte de gráficos feitos com outros pacotes, como o `ggplot2`. O exemplo abaixo monta um gráfico similar ao que foi feito acima. Modifica-se a fonte dentro da função `theme`. Esta função é um tanto particular, então vale a pena discorrer um pouco sobre ela. Ela é basicamente usada para modificar elementos do gráfico. Há quatro elementos principais, dos quais só nos interessa um: o `element_text`. São seis os principais elementos textuais que pode-se modificar:\n\n-   `axis.text` - texto dos eixos (em geral, os números do eixo);\n-   `axis.title` - nome do eixo (e.g. \"Milhas por galão\" no exemplo acima);\n-   `legend.text` - texto da legenda;\n-   `legend.title` - título da legenda;\n-   `plot.title` - título do gráfico;\n-   `text` - *todos* os acima.\n\nPode-se ser mais específico com o texto dos eixos usando `axis.text.x` e `axis.text.y`, por exemplo. O último dos elementos listados acima funciona como um \"coringa\", ele serve para modificar de uma vez só todos os elementos textuais de um gráfico. No exemplo abaixo modifico somente o `text`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\np <- ggplot(data = mtcars, aes(x = wt, y = mpg)) +\n  geom_point() +\n  stat_smooth(method = \"lm\", formula = y ~ poly(x, 2), se = FALSE) +\n  labs(\n    x = \"Peso (ton.)\",\n    y = \"Milhas por galão\",\n    title = \"Eficiência e peso de carros\",\n    subtitle = \"Regressão entre o peso de diferentes carros e sua eficiência energética\",\n    caption = \"Fonte: Motor Trend US Magazine 1974\"\n    )\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np + theme(text = element_text(family = \"Montserrat\", size = 10))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.svg){fig-align='center' width=90%}\n:::\n:::\n\n\nO próximo exemplo mostra como modificar alguns dos diferentes elementos do gráfico. Aproveito a variável `cyl` (cilindradas) para diferenciar os carros em três grupos para que o gráfico agora tenha uma legenda.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\np +\n  geom_point(aes(color = as.factor(cyl))) +\n  scale_color_discrete(name = \"Cilindros\") +\n  theme(\n    # Modifica o texto (números) dos eixos x e y\n    axis.text = element_text(family = \"alice\"),\n    # Modifica o título do eixo (i.e. Milhas por galão)\n    axis.title = element_text(family = \"Montserrat\"),\n    # Modifica o título da legenda (Cilindros)\n    legend.title = element_text(family = \"HelveticaNeue\"),\n    # Modifica o texto da legenda (i.e. 4, 6, 8)\n    legend.text = element_text(family = \"HelveticaNeue\"),\n    # Modifica o título do gráfico\n    plot.title = element_text(family = \"RobCond\", size = 20)\n    )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.svg){fig-align='center' width=90%}\n:::\n:::\n\n\nTalvez o jeito mais sensato de usar fontes com o `ggplot2` seja primeiro especificar uma fonte padrão para o gráfico usando `text` e depois calibrar as exceções. Os elementos textuais como `axis.title` e `legend.text` copiam as propriedades definidas em `text`.\n\nNo exemplo abaixo defino que todos os elementos textuais ser escritos em Arial simples em tamanho 12 na cor `\"gray20\"`. Depois disso defino que o título deve ter mais destaque com Arial em negrito (bold) num tamanho maior e numa cor mais escura. Por fim, defino que o rodapé do gráfico seja escrito em fonte menor e em itálico.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntheme_custom <- theme_light() +\n  theme(\n    # Modifica todos os elementos textuais do gráfico\n    text = element_text(family = \"Arial\", size = 12, color = \"gray20\"),\n    # Modifica apenas o título\n    plot.title = element_text(face = \"bold\", size = 14, color = \"gray10\"),\n    # Modifica apenas a nota no rodapé\n    plot.caption = element_text(face = \"italic\", size = 8)\n  )\n\np + \n  geom_point(aes(color = as.factor(cyl))) +\n  scale_color_discrete(name = \"Cilindros\") +\n  theme_custom\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.svg){fig-align='center' width=90%}\n:::\n:::\n\n\nPor último, também pode ser interessante usar fontes diferentes para representar dados diferentes. Isto é possível usando o argumento `family` dentro do `aes`. Da mesma forma, seria possível também representar grupos de dados diferentes com tamanhos de fontes diferentes ou mesmo destacar algum grupo específico com itálico.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nnomes <- row.names(mtcars)\nmtcars$cyl <- as.factor(mtcars$cyl)\n\nggplot(data = mtcars, aes(x = wt, y = mpg)) +\n  geom_text(aes(label = nomes, family = c(\"Arial\", \"alice\", \"Montserrat\")[cyl]))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.svg){fig-align='center' width=90%}\n:::\n:::\n\n\n## Anexo: problemas com DPI e RMarkdown\n\nApesar de muito conveniente, o `showtext` não é inteiramente desprovido de problemas. Dois problemas que enfrento com alguma recorrência são diferenças de DPI na hora de exportar gráficos e problemas com RMarkdown.\n\nO problema com o RMarkdown é mais simples. Em versões antigas do RMarkdown e do showtext era necessário adicionar um argumento `fig.showtext = TRUE` em todos os chunks em que um gráfico usando showtext fosse renderizado. Alternativamente, podia-se modificar esta opção globalmente inserido o seguinte código no início do documento RMarkdown.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nknitr::opts_chunk$set(\n  fig.showtext = TRUE,\n  fig.retina = 1\n  )\n```\n:::\n\n\nAcredito, mas não tenho certeza, de que este problema sumiu em versões mais recentes dos pacotes, pois com frequência eu esqueço de adicionar estes argumentos mas não encontro problemas na prática.\n\nO problema com o DPI na hora de exportar gráficos é mais complicado. Por problemas de DPI quero dizer quando o showtext \"desenha\" o texto num DPI diferente do ggplot2. O resultado é que o texto fica ou grande ou pequeno demais. Por padrão o `showtext` utiliza o DPI em 96.\n\nVamos montar um gráfico para ilustrar o problema.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ngrafico <- p + \n  geom_point(aes(color = as.factor(cyl))) +\n  scale_color_discrete(name = \"Cilindros\") +\n  theme_custom\n\n# Exportar o gráfico em alta resolução\nggsave(\"meu_grafico.jpeg\", grafico, dpi = 300)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\nQuando vamos abrir o arquivo que foi exportado temos o resultado abaixo.\n\n![](/posts/tutorial-showtext/meu_grafico.jpeg){.image_figure .image_featured .image_internal .image_unprocessed loading=\"lazy\" decoding=\"async\" alt=\"\"}\n\nComo a imagem foi salva com DPI mais elevado o texto fica menor do que deveria; em casos mais extremos o texto fica minúsculo a ponto de ser ilegível. Há duas formas de tentar contornar este problema: (1) reduzir o DPI dentro de `ggsave`; ou (2) modificar o DPI do `showtext`.\n\nVamos tentar a primeira solução: modificar o `ggsave` para o DPI padrão do `showtext`. Agora o texto está maior mas a proporção dos elementos está péssima! O resultado é pior do que o problema inicial.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Exportar a imagem num dpi menor\nggsave(\"meu_grafico_96.jpeg\", grafico, dpi = 96)\n```\n:::\n\n\n![](meu_grafico_96.jpeg){fig-align=\"center\"}\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\nA segunda solução é modificar as opções internas do `showtext`. Isto é bastante simples e pode ser feito com o `showtext_opts(dpi = 300)` e chamando novamente a função `showtext_auto()`.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Ajusta o DPI do showtext\nshowtext_opts(dpi = 300)\n# \"Ativa\" o showtext novamente\nshowtext_auto()\n\n# Refaz o gráfico (isto é importante!)\ngrafico <- p + \n  geom_point(aes(color = as.factor(cyl))) +\n  scale_color_discrete(name = \"Cilindros\") +\n  theme_custom\n\n# Exporta um novo gráfico\nggsave(\"meu_grafico_300.jpeg\", grafico, dpi = 300)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\nAgora o tamanho do texto está correto e a imagem como um todo está em alta resolução. Um problema é que a imagem ficou bastante grande, mas isto pode ser ajustado variando os argumentos `width` e `height` da função `ggsave`.\n\n![](/posts/tutorial-showtext/meu_grafico_300.jpeg){.image_figure .image_featured .image_internal .image_unprocessed loading=\"lazy\" decoding=\"async\" alt=\"\"}\n\nVale notar que, a depender do seu sistema operacional, modificar o DPI padrão do showtext pode distorcer os gráficos dentro do R ou RStudio. Na prática o melhor *workflow* pode ser de modificar o DPI do showtext apenas no momento de exportar os gráficos.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}