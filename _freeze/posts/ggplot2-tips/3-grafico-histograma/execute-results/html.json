{
  "hash": "05e98b65a57f017b921bbac830567f68",
  "result": {
    "markdown": "---\ntitle: 'ggplot2 - Fundamentos: histograma'\nauthor: Vinicius Oike\ndate: '2022-12-12'\ncategories: ['data visualization', 'ggplot2', 'turorial-R']\ndescription: \"\"\ntitle-block-banner: true\npage-layout: article\nexecute: \n  message: false\n  warning: false\nformat:\n  html:\n    fig-align: center\n    code-fold: false\n    code-tools: true\n---\n\n\n\n\n# Histograma\n\nUm histograma serve para visualizar a distribuição de um conjunto de dados. Ele consiste em colunas que representam a frequência de ocorrência de determinados valores nos dados: quanto mais alta for a coluna, mais frequente é uma observação. Isto permite ver a forma da distribuição dos dados e identificar padrões e tendências.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](3-grafico-histograma_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nHistogramas aparecem naturalmente na hora de visualizar, por exemplo:\n\n1.  Distribuição de notas de alunos em testes padronizados.\n2.  Distribuição da renda familiar na população de um país.\n3.  Distribuição de preços de imóveis numa cidade.\n4.  Distribuição da altura das pessoas.\n5.  Distribuição de variáveis aleatórias em estatística.\n\nNeste post vamos entender como montar histogramas no R usando o pacote `ggplot2`. Primeiro vamos trabalhar um exemplo, passo a passo, para visualizar a taxa de poupança nos EUA aos longo dos anos. Depois vamos trabalhar um exemplo mais complexo, analisando a distribuição do preço dos imóveis no Texas, EUA.\n\n# R\n\nAntes de começar é preciso instalar o pacote `ggplot2`. Um pacote é um conjunto de funções, que costumam ter a mesma finalidade; no caso do `ggplot2` as funções são feitas para visualizar dados.\n\nO R tem um funcionalidade embutida que facilita o download e a instalação de pacotes. Usamos a função `install.packages(\"nome_do_pacote\")`. Então, para instalar o ggplot2 executamos o código abaixo.\n\nSe você estiver usando o R fora do RStudio é provável que a função abaixo solicite que você escolha um servidor a partir de uma lista. Escolha o que for mais próximo de onde você está. No meu caso eu sempre utilizo o \"Brazil (SP 1) \\[https\\] - University of Sao Paulo, Sao Paulo\". Se você usa o R dentro do RStudio pode ignorar este comentário.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Instalar o pacote ggplot2 (se necessário)\ninstall.packages(\"ggplot2\")\n```\n:::\n\n\nA cada vez que abrimos o R precisamos carregar os pacotes adicionais que instalamos previamente. Isto pode parecer trabalhoso à primeira vista, mas faz muito sentido: evita conflitos entre pacotes e é mais eficiente. Considere que cada projeto de R tem um objetivo diferente. Neste projeto, por exemplo, queremos visualizar dados, então não precisamos de outros pacotes além do `ggplot2`.\n\nPara carregar o `ggplot2` usamos a função `library` (*biblioteca*).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Carrega o pacote ggplot2\nlibrary(ggplot2)\n```\n:::\n\n\n## ggplot2\n\nPara criar um histograma com o pacote `ggplot2` no `R`, usamos a função `geom_histogram()`.\n\nA estrutura de um gráfico do `ggplot2` parte de três elementos básicos: (1) a base de dados, isto é, um objeto `data.frame`; (2) um mapeamento de variáveis, feito com auxílio da função `aes()`; e (3) a escolha da forma do gráfico, feito com as funções `geom`.\n\nO `ggplot2` funciona adicionando camadas e elementos subsequentemente sobre um gráfico inicial. Cada elemento novo que adicionamos ao gráfico é somado usando o operador `+`.\n\nPara resumir o processo: começamos com a função `ggplot()` e vamos adicionando *geoms*, funções auxiliares que especificam a forma do gráfico. Este processo construtivo de adicionar elementos a um gráfico é o principal diferencial do `ggplot`.\n\nOu seja, temos três elementos essenciais:\n\n1.  *Dados* - nossa tabela de dados.\n2.  *Função `aes()`* - que transforma os dados em objetos visuais.\n3.  *Objeto geométrico (`geom`)* - que escolhe qual o formato destes objetos visuais.\n\nEsta estrutura básica é esquematizada no pseudo-código abaixo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = base_de_dados, aes(x = variavel_x)) +\n  geom_histogram()\n```\n:::\n\n\nVamos montar um exemplo usando a base `economics`, que vem carregada junto com o pacote `ggplot2`. Esta base compila uma série de informações econômicas e demográficas no período julho/1967 a abril/2014 nos EUA. Para explorar os dados podemos usar a função `head()` que exibe as primieras linhas da tabela.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(economics)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-condensed table-hover\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:center;\"> date </th>\n   <th style=\"text-align:center;\"> pce </th>\n   <th style=\"text-align:center;\"> pop </th>\n   <th style=\"text-align:center;\"> psavert </th>\n   <th style=\"text-align:center;\"> uempmed </th>\n   <th style=\"text-align:center;\"> unemploy </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:center;\"> 1967-07-01 </td>\n   <td style=\"text-align:center;\"> 507 </td>\n   <td style=\"text-align:center;\"> 198712 </td>\n   <td style=\"text-align:center;\"> 13 </td>\n   <td style=\"text-align:center;\"> 4 </td>\n   <td style=\"text-align:center;\"> 2944 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 1967-08-01 </td>\n   <td style=\"text-align:center;\"> 510 </td>\n   <td style=\"text-align:center;\"> 198911 </td>\n   <td style=\"text-align:center;\"> 13 </td>\n   <td style=\"text-align:center;\"> 5 </td>\n   <td style=\"text-align:center;\"> 2945 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 1967-09-01 </td>\n   <td style=\"text-align:center;\"> 516 </td>\n   <td style=\"text-align:center;\"> 199113 </td>\n   <td style=\"text-align:center;\"> 12 </td>\n   <td style=\"text-align:center;\"> 5 </td>\n   <td style=\"text-align:center;\"> 2958 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 1967-10-01 </td>\n   <td style=\"text-align:center;\"> 512 </td>\n   <td style=\"text-align:center;\"> 199311 </td>\n   <td style=\"text-align:center;\"> 13 </td>\n   <td style=\"text-align:center;\"> 5 </td>\n   <td style=\"text-align:center;\"> 3143 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 1967-11-01 </td>\n   <td style=\"text-align:center;\"> 517 </td>\n   <td style=\"text-align:center;\"> 199498 </td>\n   <td style=\"text-align:center;\"> 13 </td>\n   <td style=\"text-align:center;\"> 5 </td>\n   <td style=\"text-align:center;\"> 3066 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 1967-12-01 </td>\n   <td style=\"text-align:center;\"> 525 </td>\n   <td style=\"text-align:center;\"> 199657 </td>\n   <td style=\"text-align:center;\"> 12 </td>\n   <td style=\"text-align:center;\"> 5 </td>\n   <td style=\"text-align:center;\"> 3018 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nInicialmente, vamos nos focar na coluna `psavert`, que é a taxa de poupança individual, isto é, o percentual da renda que as famílias poupam. O código abaixo monta um histograma desta variável.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = economics, aes(x = psavert)) +\n  geom_histogram()\n```\n:::\n\n\nVamos decompor o código acima em partes. Primeiro temos que informar onde estão os nossos dados. Fazemos isto dentro da função `ggplot()` usando o argumento `data = economics`.\n\nDepois, precisamos indicar qual a variável (coluna) que queremos visualizar, isto é, indicar qual é a variável que deve ser mapeada em um elemento visual. Fazemos isto usando a função `aes(x = psavert)`.\n\nPor fim, como queremos desenhar um gráfico de histograma escolhemos o `geom_histogram()`. Esta última função é adicionada (somada) à função inicial com o sinal de soma `+`.\n\nSegue abaixo o código comentado junto com o gráfico produzido. Vemos que, historicamente, a taxa de poupança gira entre 5% e 15% da renda pessoal.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Chamada inical da função ggplot\nggplot(\n  # Define a base de dados\n  data = economics,\n  # Escolhe qual a variável deve ser visualizda\n  aes(x = psavert)\n  ) +\n  # Escolhe o tipo de gráfico (histograma)\n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![](3-grafico-histograma_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## Elementos estéticos\n\nPodemos customizar um gráfico de `ggplot` modificando os seus **elementos estéticos**. Um elemento estético pode assumir dois tipos de valor: constante ou variável. Um valor constante é um número ou texto, enquanto uma variável é uma coluna da nossa base de dados.\n\nUm gráfico de histograma tem cinco elementos estéticos principais:\n\n-   `color` - Define a cor do contorno da coluna.\n-   `fill` - Define a cor que preenche a coluna.\n-   `alpha` - Define o nível de transparência das cores.\n-   `binwidth` - Define a largura da coluna.\n-   `bins` - Define o número de colunas.\n\nOs dois últimos elementos são parâmetros estatísticos que são interpretados como estéticos neste contexto. Vamos explorar cada um destes elementos em exemplos abaixo.\n\nVale notar que o argumento `x` também é um elemento estético. Mais especificamente ele é um elemento estético *variável*, logo é mapeado com a função `aes()`, e é obrigatório (pois é exigido pela função `geom_histogram()`)\n\n### Cores\n\nTemos duas opções principais de cores: `color` é a cor da linha do contorno da coluna e `fill` é a cor que preenche o interior da coluna. O código abaixo ilustra como utilizar estes argumentos dentro da função `geom_histogram()`. Note que ambos os elementos estéticos são constantes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = economics, aes(x = psavert)) +\n  geom_histogram(color = \"white\", fill = \"steelblue\")\n```\n\n::: {.cell-output-display}\n![](3-grafico-histograma_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nTambém podemos fazer referência a cores via código hexadecimal. No exemplo abaixo uso as cores `\"#e76f51` (laranja-escuro) e `\"#264653\"` (azul-escuro).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = economics, aes(x = psavert)) +\n  geom_histogram(color = \"#E76F51\", fill = \"#264653\")\n```\n\n::: {.cell-output-display}\n![](3-grafico-histograma_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n### Transparência\n\nO parâmetro `alpha` controla o nível de transparência das cores. O valor dele deve estar sempre entre 0 e 1. Quanto mais próximo de 0, mais transparente será o gráfico final. Os gráficos abaixo mostram o efeito de alguns valores distintos de `alpha`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = economics, aes(x = psavert)) +\n  geom_histogram(alpha = 0.9)\n\nggplot(data = economics, aes(x = psavert)) +\n  geom_histogram(alpha = 0.7)\n\nggplot(data = economics, aes(x = psavert)) +\n  geom_histogram(alpha = 0.3)\n\nggplot(data = economics, aes(x = psavert)) +\n  geom_histogram(alpha = 0.1)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](3-grafico-histograma_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n### Colunas\n\nPodemos controlar o número de colunas do histograma de duas formas: (1) escolhendo o número via `bins`; (2) escolhendo o tamanho dos intervalos/colunas via `binwidth`.\n\nA escolha padrão da função `geom_histogram()` é definir `bins = 30`. Isto raramente resulta num gráfico ideal. O número ótimo de intervalos depende do tipo de dado que estamos visualizando.\n\nEm geral, um número muito pequeno resulta num gráfico *agrupado demais*, enquanto um número muito grande resulta num gráfico *disperso demais*. Em ambos os casos fica difícil enxergar o padrão nos dados.\n\nO código abaixo reduz o número de intervalos para 5. Note como as observações estão mais agrupadas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(economics, aes(x = psavert)) +\n  geom_histogram(bins = 5)\n```\n\n::: {.cell-output-display}\n![](3-grafico-histograma_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nJá o código seguinte aumenta o número de intervalos para 70. Agora conseguimos identificar mais facilmente os outliers, mas as observações estão dispersas demais para conseguir enxergar algum tipo de padrão.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(economics, aes(x = psavert)) +\n  geom_histogram(bins = 70)\n```\n\n::: {.cell-output-display}\n![](3-grafico-histograma_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nPor fim, o gráfico abaixo tenta chegar num meio termo. Vemos que a taxa de poupança tem uma distribuição parecida com uma normal e possui alguns outliers tanto à esquerda como à direita.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(economics, aes(x = psavert)) +\n  geom_histogram(bins = 15)\n```\n\n::: {.cell-output-display}\n![](3-grafico-histograma_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nComo mencionado acima, podemos definir o tamanho dos intervalos usando `binwidth`. Como nossa variável está expressa em formato de percentual, podemos experimentar intervalos de tamanho unitário. O resultado, neste caso, é bastante satisfatório.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(economics, aes(x = psavert)) +\n  geom_histogram(binwidth = 1)\n```\n\n::: {.cell-output-display}\n![](3-grafico-histograma_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n## Renomeando os eixos do gráfico\n\nÉ muito importante que um gráfico seja o mais auto-explicativo possível. Para isso precisamos inserir informações relevantes como título, subtítulo e fonte.\n\nA função `labs()` permite facilmente renomear os eixos do gráfico. Os argumentos principais são os abaixo.\n\n-   `title` - título do gráfico\n-   `subtitle` - subtítulo do gráfico\n-   `x` - título do eixo-x (horizontal)\n-   `y` - título do eixo-y (vertical)\n-   `caption` - legenda abaixo do gráfico (em geral, a fonte)\n\nNovamente, utilizamos o sinal de soma para adicionar estes elementos ao gráfico.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(economics, aes(x = psavert)) +\n  geom_histogram(binwidth = 1, color = \"white\") +\n  labs(\n    # Título\n    title = \"Taxa de poupança pessoal nos EUA\",\n    # Subtítulo\n    subtitle = \"Distribuição da taxa de poupança, como proporção da renda disponível, no período 1967-2014.\",\n    # Nome do eixo-x\n    x = \"Taxa de poupança (%)\",\n    # Nome do eixo-y\n    y = \"Frequência\",\n    # Nota de rodapé\n    caption = \"Fonte: FREDR\"\n  )\n```\n\n::: {.cell-output-display}\n![](3-grafico-histograma_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n## Usando cores para representar variáveis\n\nOs elementos estéticos também podem ser utilizados para representar variáveis nos dados. Vamos voltar para a função `aes()`. Como expliquei acima, esta função \"transforma\" nossos dados em elementos visuais. Nos casos acima, ela mapeia a variável `x` nas colunas do histograma.\n\nMas também podemos mapear uma coluna para um elemento estético como o `fill`, por exemplo. O resultado é um gráfico em que a cor de cada coluna vai corresponder a uma variável da nossa base de dados.\n\nAgora, vamos utilizar a base de dados `txhousing` que compila informações do mercado imobiliário das principais cidades do estado do Texas, nos EUA. Como a base inclui mais de 40 cidades vamos restringi-la para apenas quatro cidades: Austin, Dallas, Houston e San Angelo. Vamos visualizar a distribuição da variável `median` que registra o valor mediano de venda mensal dos imóveis em cada cidade. A variável `city` indica o nome da cidade.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(txhousing)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-condensed table-hover\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:center;\"> city </th>\n   <th style=\"text-align:center;\"> year </th>\n   <th style=\"text-align:center;\"> month </th>\n   <th style=\"text-align:center;\"> sales </th>\n   <th style=\"text-align:center;\"> volume </th>\n   <th style=\"text-align:center;\"> median </th>\n   <th style=\"text-align:center;\"> listings </th>\n   <th style=\"text-align:center;\"> inventory </th>\n   <th style=\"text-align:center;\"> date </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:center;\"> Abilene </td>\n   <td style=\"text-align:center;\"> 2000 </td>\n   <td style=\"text-align:center;\"> 1 </td>\n   <td style=\"text-align:center;\"> 72 </td>\n   <td style=\"text-align:center;\"> 5380000 </td>\n   <td style=\"text-align:center;\"> 71400 </td>\n   <td style=\"text-align:center;\"> 701 </td>\n   <td style=\"text-align:center;\"> 6 </td>\n   <td style=\"text-align:center;\"> 2000 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Abilene </td>\n   <td style=\"text-align:center;\"> 2000 </td>\n   <td style=\"text-align:center;\"> 2 </td>\n   <td style=\"text-align:center;\"> 98 </td>\n   <td style=\"text-align:center;\"> 6505000 </td>\n   <td style=\"text-align:center;\"> 58700 </td>\n   <td style=\"text-align:center;\"> 746 </td>\n   <td style=\"text-align:center;\"> 7 </td>\n   <td style=\"text-align:center;\"> 2000 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Abilene </td>\n   <td style=\"text-align:center;\"> 2000 </td>\n   <td style=\"text-align:center;\"> 3 </td>\n   <td style=\"text-align:center;\"> 130 </td>\n   <td style=\"text-align:center;\"> 9285000 </td>\n   <td style=\"text-align:center;\"> 58100 </td>\n   <td style=\"text-align:center;\"> 784 </td>\n   <td style=\"text-align:center;\"> 7 </td>\n   <td style=\"text-align:center;\"> 2000 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Abilene </td>\n   <td style=\"text-align:center;\"> 2000 </td>\n   <td style=\"text-align:center;\"> 4 </td>\n   <td style=\"text-align:center;\"> 98 </td>\n   <td style=\"text-align:center;\"> 9730000 </td>\n   <td style=\"text-align:center;\"> 68600 </td>\n   <td style=\"text-align:center;\"> 785 </td>\n   <td style=\"text-align:center;\"> 7 </td>\n   <td style=\"text-align:center;\"> 2000 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Abilene </td>\n   <td style=\"text-align:center;\"> 2000 </td>\n   <td style=\"text-align:center;\"> 5 </td>\n   <td style=\"text-align:center;\"> 141 </td>\n   <td style=\"text-align:center;\"> 10590000 </td>\n   <td style=\"text-align:center;\"> 67300 </td>\n   <td style=\"text-align:center;\"> 794 </td>\n   <td style=\"text-align:center;\"> 7 </td>\n   <td style=\"text-align:center;\"> 2000 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Abilene </td>\n   <td style=\"text-align:center;\"> 2000 </td>\n   <td style=\"text-align:center;\"> 6 </td>\n   <td style=\"text-align:center;\"> 156 </td>\n   <td style=\"text-align:center;\"> 13910000 </td>\n   <td style=\"text-align:center;\"> 66900 </td>\n   <td style=\"text-align:center;\"> 780 </td>\n   <td style=\"text-align:center;\"> 7 </td>\n   <td style=\"text-align:center;\"> 2000 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nQueremos um gráfico em que cada cidade tenha uma cor diferente, então, a variável `city` deve aparecer dentro da função `aes()`. O código abaixo primeiro organiza os dados e depois monta o gráfico. Agora, cada cidade tem uma cor diferente e as colunas são \"empilhadas\" umas sobre as outras.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cria um vetor com as cidades selecionadas\ncities <- c(\"Austin\", \"Dallas\", \"Houston\", \"San Angelo\")\n# Seleciona apenas as linhas que contêm informações sobre estas cidades\nsubtxhousing <- subset(txhousing, city %in% cities)\n\nggplot(data = subtxhousing, aes(x = median)) +\n  geom_histogram(aes(fill = city))\n```\n\n::: {.cell-output-display}\n![](3-grafico-histograma_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\nNo gráfico acima, conseguimos ver, por exemplo, que o valor mais frequente de venda está em torno de 150 mil. Além disso, pode-se ver como os valores de venda em San Angelo costumam ser menores do que os valores de venda em Austin.\n\nPara ter maior controle sobre as cores e sobre a legenda usamos a função `scale_fill_manual()` e a função `theme()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = subtxhousing, aes(x = median)) +\n  geom_histogram(\n    # Mapeaia a variável city nas cores das colunas\n    aes(fill = city),\n    # Define o número de colunas\n    bins = 25,\n    # Define a cor (contorno) das colunas\n    color = \"white\") +\n  # Controla as cores e a legenda\n  scale_fill_manual(\n    # Título da legenda\n    name = \"Cidade\",\n    # Cores das colunas\n    values = c(\"#264653\", \"#2a9d8f\", \"#f4a261\", \"#e76f51\")\n  ) +\n  # Posiciona a legenda acima do gráfico\n  theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![](3-grafico-histograma_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n## Resumo\n\nNeste post aprendemos o básico da estrutura sintática do `ggplot` e conseguimos montar alguns histogramas interessantes em poucas linhas de código. Em qualquer gráfico temos três elementos básicos:\n\n1.  *Dados* - nossa tabela de dados.\n2.  *Função `aes()`* - que transforma os dados em objetos visuais.\n3.  *Objeto geométrico (`geom`)* - que escolhe qual o formato destes objetos visuais.\n\nAlguns pontos importantes:\n\n1.  Elementos estéticos podem ser constantes (números ou texto) ou variáveis (colunas da base de dados). Elementos variáveis precisam estar dentro da função `aes()`.\n2.  A escolha do número de colunas/intervalos depende do dado que queremos visualizar. Em geral, é preciso experimentar com números diferentes.\n3.  Se o elemento `fill` for variável é preciso usar a função `scale_fill_manual()` para controlar as cores e a legenda de cores.\n\nSeguindo esta lógica e somando os objetos podemos criar belos gráficos.\n",
    "supporting": [
      "3-grafico-histograma_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}