{
  "hash": "16ba94cfeb4e4ff10d72d81d8f5b0aa5",
  "result": {
    "markdown": "---\ntitle: 'ggplot2 - Fundamentos: facets'\nauthor: Vinicius Oike\ndate: '2023-01-04'\ncategories: ['data visualization', 'ggplot2', 'turorial-R']\ndescription: \"Facets são pequenos gráficos \"\ntitle-block-banner: true\npage-layout: article\nexecute: \n  message: false\n  warning: false\nformat:\n  html:\n    code-fold: false\n    code-tools: true\n---\n\n\n\n\nA função `facet_wrap()` do pacote `ggplot2` do `R` permite decompor uma visualização em vários gráficos menores, chamados de \"facets\". Cada gráfico é criado como uma combinação de um ou mais grupos nos dados. Isto pode ser útil para comparar diferentes subconjuntos de dados ou para exibir muitas séries de dados no mesmo gráfico de uma maneira organizada.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](5-facets_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n\nEste tutorial vai utilizar os seguintes geoms: `geom_histogram()`, `geom_point()`, `geom_col()` e `geom_line()`. Assim, se você não tiver familiaridade com estas funções consulte os posts abaixo:\n\n* [Gráfico de histograma]()\n* [Gráfico de linha]()\n* [Scatterplot (gráfico de pontos)]()\n* [Gráfico de coluna]()\n\nAlém disso, alguma manipulação de dados será necessária para remodelar os dados. Não é necessário ter conhecimento sobre estas funções adicionais, mas caso queira aprender mais sobre manipulação/limpeza de dados veja o post [Manipular para enxergar: o básico da limpeza de dados]().\n\nPara começar vamos importar os pacotes necessários:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Instala o pacote ggplot2 (se necessário)\ninstall.packages(c(\"ggplot2\", \"dplyr\", \"tidyr\", \"gapminder\", \"GetBCBData\"))\n\n# Carrega os pacotes\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(gapminder)\nlibrary(GetBCBData)\n```\n:::\n\n\n## Séries de tempo\n\nVamos começar importando algumas séries de tempo do site do Banco Central do Brasil utilizando o pacote `GetBCBData`. Vamos importar algumas séries do Índice de Produção Industrial (IPI). As séries são mensais, dessazonalizadas e indexadas com base nos valores médios de 2012.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Código das séries\ncodigos <- c(28503, 28505, 28506, 28507, 28508, 28511)\n# Importar as séries\nseries <- gbcbd_get_series(id = codigos, first.date = as.Date(\"2010-01-01\"))\n```\n:::\n\n\nNossa base de dados `series` está no formato \"long\". A coluna `ref.date` indica a data da observação, a coluna `series.name` identifica cada uma das séries pelo seu código numérico e, por fim, a coluna `value` retorna o valor de cada série em cada momento do tempo.\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-condensed table-hover\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:center;\"> ref.date </th>\n   <th style=\"text-align:center;\"> value </th>\n   <th style=\"text-align:center;\"> id.num </th>\n   <th style=\"text-align:center;\"> series.name </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:center;\"> 2010-01-01 </td>\n   <td style=\"text-align:center;\"> 117 </td>\n   <td style=\"text-align:center;\"> 28503 </td>\n   <td style=\"text-align:center;\"> id = 28503 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2010-02-01 </td>\n   <td style=\"text-align:center;\"> 117 </td>\n   <td style=\"text-align:center;\"> 28503 </td>\n   <td style=\"text-align:center;\"> id = 28503 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2010-03-01 </td>\n   <td style=\"text-align:center;\"> 120 </td>\n   <td style=\"text-align:center;\"> 28503 </td>\n   <td style=\"text-align:center;\"> id = 28503 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2010-04-01 </td>\n   <td style=\"text-align:center;\"> 120 </td>\n   <td style=\"text-align:center;\"> 28503 </td>\n   <td style=\"text-align:center;\"> id = 28503 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2010-05-01 </td>\n   <td style=\"text-align:center;\"> 120 </td>\n   <td style=\"text-align:center;\"> 28503 </td>\n   <td style=\"text-align:center;\"> id = 28503 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> 2010-06-01 </td>\n   <td style=\"text-align:center;\"> 119 </td>\n   <td style=\"text-align:center;\"> 28503 </td>\n   <td style=\"text-align:center;\"> id = 28503 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nSabemos que é possível plotar múltiplas séries de tempo atribuindo, por exemplo, uma cor diferente para cada série. Note, contudo, que o resultado final fica muito confuso pois há sobreposição entre as séries.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Gráfico de linha com cores diferentes para cada série\nggplot(data = series, aes(x = ref.date, y = value)) +\n  geom_line(aes(color = series.name))\n```\n\n::: {.cell-output-display}\n![](5-facets_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nPara dividir estas séries em pequenos gráficos distintos usamos a função `facet_wrap()`. Esta função exige apenas um argumento chamado `facets` que indica qual variável deve ser utilizada para \"separar\" os gráficos.\n\nPodemos indicar a variável de duas formas: (1) usando a função `vars()`; ou (2) utilizando a sintaxe de fórmula que é precedida pelo \"til\" `~`.\n\nO código abaixo exemplifica ambas as opções. Vamos separar as séries usando a variável `series.name`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Gráfico usando vars()\nggplot(data = series, aes(x = ref.date, y = value)) +\n  geom_line() +\n  facet_wrap(vars(series.name))\n\n# Gráfico usando ~variavel\nggplot(data = series, aes(x = ref.date, y = value)) +\n  geom_line() +\n  facet_wrap(~ series.name)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](5-facets_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nO gráfico de \"facet\" cria um gráfico separado para cada uma das séries. Note que os eixos são fixos para garantir que eles sejam comparáveis entre si. Assim, fica mais fácil de perceber como a série `28511` (insumos da construção civil) é mais curta que as demais e como a série `28506` (bens de capital) apresenta maior volatilidade que as outras séries.\n\nA sintaxe com `vars()` é a mais atual e é a que será utilizada neste post. Podemos controlar a disposição dos gráficos restringindo o comportamento dos eixos com o argumento `scales` e definindo o número de colunas/linhas atribuindo valores para `nrow` (número de linhas) ou para `ncol` (número de colunas).\n\nO argumento `scales` admite quatro valores:\n\n* `scales = \"free_x\"` - o eixo-x de cada gráfico é individual\n* `scales = \"free_y\"` - o eixo-y de cada gráfico é individual.\n* `scales = \"free\"` - ambos os eixos x e y são individuais em cada gráfico.\n* `scales = \"fixed\"` - todos os gráficos compartilham os mesmos eixos (opção padrão)\n\nO gráfico abaixo permite que cada gráfico tenha seu próprio eixo-y. Note como agora os gráficos individuais não são mais diretamente comparáveis entre si. Contudo, a variação individual de cada série fica mais evidente.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = series, aes(x = ref.date, y = value)) +\n  geom_line() +\n  facet_wrap(vars(series.name), scales = \"free_y\")\n```\n\n::: {.cell-output-display}\n![](5-facets_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nDeixando livre o eixo-x vemos como a série `28511` é alterada.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = series, aes(x = ref.date, y = value)) +\n  geom_line() +\n  facet_wrap(vars(series.name), scales = \"free_x\")\n```\n\n::: {.cell-output-display}\n![](5-facets_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nPor fim, podemos mudar a disposição dos gráficos alterando o número de linhas (`nrow`) ou de colunas (`ncol`). Note que a ordem os gráficos é definida pela ordem da variável `series.name`. Para modificar esta ordem é preciso definir os `levels` do `factor` que representa a variável categórica; e para modificar os pequenos títulos, que aparecem no topo de cada \"facet\", é preciso definir os `labels`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = series, aes(x = ref.date, y = value)) +\n  geom_line() +\n  facet_wrap(vars(series.name), nrow = 3)\n```\n\n::: {.cell-output-display}\n![](5-facets_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## Scatterplots\n\nPara nosso segundo exemplo vamos explorar a relação entre a riqueza de um país e a sua expectativa de vida usando os dados do pacote `gapminder`. Inicialmente, vamos restringir nosso foco apenas aos dados de 2007.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Carrega o pacote gapminder\nlibrary(gapminder)\n# Seleciona apenas dados referentes ao ano de 2007\ngap07 <- subset(gapminder, year == 2007)\n```\n:::\n\n\nA tabela de dados contém informações de vários países. A coluna `continent` indica a qual continente o país pertence, a coluna `gdpPercap` é o PIB per capita do país, em dólares constantes, a coluna `lifeExp` é a expectativa de vida ao nascer do país em anos.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint_table(head(gap07))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-condensed table-hover\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:center;\"> country </th>\n   <th style=\"text-align:center;\"> continent </th>\n   <th style=\"text-align:center;\"> year </th>\n   <th style=\"text-align:center;\"> lifeExp </th>\n   <th style=\"text-align:center;\"> pop </th>\n   <th style=\"text-align:center;\"> gdpPercap </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:center;\"> Afghanistan </td>\n   <td style=\"text-align:center;\"> Asia </td>\n   <td style=\"text-align:center;\"> 2007 </td>\n   <td style=\"text-align:center;\"> 44 </td>\n   <td style=\"text-align:center;\"> 31889923 </td>\n   <td style=\"text-align:center;\"> 975 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Albania </td>\n   <td style=\"text-align:center;\"> Europe </td>\n   <td style=\"text-align:center;\"> 2007 </td>\n   <td style=\"text-align:center;\"> 76 </td>\n   <td style=\"text-align:center;\"> 3600523 </td>\n   <td style=\"text-align:center;\"> 5937 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Algeria </td>\n   <td style=\"text-align:center;\"> Africa </td>\n   <td style=\"text-align:center;\"> 2007 </td>\n   <td style=\"text-align:center;\"> 72 </td>\n   <td style=\"text-align:center;\"> 33333216 </td>\n   <td style=\"text-align:center;\"> 6223 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Angola </td>\n   <td style=\"text-align:center;\"> Africa </td>\n   <td style=\"text-align:center;\"> 2007 </td>\n   <td style=\"text-align:center;\"> 43 </td>\n   <td style=\"text-align:center;\"> 12420476 </td>\n   <td style=\"text-align:center;\"> 4797 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Argentina </td>\n   <td style=\"text-align:center;\"> Americas </td>\n   <td style=\"text-align:center;\"> 2007 </td>\n   <td style=\"text-align:center;\"> 75 </td>\n   <td style=\"text-align:center;\"> 40301927 </td>\n   <td style=\"text-align:center;\"> 12779 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:center;\"> Australia </td>\n   <td style=\"text-align:center;\"> Oceania </td>\n   <td style=\"text-align:center;\"> 2007 </td>\n   <td style=\"text-align:center;\"> 81 </td>\n   <td style=\"text-align:center;\"> 20434176 </td>\n   <td style=\"text-align:center;\"> 34435 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n### Expectativa de Vida\n\nVamos montar um gráfico simples que ilustra a relação entre o PIB per capita e a expectativa de vida entre os países, seperando-os por continente. Utilizamos a variável PIB per capita em logaritmo usando a função `log()`. Para incluir uma linha de tendência utilizamos a função `geom_smooth()` com `method = \"lm\"`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = gapminder, aes(x = log(gdpPercap), y = lifeExp)) +\n  # Desenha pontos com cores diferentes para cada continente\n  geom_point(aes(color = continent), alpha = 0.5) +\n  # Linha de regressão linear\n  geom_smooth(method = \"lm\", se = FALSE) +\n  facet_wrap(vars(continent))\n```\n\n::: {.cell-output-display}\n![](5-facets_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nNote que como o `facet_wrap()` gera pequenos títulos para cada gráfico, podemos dispensar a legenda usando `guides(color = \"none\")`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = gapminder, aes(x = log(gdpPercap), y = lifeExp)) +\n  geom_point(aes(color = continent), alpha = 0.5) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  facet_wrap(vars(continent)) +\n  # Omite a legenda de cores.\n  guides(color = \"none\")\n```\n\n::: {.cell-output-display}\n![](5-facets_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nHá diferenças grandes na amplitude do PIB per capita entre os continentes. Podemos usar `scales = \"free_x\"` para dar um zoom em cada um deles.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = gapminder, aes(x = log(gdpPercap), y = lifeExp)) +\n  geom_point(aes(color = continent), alpha = 0.5) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  facet_wrap(vars(continent), scales = \"free_x\") +\n  guides(color = \"none\")\n```\n\n::: {.cell-output-display}\n![](5-facets_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n### Facets com duas variáveis\n\nA função `facet_wrap()` permite também criar pequenos gráficos em dois grupos distintos. No exemplo abaixo, vamos comparar a evolução destas variáveis nos páises asiáticos e nos países americanos, nos anos de 1952, 1972 e 1992.\n\nNote que basta incluir a variável adicional dentro de `vars()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Seleciona apenas as linhas dos continentes Asia e Americas nos anos de 52, 72, e 92\ngap_compare <- subset(\n  gapminder,\n  continent %in% c(\"Asia\", \"Americas\") & year %in% c(1952, 1972, 1992)\n)\n\nggplot(data = gap_compare, aes(x = log(gdpPercap), y = lifeExp)) +\n  geom_point() +\n  facet_wrap(vars(year, continent), ncol = 2)\n```\n\n::: {.cell-output-display}\n![](5-facets_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nA ordem das variáveis dentro de `vars()` importa. A primeira variável fica \"por fora\" e é mapeada nas linhas, enquanto a segunda variável é mapeada nas colunas. A escolha da ordem depende de finalidade da visualização. No caso do gráfico acima, cada linha é um mesmo ano para dois continentes diferentes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = gap_compare, aes(x = log(gdpPercap), y = lifeExp)) +\n  geom_point() +\n  facet_wrap(vars(continent, year))\n```\n\n::: {.cell-output-display}\n![](5-facets_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\nNeste segundo gráfico invertemos a ordem das variáveis e agora cada linha apresenta a trajetória de um continente (da esquerda para a direita). Vemos como os países americanos gradualmente foram se aglomerando no canto superior-direito do gráfico (renda mais elevada e maior expectativa de vida). Já nos gráficos de baixo, vemos como os países asiáticos estavam bastante atrás dos países americanos em 1952 e 1972. Além disso, os países asiáticos estavam muito mais dispersos no eixo-x (PIB per capita). O salto veio entre 1972 e 1992, quando houve aumento tanto na renda como na expectativa de vida.\n\nPor fim, podemos também misturar gráficos. O código abaixo gera vários gráficos separados por continente como nos primeiros exemplos, mas agora todos os países estão plotados no fundo, em cor cinza transparente. Esta visualização ajuda a contextualizar a posição dos países relativamente ao mundo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Base de dados auxiliar para plotar os pontos no fundo do gráfico\npontos_fundo <- dplyr::select(gap07, -continent)\n\nggplot(data = gap07, aes(x = log(gdpPercap), y = lifeExp)) +\n  geom_point(data = pontos_fundo, color = \"gray50\", alpha = 0.5) +\n  geom_point(aes(color = continent), alpha = 0.8) +\n  facet_wrap(vars(continent)) +\n  guides(color = \"none\")\n```\n\n::: {.cell-output-display}\n![](5-facets_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n## Histograma\n\n### Expectativa de Vida\n\nVamos usar a mesma base de dados do gapminder para comparar a distribuição global da expectativa de vida e do PIB per capita no mundo. Como queremos comparar a evolução da distribuição no tempo é importante manter os eixos fixos.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder, aes(x = lifeExp)) +\n  geom_histogram(bins = 10, color = \"white\") +\n  facet_wrap(vars(year))\n```\n\n::: {.cell-output-display}\n![](5-facets_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nVemos no gráfico que, de maneira geral, os países convergiram para a direita da distribuição. Isto indica não apenas que houve um aumento da expectativa de vida, mas também que boa parte dos países hoje tem expectativa de vida na casa de 70-80 anos.\n\nO código abaixo faz o mesmo tipo de gráfico para a distribuição do PIB per capita entre os países. Novamente usamos a transformação log. Vemos que houve uma transição para a direita da distribuição (mais países de renda-alta), mas ainda com bastante variância. Em alguns momentos, a distribuição parece quase seguir uma distruição uniforme com outliers - tanto acima como abaixo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gapminder, aes(x = log(gdpPercap))) +\n  geom_histogram(bins = 15, color = \"white\") +\n  facet_wrap(vars(year))\n```\n\n::: {.cell-output-display}\n![](5-facets_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n### Preços de imóveis\n\nVamos relembrar um dos exemplos do [post de histograma](). Usando uma base de preços imobiliários em cidades do Texas, EUA, fizemos um histograma que combinava informação de quatro cidades diferentes. Este foi um exercício para exemplificar como usar cores para representar diferentes grupos nos dados.\n\nPor conveniência, segue abaixo o código para gerar o exemplo citado. Vemos que é possível perceber algumas diferenças entre as cidades: Austin, por exemplo, têm imóveis com preços mais elevados (à direita no gráfico) do que San Angelo. Os histogramas empilhados, contudo, dificultam a comparação na faixa de 100-200 mil dólares.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cria um vetor com as cidades selecionadas\ncities <- c(\"Austin\", \"Dallas\", \"Houston\", \"San Angelo\")\n# Seleciona apenas as linhas que contêm informações sobre estas cidades\nsubtxhousing <- subset(txhousing, city %in% cities)\n\nggplot(data = subtxhousing, aes(x = median)) +\n  geom_histogram(aes(fill = city))\n```\n\n::: {.cell-output-display}\n![](5-facets_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\nPodemos refazer o mesmo exercício aplicando agora a função `facet_wrap()`. Como os eixos são constantes entre os gráficos, fica fácil comparar os preços medianos de venda de cada uma das cidades.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = subtxhousing, aes(x = median)) +\n  # Histograma\n  geom_histogram(\n    aes(fill = city),\n    # Define o número de intervalos\n    bins = 25,\n    color = \"white\") +\n  # Remove a legenda de cores\n  guides(fill = \"none\") +\n  facet_wrap(vars(city))\n```\n\n::: {.cell-output-display}\n![](5-facets_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\nNote que agora as cores perdem parte de seu propósito, já que os dados estão dividos em \"facets\". Como cada \"facet\", na verdade, apresenta a mesma variável (preço mediano de venda) pode-se fazer o argumento que o mais apropriado seria manter uma mesma cor para cada um dos gráficos.\n\n### Variando o tamanho dos intervalos\n\nSabemos que um bom histograma depende do número correto de colunas/intervalos. No gráfico acima, selecionamos `bins = 25`, mas dificilmente este valor é o mais apropriado para cada uma das cidades.\n\nPara variar o número de intervalos, alteramos o número de `bins` ou definimos o tamanho de cada um dos intervalos via `binwidth`. Como temos múltiplos histogramas podemos inserir um vetor de números como argumento, como `bins = c(12, 30, 25, 17)`, por exemplo. O mesmo vale para o argumento `bindwidth`. \n\nOutra opção é usar uma função customizada como no exemplo abaixo. Neste código usamos regra de \"Freedman–Diaconis\" para selecionar o tamanho ótimo dos intervalos em cada um dos histogramas usando as funções base `ceiling()`, `IQR()` e `length()`. Note que também seria possível utilizar a função `nclass.FD()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = subtxhousing, aes(x = median)) +\n  geom_histogram(\n    fill = \"#2a9d8f\",\n    color = \"white\",\n    # Escolhe o tamanho ótimo do intervalo\n    binwidth = function(x) ceiling(2 * IQR(x) / (length(x)^(1/3)))) +\n  facet_wrap(vars(city))\n```\n\n::: {.cell-output-display}\n![](5-facets_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n## Colunas\n\n### Totais de vendas\n\nO exemplo abaixo mostra o número total de imóveis vendidos nas mesmas quatro cidades. Note que o eixo-y está livre, que enfatiza como a dinâmica das vendas seguiu trajetória similar nas quatro cidades, ainda que o volume de vendas seja bastante distinto.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsales_city <- subtxhousing |> \n  filter(year >= 2005, year <= 2012) |> \n  group_by(city, year) |> \n  summarise(total_sales = sum(sales, na.rm = TRUE))\n\nggplot(data = sales_city, aes(x = year, y = total_sales)) +\n  geom_col(fill = \"#2a9d8f\") +\n  facet_wrap(vars(city), scales = \"free_y\") +\n  # Modifica o eixo-y para incluir separador de milhar\n  scale_y_continuous(labels = scales::label_number(big.mark = \".\"))\n```\n\n::: {.cell-output-display}\n![](5-facets_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n### Grupos incompletos\n\nGráficos de coluna também podem servir bem quando temos grupos incompletos. O exemplo abaixo mostra o preço médio de venda de imóveis por números de dormitórios. A variável de \"facet\" é a coluna `colonial`, uma variável binária que indica se o estilo arquitetônico da casa é colonial (rústico).\n\nA base utilizada é a `hprice` do pacote `wooldridge` a mesma utilizada no post de [gráficos de colunas]().\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Carrega a base de dados\nlibrary(wooldridge)\ndata(\"hprice1\")\n# Estima o preço médio de venda por número de dormitórios x colonial\nprice <- hprice1 |> \n  group_by(bdrms, colonial) |> \n  summarise(avg = mean(price)) \n# Cria um grid com todas as combinações de dormitórios x colonial\ngrid <- expand_grid(bdrms = 1:max(price$bdrms), colonial = 0:1)\n# Junta os dados de preços agrupados com as combinações\ndata <- left_join(grid, price, by = c(\"bdrms\", \"colonial\"))\n\n# Gráfico\nggplot(data = data, aes(x = as.factor(bdrms), y = avg)) +\n  geom_col() +\n  facet_wrap(vars(colonial), ncol = 1) +\n  # Gira o gráfico\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](5-facets_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\nFica imediatamente óbvio que não houve vendas de imóveis de 1 e 2 dormitórios no estilo \"colonial\", sugerindo que este estilo é mais presente entre imóveis maiores. No mesmo sentido, não há vendas de imóveis de 6 e 7 dormitórios que não sejam construídos no estilo colonial.\n\n## Wraps ou Grids\n\n### Comparação das funções\n\nAté agora focamos somente na função `facet_wrap()` que cria vários pequenos gráficos com base nos níveis de uma variável categórica. Vimos que podemos também combinar duas variáveis para comparar, por exemplo, a evolução do PIB per capita com a expectativa de vida entre dois continentes ao longo do tempo.\n\nQuando trabalhamos com duas variáveis categóricas vale a pena experimentar com a função `facet_grid()`. A sintaxe desta função é muito similar a da função `facet_wrap()`, mas a primeira é especificamente voltada para casos em que há duas variáveis categóricas de interesse.\n\nA função `facet_grid()` também permite controle mais direto e intuitivo sobre o layout final dos \"facets\" pois recebe os argumentos `rows` e `cols`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Exemplo usando facet_wrap\nfacet_wrap(facet = vars(x, y))\n# Exemplo usando facet_grid\nfacet_grid(rows = vars(x), cols = vars(y))\n```\n:::\n\n\nO código abaixo refaz o exemplo comparativo. Note que há poucas diferenças entre os gráficos, mas que o resultado do `facet_grid()` é um pouco mais otimizado.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = gap_compare, aes(x = log(gdpPercap), y = lifeExp)) +\n  geom_point() +\n  facet_wrap(facets = vars(year, continent), ncol = 2) +\n  labs(title = \"facet_wrap\")\n\nggplot(data = gap_compare, aes(x = log(gdpPercap), y = lifeExp)) +\n  geom_point() +\n  facet_grid(rows = vars(year), cols = vars(continent)) +\n  labs(title = \"facet_grid\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](5-facets_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\nUma vantagem importante da função `facet_grid()` é a de poder plotar a distribuição conjunta dos dados via o argumento `margins = TRUE`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = gap_compare, aes(x = log(gdpPercap), y = lifeExp)) +\n  geom_point() +\n  facet_grid(rows = vars(year), cols = vars(continent), margins = TRUE)\n```\n\n::: {.cell-output-display}\n![](5-facets_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n### Vendas de imóveis\n\nPara melhor ilustrar algumas das capacidades da `facet_grid()` vamos importar uma versão aumentada da base `txhousing` do pacote `ggplot2`. O código abaixo importa uma versão desta base acrescida de colunas que identificam a quais condados (counties) cada cidade pertence, além de informações de população e crescimento populacional.\n\nO código utilizado para gerar esta base [está disponível no link]().\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntxhousing_counties <- read_csv(\"...\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nVamos montar um gráfico que mostra o preço médio de venda em 2012 nas principais cidades do Texas (apenas cidades com mais de 100 mil habitantes), agrupando as cidades pelo condado principal as quais elas pertencem. Assim, temos uma variável categórica no eixo-x e uma variável categórica no \"facet\".\n\nO código abaixo primeiro faz a manipulação dos dados e depois monta o gráfico. Note o uso dos argumentos `scales = \"free\"` e `space = \"free\"`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Estima o preço médio de venda em 2012 (ponderado pelas vendas mensais)\n# Agrupado por cidade x condado (principal)\nprice_2012 <- txhousing_counties |> \n  filter(year == 2012, population > 100000) |> \n  group_by(city, primary_county) |> \n  summarise(price = weighted.mean(median, sales, na.rm = TRUE))\n\n# Gráfico\nggplot(data = price_2012, aes(x = city, y = price)) +\n  geom_col() +\n  facet_grid(\n    rows = vars(primary_county),\n    scales = \"free\",\n    space = \"free\") +\n  # Vira o gráfico\n  coord_flip() +\n  # Adiciona seperador de milhar no eixo-y\n  scale_y_continuous(labels = scales::label_number(big.mark = \".\")) +\n  # Título dos facets na horizontal\n  theme(\n    strip.text.y = element_text(angle = 0)\n    )\n```\n\n::: {.cell-output-display}\n![](5-facets_files/figure-html/unnamed-chunk-32-1.png){width=100%}\n:::\n:::\n\n\n### Crise Imobiliária de 2008\n\nComo último exercício, podemos combinar vários conhecimentos adquiridos nos posts anteriores e mostrar a evolução dos preços em cada cidade, no período 2005-2011. Assim, temos um período de 3 anos antes e depois da crise imobiliária de 2008.\n\nO código abaixo estima o preço médio de venda anual, ponderado pelas vendas mensais, em cada cidade. O gráfico final inclui apenas cidades que contêm observações completas em todos os anos.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprice_sales <- txhousing_counties |>\n  filter(year >= 2005, year <= 2011) |> \n  group_by(year, city, primary_county) |> \n  summarise(price = weighted.mean(median, sales)) |> \n  group_by(city) |> \n  mutate(check = n()) |> \n  filter(check == 7)\n```\n:::\n\n\nO código abaixo pode parecer muito extenso e confuso à primeira vista, mas lembre-se de focar em cada elemento individualmente. Como o `ggplot` funciona somando elementos basta focar em cada elo da cadeia individualmente.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = price_sales, aes(x = city, y = price)) +\n  # Desenha os círculos\n  geom_point(\n    # Cor de dentro do círculo representa o ano\n    aes(fill = as.factor(year)),\n    # Cor do contorno\n    color = \"gray50\",\n    shape = 21,\n    size = 2,\n    # Transparência das cores para evitar overplotting\n    alpha = 0.8) +\n  # Coloca os gráficos no grid\n  facet_grid(\n    rows = vars(primary_county),\n    scales = \"free\",\n    space = \"free\") +\n  # Adiciona seperador de milhar no eixo-y\n  scale_y_continuous(labels = scales::label_number(big.mark = \".\")) +\n  # Controla as cores que preenchem os círculos\n  scale_fill_manual(\n    name = \"Year\",\n    values = c(\n      \"#006d77\", \"#42999B\", \"#83c5be\", \"#edf6f9\", \"#ffddd2\",\n      \"#F1B9A5\", \"#e29578\")) +\n  # Força a legenda de cores a ser lado-a-lado numa única linha\n  guides(fill = guide_legend(nrow = 1)) +\n  # Vira o gráfico de lado\n  coord_flip() +\n  # Título, subtítulo e nome dos eixos\n  labs(\n    title = \"Evolution of House Prices in Texas\",\n    subtitle = \"Sales-weighted average sale prices in main cities in Texas\",\n    x = NULL,\n    y = \"Average Sale Price (US$)\") +\n  # Tema minimalista com fundo branco\n  theme_light() +\n  # Ajusta a orientação dos títulos dos facets\n  theme(\n    legend.position = \"top\",\n    strip.text.y = element_text(angle = 0)\n    )\n```\n\n::: {.cell-output-display}\n![](5-facets_files/figure-html/unnamed-chunk-34-1.png){width=100%}\n:::\n:::\n\n\nO gráfico acima é muito rico em informação. Cada ponto indica o preço médio de venda dos imóveis na cidade; as cores em verde indicam pontos antes da crise imobiliária, enquanto as cores em laranja indicam pontos após a crise imobiliária; o ano da crise, 2008, está em branco.\n\nA crise imobiliária parece ter tido efeitos heterogêneos nas cidades.\n\nEm Dallas, por exemplo, os preços caíram e estagnaram: as observações estão quase todas sobrepostas. Em algumas cidades como Brownsville e Garland, os preços caíram e até 2011 ainda estavam abaixo dos valores médios pré-crise.\n\nEm algumas cidades centrais como Austin, Houston e San Antonio, a crise parece ter desacelerado o ritmo de crescimento. No período 2005-2007 há um crescimento forte nos preços, enquanto que o período 2008-2011 é de estagnação total.\n\nJá em cidades como Lubbock, Wacco e Midland, por exemplo, a crise parece ter tido efeito momentâneo: os preços voltam a crescer no período 2009-2011.\n\n# Resumo\n\nO uso de gráficos com \"facets\" permite comparar facilmente diferentes subconjuntos de dados ou exibir muitas séries de dados no mesmo gráfico de uma maneira organizada. A função `facet_wrap()` é a mais indicada quando temos uma única variável categórica e queremos visualizar a mesma informação em cada um dos níveis. Quando temos duas variáveis categóricas, vale a pena experimentar a função `facet_grid()`. Usando um pouco de criatividade podemos fazer gráficos bastante interessantes.\n\nHá alguns fatores a se considerar: (1) se houver muitos grupos, cada \"facet\" pode acabar pequena demais, dificultando a compreensão dos dados; (2) para garantir a comparação entre os grupos é importante manter os eixos fixos; (3) se a intenção for somente observar cada série individualmente, lado a lado, pode-se \"liberar\" os eixos.\n\nA preparação dos dados é bastante importante na hora de montar um gráfico de facets. A variável que separa os gráficos também é utilizada como título de cada \"facet\" e também para ordená-los. Assim é importante pensar qual a ordem mais adequada e definir títulos que sejam de fácil interpretação.\n",
    "supporting": [
      "5-facets_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}