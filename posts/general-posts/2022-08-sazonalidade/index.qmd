---
title: Sazonalidade
date: '2023-08-10'
categories: ['data-science', 'economia', 'tutorial-R', 'econometria']
description: ''
draft: true
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(
  warning = FALSE,
  message = FALSE,
  fig.align = "center",
  fig.showtext = TRUE,
  fig.width = 7,
  fig.asp = 0.618,
  out.width = "90%")

library(forecast)
library(seasonal)
library(ggplot2)
library(readr)

sysfonts::font_add_google("Roboto Condensed", family = "RobotoCond")
showtext::showtext_auto()
theme_vini <- theme_minimal() +
  theme(
    text = element_text(family = "RobotoCond"),
    panel.grid.minor = element_blank(),
    axis.text.x = element_text(angle = 90),
    plot.background = element_rect(fill = "#f8f9fa", color = NA),
    panel.background = element_rect(fill = "#f8f9fa", color = NA)
  )

print_table <- function(x) {
  
  x |> 
    knitr::kable(align = "c", digits = 0) |> 
    kableExtra::kable_styling(
        full_width = FALSE,
        bootstrap_options = c("condensed", "responsive", "hover", "striped")
    )

}
```

```{r}
#| include: false
#> IPI - Construção Civil (sem ajuste sazonal)
ipicc <- rbcb::get_series(21868)
#> Consumo mensal de energia elétrica - Residencial
energia <- rbcb::get_series(1403)
#> Car accidents in São Paulo
# accidents <- read_csv(here::here("static/data/"))
#> Demanda mensal por gasolina
gasolina <- read_csv(here::here("static/data/br_anp_gasolina.csv"))
#> Demanda mensal EMTU
emtu <- read_csv(here::here("static/data/emtu_passagens.csv"))
```

```{r}
#| eval: false
#> IPI - Construção Civil (sem ajuste sazonal)
ipicc <- rbcb::get_series(21868)
#> Consumo mensal de energia elétrica - Residencial
df_energia <- rbcb::get_series(1403)
#> Car accidents in São Paulo
accidents <- read_csv("...")
#> Demanda mensal por gasolina
gasolina <- read_csv("...")
#> Demanda mensal EMTU
emtu <- read_csv("...")
```

# Sazonalidade

## Sazonalidade Clássica

A forma "clássica" de se modelar sazonalidade numa série é decompondo ela em três componentes: tendência, sazonalidade, e ruído. Didaticamente, temos:

$$
y_{t} = T_{t} + S_{t} + u_{t}
$$

Em geral, a tendência $T_{t}$ é um polinômio, de primeiro ou segundo grau[^1], que depende do tempo ou uma média móvel simples. Já a sazonalidade, $S_{t}$ entra linearmente no modelo: coloca-se uma variável binária (*dummy*) para cada período sazonal. No caso de uma série com sazonalidade mensal, isto significa incluir onze variáveris binárias[^2]. O caso de uma tendência linear com sazonalidade "determinística"[^3] é expresso na equação abaixo.

[^1]: Pode-se usar um polinômio de qualquer grau, mas polinômios de ordens muito elevadas costumam se ajustar "perfeitamente" aos dados e vão absorver toda a sazonalidade da série.

[^2]: Sempre coloca-se uma variável binária a menos do que períodos sazonais pela questão do posto da matriz de regressores. Na prática, se houvesse uma dummy para cada período sazonal a matriz de regressão seria uma matriz identidade.

[^3]: É comum ver esta expressão nos textos de séries de tempo; em geral o termo é utilizado em contraste com modelos SARIMA onde a sazonalidade é estocástica, mas o termo "determinístico" não tem implicação causal. Na prática, quer dizer que a sazonalidade não varia no tempo e é sempre a mesma o que pode gerar previsões ruins a depender do caso.

$$
y_{t} = \alpha_{0} + \alpha_{1}t + \sum_{i = 1}^{11}\beta_{i}\delta_{i} + u_{t}
$$

Neste tipo de regressão o "período-base" fica incorporado no termo de constante. Isto é, imaginando que temos uma série mensal e que janeiro seja o mês-base, o efeito de janeiro ficaria estimado junto com \alpha\_{0} e os demais

```{r}
df_to_ts <- function(df, date_col = NULL, value_col = NULL, freq = "M") {
  
  if (is.null(date_col)) {date_col = colnames(df)[1]}
  if (is.null(value_col)) {value_col = colnames(df)[2]}
  
  #> Select columns and remove missing values
  df = na.omit(dplyr::select(df, c(date_col, value_col)))
  #> Get dates and check class
  dates = df[[date_col]]
  
  if (!inherits(dates, "Date")) {
    stop("Invalid date column selected.")
  }
  
  #> Check frequency argument
  stopifnot(any(freq %in% c("M", "T", "Q")))
  frequency = ifelse(freq == "M", 12, 4)
  
  #> Get the starting date
  date_min = min(dates)
  #> Convert into a numeric vector
  mes = lubridate::month(date_min)
  ano = lubridate::year(date_min)
  start = c(ano, mes)
  
  #> Get the values of the series
  values = as.numeric(df[[value_col]])
  
  #> Convert to ts
  y = stats::ts(values, start = start, frequency = frequency)
  
  return(y)
  
}
```

```{r}
ipi <- df_to_ts(ipicc)

autoplot(ipi)
```

```{r}
model_lm <- tslm(ipi ~ trend + season)


broom::tidy(summary(model_lm))
```

```{r}
autoplot(ipi) +
  autolayer(fitted(model_lm))
```

```{r}
ggseasonplot(ipi)
```

```{r}
ma_trend <- stats::filter(ipi, filter = rep(1/5, 5), method = "convolution")

autoplot(ipi) +
  autolayer(ma_trend)
```

```{r}
ipi_detrend <- ipi - ma_trend

autoplot(ipi_detrend)

```

```{r}
model_lm <- tslm(ipi_detrend ~ season)

autoplot(ipi_detrend) +
  autolayer(fitted(model_lm))
```

```{r}
model_lm <- tslm(ipi ~ season)
anova(model_lm)
forecast::ggtsdisplay(resid(model_lm))
```

# X13-ARIMA

```{r}
library(seasonal)
```

```{r}
sipi = seas(ipi)

summary(sipi)
```
